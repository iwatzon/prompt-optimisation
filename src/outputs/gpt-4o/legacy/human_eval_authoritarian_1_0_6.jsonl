{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return total_sum, total_product"}
{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return numbers\n    \n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = float('-inf')\n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n    return rolling_max_list"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    groups = []\n    balance = 0\n    current_group = []\n    \n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    \n    return groups\n\n# Example usage:\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# ['()', '(())', '(()())']"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) it consists of.\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('0' if bit_a == bit_b else '1' for bit_a, bit_b in zip(a, b))"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string  # fallback case, though we should always return before this point."}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_notes = music_string.split()\n    return [beats[note] for note in music_notes]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_nesting_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n\n\n# Test cases to illustrate the behavior\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Expected output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to count overlapping cases\n    return count"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    # Sort the list to check only adjacent pairs for closest elements\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n        'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n        'eight': 8, 'nine': 9\n    }\n    \n    words = numbers.split()\n    words.sort(key=lambda word: num_dict[word])\n    \n    return ' '.join(words)"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_counts = {}\n    for number in numbers:\n        if number in unique_counts:\n            unique_counts[number] += 1\n        else:\n            unique_counts[number] = 1\n\n    return [number for number in numbers if unique_counts[number] == 1]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0  # Return 0 for an empty list\n    \n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    third_indices_values = [l[i] for i in range(0, len(l), 3)]\n    third_indices_values.sort()\n    \n    l_prime = l[:]  # Make a copy of the original list\n    for i, value in enumerate(third_indices_values):\n        l_prime[i * 3] = value\n    \n    return l_prime"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    \n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n\n    l_sorted = l[:]\n    for index, value in enumerate(even_indices_values):\n        l_sorted[2 * index] = value\n\n    return l_sorted"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"\n    Given length of a side and height, return the area of a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    clean_text = text.replace(\" \", \"\").lower()  # Removing spaces and converting to lowercase for uniformity\n    return clean_text == clean_text[::-1]"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    digits.reverse()\n    return ''.join(digits)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n\n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '<':\n            count += 1\n        elif bracket == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0  # Starting values for fib4(0), fib4(1), fib4(2), and fib4(3)\n    for i in range(4, n + 1):\n        next_value = a + b + c + d\n        a, b, c, d = b, c, d, next_value\n    \n    return d"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n) % p"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    if all(l[i] <= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    if all(l[i] >= l[i + 1] for i in range(len(l) - 1)):\n        return True\n    return False"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while n % factor == 0:\n        n //= factor\n    \n    factor = 3\n    while n != 1 and factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 2\n    \n    if n > 1:\n        return n\n    else:\n        return factor - 2"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Returns an encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with the encode_shift function. Returns the decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord('a') - 5) % 26) + ord('a')) for ch in s])"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    open_count = 0\n    for char in brackets:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        if open_count < 0:\n            return False\n    return open_count == 0"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) / 2"}
{"task_id": "HumanEval/32", "completion": "import math\nimport scipy.optimize\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    \n    def func(x):\n        return poly(xs, x)\n    \n    # Use a numerical method to find a root, initial guess is 0\n    zero = scipy.optimize.newton(func, 0)\n    return zero"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift >= n:\n        return digits[::-1]\n    else:\n        shift = shift % n\n        return digits[-shift:] + digits[:-shift]"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fibonacci_generator():\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        yield a\n\ndef prime_fib(n: int) -> int:\n    fib_gen = fibonacci_generator()\n    count = 0\n    while True:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n                \n# Example usage\n# print(prime_fib(1))  # Output: 2\n# print(prime_fib(2))  # Output: 3\n# print(prime_fib(3))  # Output: 5\n# print(prime_fib(4))  # Output: 13\n# print(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    length = len(arr)\n    changes = 0\n    for i in range(length // 2):\n        if arr[i] != arr[length - 1 - i]:\n            changes += 1\n    return changes"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    is_balanced = q == q[::-1]\n    # Check if the sum of the elements is less than or equal to the maximum weight\n    within_weight_limit = sum(q) <= w\n\n    # The object will fly if it is balanced and within the weight limit\n    return is_balanced and within_weight_limit"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}  # Base cases\n\n    def fibfib_helper(n: int) -> int:\n        if n in memo:\n            return memo[n]\n        else:\n            result = fibfib_helper(n-1) + fibfib_helper(n-2) + fibfib_helper(n-3)\n            memo[n] = result\n            return result\n\n    return fibfib_helper(n)"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string into groups, where each group is of length 3\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n    \n    # Cycle elements in each group unless the group has fewer than 3 characters\n    encoded_groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n\n    # Join the encoded groups back into a single string\n    return \"\".join(encoded_groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with the encode_cyclic function and returns the decoded string.\n    \"\"\"\n    # Split string into groups, where each group is of length 3\n    groups = [s[i:i+3] for i in range(0, len(s), 3)]\n\n    # Reverse the cyclic operation in each group unless the group has fewer than 3 characters\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n\n    # Join the decoded groups back into a single string\n    return \"\".join(decoded_groups)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s: str) -> int:\n    vowels = 'aeiou'\n    count = 0\n    s = s.lower()\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n    \n    if s.endswith('y'):\n        count += 1\n    \n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"rhythm\")) # Output: 1\nprint(vowels_count(\"syzygy\")) # Output: 1\nprint(vowels_count(\"AEIOU\"))  # Output: 5"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    # Sort the list to perform the two pointers technique\n    l.sort()\n    \n    # Traverse the list\n    for i in range(len(l) - 2):\n        # Initialize left and right pointers\n        left = i + 1\n        right = len(l) - 1\n        \n        # Use the two pointers technique to find a triplet\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a: int) -> bool:\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal: int) -> str:\n    binary_string = bin(decimal)[2:]\n    return f\"db{binary_string}db\""}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    result = []\n    while lst:\n        # Append the minimum element\n        result.append(min(lst))\n        lst.remove(min(lst))\n        \n        if lst:\n            # Append the maximum element if list is not empty\n            result.append(max(lst))\n            lst.remove(max(lst))\n            \n    return result"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    \n    # Count the frequency of each integer in the list\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    result = -1\n    \n    # Find the greatest integer that satisfies the condition\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n    \n    return result\n\n# Examples:\n# search([4, 1, 2, 2, 3, 1]) should return 2\n# search([1, 2, 2, 3, 3, 3, 4, 4, 4]) should return 3\n# search([5, 5, 4, 4, 4]) should return -1"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 18 * (10**(n-2))"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a: int) -> bool:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, 100) if is_prime(x)]\n\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x: int, n: int) -> bool:\n    if n == 1:  # Special case where n is 1, only 1^any number is 1\n        return x == 1\n\n    power = 1\n    while power < x:\n        power *= n\n    \n    return power == x"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string: str) -> bool:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return is_prime(len(string))"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/84", "completion": "def solve(N: int) -> str:\n    # Calculate the sum of the digits of N\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    # Convert the sum to binary and return the binary string without the '0b' prefix\n    return bin(sum_of_digits)[2:]"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s: str) -> str:\n    def sort_word(word: str) -> str:\n        return ''.join(sorted(word))\n\n    result = []\n    word = []\n    for char in s:\n        if char.isalpha():\n            word.append(char)\n        else:\n            if word:\n                result.append(sort_word(''.join(word)))\n                word = []\n            result.append(char)\n\n    # Add any remaining word to result\n    if word:\n        result.append(sort_word(''.join(word)))\n\n    return ''.join(result)"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if not arr:\n        return []\n    smallest_even = float('inf')\n    smallest_index = -1\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n    return [smallest_even, smallest_index] if smallest_index != -1 else []"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    return False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grade_mapping = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (0.0, 'E')\n    ]\n\n    def get_letter_grade(gpa):\n        for threshold, letter in grade_mapping:\n            if gpa >= threshold:\n                return letter\n        return 'E'  # Default in case no match found, should never hit due to table setup\n\n    return [get_letter_grade(gpa) for gpa in grades]"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    \n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort primarily by row in ascending order,\n    # Secondarily by column in descending order within the same row.\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S: str) -> int:\n    sentences = S.split('.')\n    sentences += [item for s in sentences for item in s.split('?')]\n    sentences += [item for s in sentences for item in s.split('!')]\n    \n    boredom_count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    \n    return boredom_count"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    unique_elements = set(lst)\n    if len(unique_elements) < 2:\n        return None\n    \n    sorted_elements = sorted(unique_elements)\n    return sorted_elements[1]"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \n    Examples:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Extract numbers from the string\n    numbers = [int(word) for word in s.split() if word.isdigit()]\n    if len(numbers) != 2:\n        raise ValueError(\"Input string must contain exactly two numbers representing apples and oranges.\")\n    \n    apples, oranges = numbers\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s: str) -> str:\n    encrypted = []\n    for char in s:\n        if char.isalpha():\n            rotated = chr(((ord(char) - ord('a') + 2 * 2) % 26) + ord('a'))\n            encrypted.append(rotated)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/97", "completion": "def multiply(a: int, b: int) -> int:\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/101", "completion": "def words_string(s: str) -> list:\n    import re\n    return re.split(r'[,\\s]+', s.strip())"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict) -> bool:\n    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    \n    if all(isinstance(key, str) for key in keys):\n        all_lower = all(key.islower() for key in keys)\n        all_upper = all(key.isupper() for key in keys)\n        return all_lower or all_upper\n    \n    return False"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    avg = total_sum / count\n    rounded_avg = round(avg)\n    \n    return bin(rounded_avg)"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n\n    # Start from the maximum value 'y' and check down to 'x'\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for x in arr if sum(int(digit) for digit in str(abs(x))) > 0)"}
{"task_id": "HumanEval/93", "completion": "def encode(message: str) -> str:\n    def swap_case_and_replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n        if char in vowels:\n            return replacements[char]\n        else:\n            return char.swapcase()\n    \n    return ''.join(swap_case_and_replace_vowel(char) for char in message)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones. \n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    for i in range(1, n):\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n: int) -> tuple:\n    def is_palindrome(num: int) -> bool:\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value: str) -> int:\n    number = float(value)\n\n    # Get the floor and ceiling values\n    floor_value = int(number // 1)\n    ceiling_value = floor_value + 1\n    \n    # Calculate the distances to the floor and ceiling\n    distance_to_floor = number - floor_value\n    distance_to_ceiling = ceiling_value - number\n    \n    # Determine the closest integer based on the distances\n    if distance_to_floor < distance_to_ceiling:\n        return floor_value\n    elif distance_to_ceiling < distance_to_floor:\n        return ceiling_value\n    else:\n        # When equidistant, round away from zero\n        if number > 0:\n            return ceiling_value\n        else:\n            return floor_value"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    def sum_to_i(i):\n        return sum(range(1, i + 1))\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n    \n    return result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s: str, c: str) -> tuple:\n    result_str = ''.join([char for char in s if char not in c])\n    is_palindrome = result_str == result_str[::-1]\n    return (result_str, is_palindrome)"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num: str) -> int:\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    counts = {}\n    \n    # Split the test string by spaces to get individual letters\n    letters = test.split()\n    \n    # Count the frequency of each letter\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    if not counts:\n        return counts\n    \n    # Find the maximum frequency\n    max_count = max(counts.values())\n    \n    # Create a dictionary with only the letters that have the maximum frequency\n    max_histogram = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return max_histogram"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n\n    first_value = array[0]\n    last_value = array[-1]\n    sum_first_last = first_value + last_value\n\n    sorted_array = sorted(array)\n\n    if sum_first_last % 2 == 0:\n        sorted_array.reverse()\n    \n    return sorted_array"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for letter in word if letter.isalpha() and letter not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    # Calculate the total number of units of water in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times the bucket needs to be lowered\n    times_to_lower_bucket = math.ceil(total_water / capacity)\n    \n    return times_to_lower_bucket"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    \n    # Filter only the digits from 1 to 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort and reverse the filtered array\n    sorted_reversed_arr = sorted(filtered_arr)[::-1]\n    \n    # Replace each number by its corresponding name\n    result = [digit_names[num - 1] for num in sorted_reversed_arr]\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    \n    # Iterate from right to left, skipping the first and last characters.\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # First, sort the array in descending order to get the largest elements first\n    arr_sorted = sorted(arr, reverse=True)\n    \n    # Take the first k elements from the sorted array\n    result = arr_sorted[:k]\n    \n    # Sort the result in ascending order as required by the example outputs\n    result_sorted = sorted(result)\n    \n    return result_sorted"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    sum_of_elements = 0\n    for i in range(min(k, len(arr))):\n        if -99 <= arr[i] <= 99:  # Check if the element has at most two digits (considering negatives also)\n            sum_of_elements += arr[i]\n    return sum_of_elements"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        count = sum(1 for char in s if char in '13579')\n        sentence = f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"\n        result.append(sentence)\n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n: int) -> list:\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    collatz_sequence.append(1)  # Add 1 since it's the end of every Collatz sequence\n    return sorted(collatz_sequence)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check if the list is in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    # Check for any number having more than 1 duplicate\n    for num in lst:\n        if lst.count(num) > 2:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n                if balance < 0:\n                    return False\n        return balance == 0\n\n    s1, s2 = lst\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection\n    inter_start = max(start1, start2)\n    inter_end = min(end1, end2)\n    \n    # Check if there is an intersection\n    if inter_start > inter_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = inter_end - inter_start + 1\n    \n    # Determine if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    magnitude_sum = sum(abs(x) for x in arr)\n    sign_product = 1\n    for x in arr:\n        if x == 0:\n            sign_product = 0\n            break\n        sign_product *= 1 if x > 0 else -1\n\n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n\n    # Check if lst1 already contains all even numbers\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n\n    # Find all odd numbers in lst1\n    odd_in_lst1 = [x for x in lst1 if x % 2 != 0]\n\n    # Find all even numbers in lst2\n    even_in_lst2 = [x for x in lst2 if x % 2 == 0]\n\n    # If there are at least as many even numbers in lst2 as odd numbers in lst1,\n    # it is possible to exchange them to make lst1 all even\n    if len(even_in_lst2) >= len(odd_in_lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            if '[' in stack:\n                nested_found = True\n\n    return nested_found"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(char) - ord('a')) % 2 == 1 for char in txt if 'a' <= char <= 'z')"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt: str) -> bool:\n    txt = txt.rstrip()  # Remove trailing whitespace\n    if not txt:  # Check if the string is empty after trimming\n        return False\n    if txt[-1].isalpha():  # Check if the last character is a letter\n        parts = txt.split()\n        return txt[-1] == parts[-1]  # Check if the last character is a separate letter\n    return False"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def dfs(x, y, path):\n        if len(path) == k:\n            paths.append(list(path))\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()\n\n    def lexicographical_compare(a, b):\n        for i in range(len(a)):\n            if a[i] < b[i]:\n                return -1\n            if a[i] > b[i]:\n                return 1\n        return 0\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right\n    paths = []\n    \n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n    \n    paths.sort(key=lambda x: tuple(x))  # Sorting by lexicographical order\n    return paths[0]"}
{"task_id": "HumanEval/131", "completion": "def digits(n: int) -> int:\n    odd_product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:  # Check if the digit is odd\n            has_odd = True\n            odd_product *= digit\n        n //= 10  # Remove the last digit\n    \n    return odd_product if has_odd else 0"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    def sort_key(x):\n        # Count the number of 1's in binary representation and return tuple with the count and the number itself\n        return (bin(x).count('1'), x)\n    \n    return sorted(arr, key=sort_key)\n\n# Example usages:\n# print(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 3, 4, 5]\n# print(sort_array([-2, -3, -4, -5, -6]))  # Output: [-6, -5, -4, -3, -2]\n# print(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date: str) -> bool:\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date string is in the correct format 'mm-dd-yyyy'\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = date.split('-')\n\n    # Validate that month, day, year are numeric\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month = int(month)\n    day = int(day)\n\n    # Check validity of month\n    if month < 1 or month > 12:\n        return False\n\n    # Check validity of day\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    \n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert_to_float_if_possible(value):\n        if isinstance(value, str):\n            value = value.replace(\",\", \".\")\n            try:\n                return float(value)\n            except ValueError:\n                return value\n        return value\n    \n    a_converted = convert_to_float_if_possible(a)\n    b_converted = convert_to_float_if_possible(b)\n    \n    if a_converted == b_converted:\n        return None\n    elif a_converted > b_converted:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text: str) -> str:\n    import re\n    # Replace sequences of more than 2 spaces with a single hyphen\n    result = re.sub(r'\\s{3,}', '-', text)\n    # Replace remaining single and double spaces with underscores\n    result = re.sub(r'\\s', '_', result)\n    return result"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n    # Any even number >= 8 can be written as the sum of exactly 4 positive even numbers.\n    return n >= 8 and n % 2 == 0"}
{"task_id": "HumanEval/144", "completion": "def simplify(x: str, n: str) -> bool:\n    def parse_fraction(fraction: str):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n    \n    x_num, x_den = parse_fraction(x)\n    n_num, n_den = parse_fraction(n)\n\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    return result_num % result_den == 0"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name: str) -> str:\n    # Regular expression to check the file name validity\n    pattern = r'^[a-zA-Z][^0-9]*[0-9]{0,3}[^0-9]*\\.(txt|exe|dll)$'\n    \n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence: str) -> str:\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n    \"\"\"\n    if not arr:\n        return True\n    \n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    for i in range(n):\n        shifted_arr = arr[-i:] + arr[:-i]\n        if shifted_arr == sorted_arr:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {1, 3, 5, 7, 9}\n\n    def first_digit(n):\n        n = abs(n)\n        while n >= 10:\n            n //= 10\n        return n\n\n    def last_digit(n):\n        return abs(n) % 10\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(first_digit(num)) and is_odd_digit(last_digit(num)):\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - g_guess) for g, g_guess in zip(game, guess)]"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num: int) -> tuple:\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def compute_tribonacci(k, memo):\n        if k in memo:\n            return memo[k]\n        if k == 0:\n            result = 1\n        elif k == 1:\n            result = 3\n        elif k % 2 == 0:\n            result = 1 + k // 2\n        else:\n            result = compute_tribonacci(k - 1, memo) + compute_tribonacci(k - 2, memo) + compute_tribonacci(k + 1, memo)\n        memo[k] = result\n        return result\n\n    memo = {}\n    sequence = [compute_tribonacci(i, memo) for i in range(n + 1)]\n    return sequence"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    result = \"\"\n    \n    for word in sorted(words):\n        unique_chars_count = len(set(word))\n        if unique_chars_count > max_unique_chars:\n            max_unique_chars = unique_chars_count\n            result = word\n    \n    return result"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n\n    If the input list is empty, return 0.\n    \"\"\"\n    return sum(x ** 2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    def generate_array(n):\n        return [i * i - i + 1 for i in range(1, n + 1)]\n    \n    def count_triples(array):\n        count = 0\n        length = len(array)\n        for i in range(length):\n            for j in range(i + 1, length):\n                for k in range(j + 1, length):\n                    if (array[i] + array[j] + array[k]) % 3 == 0:\n                        count += 1\n        return count\n    \n    array = generate_array(n)\n    return count_triples(array)"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/159", "completion": "def eat(number: int, need: int, remaining: int) -> list[int]:\n    if need <= remaining:\n        total_eaten = number + need\n        carrots_left = remaining - need\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n    if b in a:\n        return True\n    for i in range(1, len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/161", "completion": "def solve(s: str) -> str:\n    if any(c.isalpha() for c in s):\n        # Reverse the case for each letter in the string\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    else:\n        # Reverse the entire string if no letters are present\n        return s[::-1]"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number: int) -> str:\n    roman_numerals = {\n        1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',\n        100: 'C', 90: 'XC', 50: 'L', 40: 'XL',\n        10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'\n    }\n    \n    result = []\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    \n    return ''.join(result).lower()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a: int, b: int) -> list:\n    even_digits = [2, 4, 6, 8]\n    start = min(a, b)\n    end = max(a, b)\n    result = [i for i in range(start, end + 1) if i in even_digits]\n    return result"}
{"task_id": "HumanEval/139", "completion": "def factorial(n: int) -> int:\n    \"\"\"\n    Computes the factorial of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef special_factorial(n: int) -> int:\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= factorial(i)\n    return special_fact"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically for same length words\n    sorted_lst = sorted(filtered_lst, key=lambda s: (len(s), s))\n    \n    return sorted_lst"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    def strength(extension):\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        return cap - sm\n    \n    strongest = extensions[0]\n    max_strength = strength(strongest)\n    \n    for extension in extensions[1:]:\n        current_strength = strength(extension)\n        if current_strength > max_strength:\n            strongest = extension\n            max_strength = current_strength\n    \n    return f\"{class_name}.{strongest}\""}
