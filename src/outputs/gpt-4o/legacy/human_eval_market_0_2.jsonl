{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor (GCD) of two integers a and b using \n    the Euclidean algorithm. The GCD is the largest positive integer that \n    divides both a and b without leaving a remainder.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The greatest common divisor of a and b.\n    \n    Raises:\n    ValueError: If either a or b is not an integer or if both are zero.\n    \n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both a and b cannot be zero.\n    \n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both a and b must be integers.\")\n\n    if a == 0 and b == 0:\n        raise ValueError(\"Both a and b cannot be zero.\")\n\n    a, b = abs(a), abs(b)  # Ensure positive integers for compatibility with the algorithm\n\n    # Euclidean algorithm\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Testing the function with various cases\nimport unittest\n\nclass TestGreatestCommonDivisor(unittest.TestCase):\n    def test_positive_integers(self):\n        self.assertEqual(greatest_common_divisor(3, 5), 1)\n        self.assertEqual(greatest_common_divisor(25, 15), 5)\n        self.assertEqual(greatest_common_divisor(100, 10), 10)\n\n    def test_zero_and_positive_integers(self):\n        self.assertEqual(greatest_common_divisor(0, 5), 5)\n        self.assertEqual(greatest_common_divisor(5, 0), 5)\n\n    def test_negative_integers(self):\n        self.assertEqual(greatest_common_divisor(-25, 15), 5)\n        self.assertEqual(greatest_common_divisor(25, -15), 5)\n        self.assertEqual(greatest_common_divisor(-25, -15), 5)\n\n    def test_zero_and_zero(self):\n        with self.assertRaises(ValueError):\n            greatest_common_divisor(0, 0)\n\n    def test_non_integer_inputs(self):\n        with self.assertRaises(ValueError):\n            greatest_common_divisor(3.5, 5)\n        with self.assertRaises(ValueError):\n            greatest_common_divisor(3, \"5\")\n        with self.assertRaises(ValueError):\n            greatest_common_divisor(\"abc\", \"def\")\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`.\n    \n    Args:\n    numbers (List[int]): The input list of integers where the delimiter will be inserted.\n    delimiter (int): The integer to be inserted between the numbers.\n    \n    Returns:\n    List[int]: A new list with the delimiter inserted between every two consecutive elements of the input list.\n    \n    Raises:\n    TypeError: If the input is not of the expected type.\n    ValueError: If the input list contains non-integer elements.\n    \n    Examples:\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    \n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"The first argument must be a list.\")\n    \n    # Validate that all elements in the input list are integers\n    for num in numbers:\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the input list must be integers.\")\n    \n    # If the list is empty or has only one element, return it unchanged\n    if len(numbers) < 2:\n        return numbers\n    \n    # Use a list comprehension to intersperse the delimiter\n    result = [element for i in range(len(numbers)) for element in (numbers[i], delimiter) if i != len(numbers) - 1]\n    result.append(numbers[-1])  # Append the last element\n    \n    return result\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests for edge cases and performance\n    assert intersperse([1, 2, 3], 4) == [1, 4, 2, 4, 3], \"Test case 1 failed\"\n    assert intersperse([], 4) == [], \"Test case 2 failed\"\n    assert intersperse([1], 4) == [1], \"Test case 3 failed\"\n    assert intersperse([1, 2], 4) == [1, 4, 2], \"Test case 4 failed\"\n    \n    print(\"All additional tests passed.\")"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" \n    Input to this function is a string containing multiple groups of nested parentheses. \n    Your goal is to separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    \n    Args:\n        paren_string (str): A string containing multiple groups of nested parentheses.\n    \n    Returns:\n        List[str]: A list of strings where each string is a balanced group of parentheses.\n    \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    balance = 0\n    current_group = []\n    \n    for char in paren_string:\n        current_group.append(char)\n        \n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        if balance == 0 and current_group:\n            # Join the current group to form a group string\n            result.append(''.join(current_group))\n            # Reset the current group for the next batch\n            current_group = []\n    \n    return result\n\n# Test cases to ensure the function works as expected\nassert separate_paren_groups('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\nassert separate_paren_groups('()') == ['()']\nassert separate_paren_groups('(((()))) (()()) (())') == ['(((())))', '(()())', '(())']\nassert separate_paren_groups('()()()') == ['()', '()', '()']\nassert separate_paren_groups('') == []\nassert separate_paren_groups(' () ') == ['()']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n    numbers (List[int]): A list of integers.\n\n    Returns:\n    Tuple[int, int]: A tuple where the first element is the sum of all integers in the list and the second element is the product of all integers in the list.\n\n    Examples:\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Edge case: Check if the list is empty\n    if not numbers:\n        return (0, 1)\n\n    # Calculate the sum using the built-in sum function\n    total_sum = sum(numbers)\n    \n    # Calculate the product using functools.reduce\n    total_product = reduce(operator.mul, numbers, 1)\n\n    return total_sum, total_product\n\n# Unit Tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional explicit tests\n    assert sum_product([]) == (0, 1), \"Test case 1 failed\"\n    assert sum_product([1]) == (1, 1), \"Test case 2 failed\"\n    assert sum_product([1, 2]) == (3, 2), \"Test case 3 failed\"\n    assert sum_product([1, 2, 3]) == (6, 6), \"Test case 4 failed\"\n    assert sum_product([1, 2, 3, 4]) == (10, 24), \"Test case 5 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings for those that contain the given substring.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to check for within each string.\n\n    Returns:\n        List[str]: A list of strings from the input list that contain the substring.\n\n    Raises:\n        ValueError: If the provided `strings` is not a list or if any item in `strings` is not a string,\n                    or if `substring` is not a string.\n\n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    \"\"\"\n    \n    if not isinstance(strings, list):\n        raise ValueError(\"The first argument should be a list of strings.\")\n    if not all(isinstance(s, str) for s in strings):\n        raise ValueError(\"All items in the first argument should be strings.\")\n    if not isinstance(substring, str):\n        raise ValueError(\"The second argument should be a string.\")\n    \n    # Using list comprehension for scalability and efficiency\n    return [s for s in strings if substring in s]\n\n# Unit tests for various edge cases, including invalid inputs\nif __name__ == \"__main__\":\n    # Valid cases\n    assert filter_by_substring([], 'a') == []\n    assert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']\n    assert filter_by_substring(['test', 'filter', 'string'], 'i') == ['filter', 'string']\n    assert filter_by_substring(['hello', 'world'], 'o') == ['hello', 'world']\n    \n    # Edge cases\n    assert filter_by_substring([''], 'a') == []\n    assert filter_by_substring([''], '') == ['']\n    assert filter_by_substring(['abc', ''], '') == ['abc', '']\n    \n    # Invalid cases\n    try:\n        filter_by_substring('not a list', 'a')\n    except ValueError as e:\n        assert str(e) == \"The first argument should be a list of strings.\"\n    \n    try:\n        filter_by_substring(['abc', 123], 'a')\n    except ValueError as e:\n        assert str(e) == \"All items in the first argument should be strings.\"\n    \n    try:\n        filter_by_substring(['abc', 'def'], 123)\n    except ValueError as e:\n        assert str(e) == \"The second argument should be a string.\"\n\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" \n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    Args:\n    string (str): The input string.\n    \n    Returns:\n    str: The shortest palindrome that can be formed by appending characters to the end of the input string.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    n = len(string)\n    \n    # Function to find the largest palindrome starting from the beginning of the string\n    def longest_palindromic_suffix(s: str) -> int:\n        for i in range(n):\n            if is_palindrome(s[i:]):\n                return i\n        return n\n    \n    # Find the start index of the longest palindromic suffix\n    start_index = longest_palindromic_suffix(string)\n    \n    # Characters to be added to make the string a palindrome\n    to_add = string[:start_index][::-1]\n    \n    # Return the result\n    return string + to_add\n\n# Adding test code to verify correctness and edge cases.\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional tests\n    assert make_palindrome(\"a\") == \"a\"\n    assert make_palindrome(\"ab\") == \"aba\"\n    assert make_palindrome(\"race\") == \"racecar\"\n    assert make_palindrome(\"noon\") == \"noon\"\n    assert make_palindrome(\"level\") == \"level\"\n    assert make_palindrome(\"deed\") == \"deed\""}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    Args:\n    strings: List[str] - A list of strings to evaluate.\n\n    Returns:\n    Optional[str] - The longest string in the list, or None if the list is empty.\n    \n    Examples:\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    return max(strings, key=len)\n\n# Adding unit test\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found \n    until given moment in the sequence.\n    \n    Args:\n    numbers (List[int]): A list of integers.\n    \n    Returns:\n    List[int]: A list of rolling maximum values corresponding to the input list.\n    \n    Raises:\n    ValueError: If the input is not a list or an empty list.\n    \n    Examples:\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \n    >>> rolling_max([1, 3, 1, 5])\n    [1, 3, 3, 5]\n    \n    >>> rolling_max([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list must not be empty\n    \"\"\"\n    \n    # Validate input\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list\")\n    if not numbers:\n        raise ValueError(\"Input list must not be empty\")\n\n    # Initialize the result list and set the initial maximum\n    result = []\n    current_max = float('-inf')\n    \n    # Iterate through the given list and update the current maximum\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    \n    return result\n\n# Testing the function:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    Args:\n    paren_string (str): A string containing multiple groups of nested parentheses, separated by spaces.\n\n    Returns:\n    List[int]: A list of integers where each integer represents the deepest level of nesting for the corresponding group.\n\n    Examples:\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    \n    # Initialize the result list\n    nesting_levels = []\n\n    # Split the input string by spaces to process each group individually\n    groups = paren_string.split()\n\n    # Iterate over each group to calculate the maximum nesting level\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n\n        # Iterate through each character to compute the depth\n        for char in group:\n            if char == '(':\n                current_depth += 1\n            elif char == ')':\n                current_depth -= 1\n\n            # Update max_depth if the current depth is greater\n            max_depth = max(max_depth, current_depth)\n\n        # Append the maximum depth for the current group to the result list\n        nesting_levels.append(max_depth)\n\n    return nesting_levels\n\n# Example usage:\n# parse_nested_parens('(()()) ((())) () ((())()())') -> [2, 3, 1, 3]"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Detects if a bank account balance falls below zero at any point based on a list of operations.\n\n    Args:\n    operations (List[int]): A list of integers where positive values represent deposits and \n                            negative values represent withdrawals.\n\n    Returns:\n    bool: True if at any point the balance falls below zero, False otherwise.\n\n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n\n    if not all(isinstance(op, int) for op in operations):\n        raise ValueError(\"All operations must be integers\")\n\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n\n# Testing with example cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate the Mean Absolute Deviation (MAD)\n    around the mean of the dataset.\n\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    Args:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    float: The mean absolute deviation of the input numbers.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    \n    Example:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list must not be empty\")\n    \n    n = len(numbers)\n    mean = sum(numbers) / n\n    \n    deviation_sum = sum(abs(x - mean) for x in numbers)\n    mad = deviation_sum / n\n    \n    return mad"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    Args:\n    number (float): The input positive floating point number.\n    \n    Returns:\n    float: The decimal part of the input number.\n\n    Raises:\n    ValueError: If the provided number is not a positive float.\n    \"\"\"\n    if not isinstance(number, (float, int)) or number <= 0:\n        raise ValueError(\"Input must be a positive float or int\")\n\n    return number - int(number)\n\n# Unit tests\ndef test_truncate_number():\n    # Test with typical cases\n    assert truncate_number(3.5) == 0.5, f\"Expected 0.5 but got {truncate_number(3.5)}\"\n    assert truncate_number(2.999) == 0.999, f\"Expected 0.999 but got {truncate_number(2.999)}\"\n    assert truncate_number(5.0) == 0.0, f\"Expected 0.0 but got {truncate_number(5.0)}\"\n    assert truncate_number(8.1) == 0.1, f\"Expected 0.1 but got {truncate_number(8.1)}\"\n    \n    # Test with integer input\n    assert truncate_number(7) == 0.0, f\"Expected 0.0 but got {truncate_number(7)}\"\n    \n    # Test with edge cases\n    assert truncate_number(0.1) == 0.1, f\"Expected 0.1 but got {truncate_number(0.1)}\"\n    assert truncate_number(1e-9) == 1e-9, f\"Expected 1e-9 but got {truncate_number(1e-9)}\"\n    \n    # Test with zero and negative input\n    try:\n        truncate_number(0)\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive float or int\", f\"Expected ValueError but got {e}\"\n    \n    try:\n        truncate_number(-3.5)\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive float or int\", f\"Expected ValueError but got {e}\"\n\n# Running the tests\ntest_truncate_number()\n\n# Example usage\nprint(truncate_number(3.5)) # Output should be 0.5\nprint(truncate_number(5.7)) # Output should be 0.7\nprint(truncate_number(9))   # Output should be 0.0"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" \n    Perform binary XOR on two strings a and b consisting only of 1s and 0s,\n    and return the result as a string.\n    \n    Args:\n    a (str): Input binary string.\n    b (str): Input binary string.\n    \n    Returns:\n    str: Result of the binary XOR operation.\n    \n    Raises:\n    ValueError: If input strings are not of the same length or contain characters other than '0' and '1'.\n\n    Examples:\n    >>> string_xor('010', '110')\n    '100'\n    \n    >>> string_xor('1010', '0101')\n    '1111'\n    \n    >>> string_xor('111', '000')\n    '111'\n    \"\"\"\n    \n    # Check if input strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Check if input strings contain only '0' and '1'\n    if not (set(a) <= {'0', '1'} and set(b) <= {'0', '1'}):\n        raise ValueError(\"Input strings must contain only '0' and '1'\")\n    \n    # Perform the XOR operation\n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append(str(int(char_a) ^ int(char_b)))\n    \n    # Join the resulting list into a string and return\n    return ''.join(result)\n\n# Example usage:\n# string_xor('010', '110') -> '100'\n# string_xor('1010', '0101') -> '1111'\n# string_xor('111', '000') -> '111'"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) it consists of.\n    \n    Args:\n    string (str): The string to analyze.\n    \n    Returns:\n    int: The number of distinct characters in the string.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Input type validation\n    if not isinstance(string, str):\n        raise TypeError('Input must be a string')\n\n    # Using a set to track distinct characters (case-insensitive)\n    distinct_chars = set()\n    for char in string:\n        # Convert character to lower case for case insensitive comparison\n        distinct_chars.add(char.lower())\n\n    return len(distinct_chars)\n\n\n# Architectural Decisions:\n# 1. Input Validation: Ensure the function handles input errors correctly.\n# 2. Set Use: Leveraged set to automatically manage distinctness and improve performance.\n# 3. Case Insensitivity: Used lower case conversion for consistent character comparison.\n\n# Performance Considerations:\n# - The time complexity of this function is O(n) where n is the length of the string, as each character is processed once.\n# - The space complexity is also O(n) in the worst case (all characters are unique).\n\n# Test cases:\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert count_distinct_characters('xyzXYZ') == 3\n    assert count_distinct_characters('Jerry') == 4\n\n    # Edge cases\n    assert count_distinct_characters('') == 0  # Test with empty string\n    assert count_distinct_characters('aaaAAA') == 1  # Test with identical characters, different cases\n    assert count_distinct_characters('abcABC123!@#') == 12  # Test with mixed alphanumeric and special characters\n\n    # Negative test cases\n    try:\n        count_distinct_characters(12345)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n\n    try:\n        count_distinct_characters(['a', 'b', 'c'])\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n\n    print(\"All tests passed.\")\n\n# Ensure readability and documentation:\n# - Docstring provides a clear description, argument details, return type, raises clause, and examples.\n# - Inline comments document specific design decisions (e.g., set usage, case handling). "}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string, counting overlapping cases.\n\n    Args:\n    string (str): The original string where we will search for the substring.\n    substring (str): The substring to find in the original string.\n\n    Returns:\n    int: The number of times the substring is found in the original string.\n\n    Examples:\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    \n    # Edge case: if the substring is empty, return 0\n    if len(substring) == 0:\n        return 0\n\n    count = 0\n    start = 0\n\n    # Iterate through 'string' to find all occurrences of 'substring'\n    while True:\n        # Find the next occurrence of `substring`, starting from `start` index\n        start = string.find(substring, start)\n        \n        # If no more occurrences are found, break the loop\n        if start == -1:\n            break\n\n        # One match found, increment count\n        count += 1\n\n        # Move `start` ahead for the next potential match\n        start += 1\n\n    return count\n\n# Unit testing inline via assertions\nassert how_many_times('', 'a') == 0, \"Test case 1 failed\"\nassert how_many_times('aaa', 'a') == 3, \"Test case 2 failed\"\nassert how_many_times('aaaa', 'aa') == 3, \"Test case 3 failed\"\nassert how_many_times('abababa', 'aba') == 3, \"Test case 4 failed\"\nassert how_many_times('ababa', '') == 0, \"Test case 5 failed\"\nassert how_many_times('aaaa', 'aaa') == 2, \"Test case 6 failed\"\n\nprint(\"All test cases passed.\")"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    Args:\n    numbers (str): A space-delimited string containing numerals in word form.\n\n    Returns:\n    str: A space-delimited string with the numerals sorted from smallest to largest.\n\n    Examples:\n    >>> sort_numbers('three one five')\n    'one three five'\n    \n    >>> sort_numbers('nine eight seven')\n    'seven eight nine'\n    \"\"\"\n\n    # Mapping of number words to their respective integer values\n    number_word_to_value = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3,\n        'four': 4, 'five': 5, 'six': 6,\n        'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Error handling for invalid input\n    if not isinstance(numbers, str):\n        raise ValueError(\"Input must be a space-delimited string\")\n    \n    # Splitting the input string into individual words\n    words = numbers.split()\n    \n    # Handling empty string case\n    if not words:\n        return \"\"\n    \n    # Converting words to their corresponding integer values\n    try:\n        values = [number_word_to_value[word] for word in words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral word found in input: {e.args[0]}\")\n    \n    # Sorting the values\n    values.sort()\n    \n    # Mapping sorted integer values back to their word forms using reverse dictionary lookup\n    value_to_number_word = {v: k for k, v in number_word_to_value.items()}\n    sorted_words = [value_to_number_word[value] for value in values]\n    \n    # Joining the sorted words back into a space-delimited string\n    return ' '.join(sorted_words)\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    \n    Args:\n    n (int): The number for which to find the largest divisor.\n    \n    Returns:\n    int: The largest number that divides n evenly, smaller than n.\n    \n    Raises:\n    ValueError: If n is not a positive integer greater than 1.\n    \n    Example:\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError(\"Input must be a positive integer greater than 1\")\n    \n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    \n    return 1  # This is just a fallback, practically the loop should find the divisor\n\ndef test_largest_divisor():\n    \"\"\"\n    Unit tests for largest_divisor function.\n    \"\"\"\n    \n    # Test with a common case\n    assert largest_divisor(15) == 5, \"Test Case 1 Failed\"\n    \n    # Test with a prime number (largest divisor should be 1)\n    assert largest_divisor(13) == 1, \"Test Case 2 Failed\"\n    \n    # Test with an even number\n    assert largest_divisor(28) == 14, \"Test Case 3 Failed\"\n    \n    # Test with slightly larger number\n    assert largest_divisor(100) == 50, \"Test Case 4 Failed\"\n    \n    # Test with minimum allowed value\n    try:\n        largest_divisor(1)\n    except ValueError as ve:\n        assert str(ve) == \"Input must be a positive integer greater than 1\", \"Test Case 5 Failed\"\n    \n    # Test with input as zero\n    try:\n        largest_divisor(0)\n    except ValueError as ve:\n        assert str(ve) == \"Input must be a positive integer greater than 1\", \"Test Case 6 Failed\"\n    \n    # Test with negative input\n    try:\n        largest_divisor(-5)\n    except ValueError as ve:\n        assert str(ve) == \"Input must be a positive integer greater than 1\", \"Test Case 7 Failed\"\n    \n    print(\"All test cases pass\")\n\n# Run the tests\nif __name__ == \"__main__\":\n    test_largest_divisor()"}
{"task_id": "HumanEval/0", "completion": "from typing import List\nfrom itertools import combinations\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in the given list of numbers, any two numbers are closer to each other than the given threshold.\n\n    This function checks all possible pairs of numbers from the list to determine if any pair has a difference\n    less than the specified threshold.\n\n    Args:\n    numbers (List[float]): A list of floating point numbers to check.\n    threshold (float): The threshold distance to compare.\n\n    Returns:\n    bool: True if any two numbers are closer than the threshold, False otherwise.\n\n    Raises:\n    ValueError: If the threshold is negative or if a non-list is passed.\n\n    Examples:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    \n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    \n    # Input validation\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not all(isinstance(num, (float, int)) for num in numbers):\n        raise ValueError(\"All elements of the input list must be numbers\")\n    \n    if threshold < 0:\n        raise ValueError(\"Threshold must be non-negative\")\n\n    # Sort the numbers first to improve efficiency\n    sorted_numbers = sorted(numbers)\n\n    # Iterate through the sorted list and compare adjacent elements only\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i + 1] - sorted_numbers[i]) < threshold:\n            return True\n    \n    return False\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" \n    Returns a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \n    Args:\n    n (int): The maximum integer to include in the sequence.\n    \n    Returns:\n    str: A space-delimited string of numbers from 0 to n.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \n    Examples:\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Error handling to ensure 'n' is a non-negative integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Using the join method with a generator expression to create the sequence as a string\n    return ' '.join(str(i) for i in range(n + 1))\n\n# Edge case testing:\nassert string_sequence(0) == '0', \"Test case 0 failed\"\nassert string_sequence(1) == '0 1', \"Test case 1 failed\"\nassert string_sequence(5) == '0 1 2 3 4 5', \"Test case 5 failed\"\nassert string_sequence(10) == '0 1 2 3 4 5 6 7 8 9 10', \"Test case 10 failed\"\n\n# Ensure the function raises appropriate errors:\ntry:\n    string_sequence(-1)\nexcept ValueError as e:\n    assert str(e) == \"Input must be a non-negative integer.\", \"Negative integer test failed\"\n\ntry:\n    string_sequence(\"5\")\nexcept ValueError as e:\n    assert str(e) == \"Input must be an integer.\", \"String input test failed\"\n\nprint(\"All test cases passed.\")"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string.\n    \n    Args:\n    string (str): The input string to determine prefixes from.\n    \n    Returns:\n    List[str]: A list of all prefixes of the input string sorted from shortest to longest.\n    \n    Raises:\n    ValueError: If the input is not a string or if the string is empty.\n    \n    Examples:\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n\n    >>> all_prefixes('')\n    Traceback (most recent call last):\n       ...\n    ValueError: The input string cannot be empty.\n    \n    >>> all_prefixes(123)\n    Traceback (most recent call last):\n       ...\n    ValueError: Input must be a string.\n    \"\"\"\n    \n    # Error handling: Check if input is a string\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Error handling: Check if the string is empty\n    if not string:\n        raise ValueError(\"The input string cannot be empty.\")\n    \n    # Using a list comprehension for creating prefixes efficiently\n    return [string[:i + 1] for i in range(len(string))]\n\n\n# Unit Tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional explicit unit tests\n    assert all_prefixes('abc') == ['a', 'ab', 'abc']\n    assert all_prefixes('a') == ['a']\n    assert all_prefixes('ab') == ['a', 'ab']\n    \n    # Testing with longer string\n    long_string = 'abcdefghij'\n    expected_output = ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'abcdefgh', 'abcdefghi', 'abcdefghij']\n    assert all_prefixes(long_string) == expected_output\n    \n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string.\n    \n    Args:\n    string (str): The string whose length is to be calculated.\n    \n    Returns:\n    int: The length of the string.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \n    Examples:\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    >>> strlen('hello world')\n    11\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    length = 0\n    for char in string:\n        length += 1\n    \n    return length\n\n\n# Here are the unit tests:\n\ndef test_strlen():\n    import unittest\n    \n    class TestStrlen(unittest.TestCase):\n        \n        def test_empty_string(self):\n            self.assertEqual(strlen(\"\"), 0)\n        \n        def test_normal_string(self):\n            self.assertEqual(strlen(\"abc\"), 3)\n        \n        def test_space_in_string(self):\n            self.assertEqual(strlen(\"hello world\"), 11)\n\n        def test_single_character(self):\n            self.assertEqual(strlen(\"a\"), 1)\n        \n        def test_string_with_numbers(self):\n            self.assertEqual(strlen(\"12345\"), 5)\n        \n        def test_mixed_characters(self):\n            self.assertEqual(strlen(\"a1!b2@c#\"), 8)\n        \n        def test_type_error(self):\n            with self.assertRaises(TypeError):\n                strlen(12345)\n        \n        def test_unicode_characters(self):\n            self.assertEqual(strlen(\"\u4f60\u597d\"), 2)\n            self.assertEqual(strlen(\"\u3053\u3093\u306b\u3061\u306f\"), 5)\n    \n    unittest.main(argv=[''], exit=False)\n\n# Running the unit tests\ntest_strlen()"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" \n    Filter given list of any python values only for integers.\n    \n    Args:\n    values (List[Any]): A list containing various Python values.\n    \n    Returns:\n    List[int]: A list containing only integers from the original list.\n    \n    Examples:\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    \n    return [x for x in values if isinstance(x, int)]\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional Tests\n    assert filter_integers([1, '2', 3.14]) == [1]\n    assert filter_integers(['a', 'b', 'c', 4]) == [4]\n    assert filter_integers([]) == []\n    assert filter_integers([5.5, {}, []]) == []\n    assert filter_integers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert filter_integers([None, True, False, 10]) == [10]\n    assert filter_integers([1, 2.5, 3.0, '4.0']) == [1]\n\n    print(\"All additional tests passed!\")"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    Args:\n    music_string (str): String representing musical notes.\n\n    Returns:\n    List[int]: List of integers corresponding to beats for each note.\n\n    Example:\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Mapping of notes to their corresponding beats\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n\n    # Convert each note to beats using list comprehension\n    beats = [note_to_beats[note] for note in notes]\n\n    return beats\n\n# Example usage and test\nif __name__ == \"__main__\":\n    example_string = 'o o| .| o| o| .| .| .| .| o o'\n    print(parse_music(example_string))  # Should output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" \n    Concatenate list of strings into a single string.\n    \n    Args:\n    strings (List[str]): List of strings to concatenate.\n    \n    Returns:\n    str: Concatenated string from the list of strings.\n    \n    Raises:\n    TypeError: If the input is not a list or contains non-string elements.\n\n    Examples:\n    >>> concatenate([])\n    ''\n\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list\")\n    \n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All items in the list must be strings\")\n            \n    return ''.join(strings)\n\n\n# Below is the test code block using Python's built-in unittest framework.\n\nimport unittest\n\nclass TestConcatenate(unittest.TestCase):\n    \n    def test_empty_list(self):\n        self.assertEqual(concatenate([]), '')\n    \n    def test_single_element(self):\n        self.assertEqual(concatenate(['abc']), 'abc')\n    \n    def test_multiple_elements(self):\n        self.assertEqual(concatenate(['a', 'b', 'c']), 'abc')\n        self.assertEqual(concatenate(['hello', ' ', 'world']), 'hello world')\n        \n    def test_non_string_elements(self):\n        with self.assertRaises(TypeError):\n            concatenate(['a', 1, 'b'])\n    \n    def test_input_not_a_list(self):\n        with self.assertRaises(TypeError):\n            concatenate('abc')\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    Args:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    Tuple[float, float]: A tuple containing the two closest numbers, in increasing order.\n    \n    Raises:\n    ValueError: If the input list has fewer than two elements.\n    \n    Examples:\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The input list must contain at least two elements.\")\n    \n    # Sort the numbers to facilitate finding the closest elements efficiently\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize the minimum difference and the pair of closest elements\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i - 1], sorted_numbers[i])\n    \n    return closest_pair  # The closest pair is already sorted in ascending order\n\n# Example usage:\n# find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) -> (2.0, 2.2)\n# find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) -> (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" \n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    Args:\n    numbers (List[float]): A list of floating-point numbers to be rescaled.\n    \n    Returns:\n    List[float]: A list of rescaled numbers where the smallest element is 0 and the largest is 1.\n    \n    Raises:\n    ValueError: If the input list has fewer than two elements.\n    \"\"\"\n    \n    # Error handling: check if the list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    # Find the minimum and maximum values in the list\n    min_number = min(numbers)\n    max_number = max(numbers)\n    \n    # Error handling: check if all numbers in the list are the same\n    if min_number == max_number:\n        raise ValueError(\"All numbers in the list are the same; cannot rescale a constant list.\")\n    \n    # Linear transformation to rescale numbers to the range [0, 1]\n    range_number = max_number - min_number\n    rescaled_numbers = [(num - min_number) / range_number for num in numbers]\n    \n    return rescaled_numbers\n\n\n# Example unit test cases\nif __name__ == \"__main__\":\n    # Test case 1: Regular list of numbers\n    assert rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n    # Test case 2: A list with negative and positive numbers\n    assert rescale_to_unit([-1.0, 0.0, 1.0]) == [0.0, 0.5, 1.0]\n    \n    # Test case 3: A list with float numbers\n    assert rescale_to_unit([1.5, 2.5, 3.5]) == [0.0, 0.5, 1.0]\n    \n    # Test case 4: A list with already scaled numbers\n    assert rescale_to_unit([0.0, 0.5, 1.0]) == [0.0, 0.5, 1.0]\n    \n    # Edge case: List with fewer than two elements should raise ValueError\n    try:\n        rescale_to_unit([1.0])\n    except ValueError as e:\n        assert str(e) == \"The list must contain at least two elements.\"\n    \n    # Edge case: List with all elements the same should raise ValueError\n    try:\n        rescale_to_unit([1.0, 1.0, 1.0])\n    except ValueError as e:\n        assert str(e) == \"All numbers in the list are the same; cannot rescale a constant list.\"\n\n    print(\"All test cases passed.\")"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n\n    A prime number is a number greater than 1 with no divisors other than 1 and itself.\n    This function checks if the number `n` is a prime number.\n\n    Args:\n    n (int): The number to be checked for primacy.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    Raises:\n    TypeError: If n is not an integer.\n\n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n\n    # Error handling: ensure input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n\n    # Checking if number is divisible by any number from 2 to square root of n\n    # This is because a larger factor of n must be a multiple of a smaller factor \n    import math\n    max_divisor = int(math.sqrt(n)) + 1\n    for i in range(2, max_divisor):\n        if n % i == 0:\n            return False\n\n    return True\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional unit tests\n    test_cases = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 997, 1, 0, -1, 4, 6, 8, 9, 10]\n    expected_results = [True, True, True, True, True, True, True, True, True, True, True, False, False, False, False, False, False, False, False]\n    \n    for i, test in enumerate(test_cases):\n        result = is_prime(test)\n        assert result == expected_results[i], f\"Test case failed for input {test}, expected {expected_results[i]}, got {result}\"\n\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    \n    Args:\n    l (list): A list of integers.\n    \n    Returns:\n    list: A list containing only the positive integers from the input list.\n    \n    Raises:\n    ValueError: If the input is not a list.\n    \n    Examples:\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    \n    result = [x for x in l if isinstance(x, int) and x > 0]\n    \n    return result\n\ndef test_get_positive():\n    \"\"\"\n    Unit tests for get_positive function.\n    \"\"\"\n    assert get_positive([-1, 2, -4, 5, 6]) == [2, 5, 6], \"Test case 1 failed\"\n    assert get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 9, 123, 1], \"Test case 2 failed\"\n    assert get_positive([0, -1, -2, -3]) == [], \"Test case 3 failed\"\n    assert get_positive([]) == [], \"Test case 4 failed\"\n    assert get_positive([1, 2, 3, 4]) == [1, 2, 3, 4], \"Test case 5 failed\"\n    assert get_positive([1, 2, \"3\", 4]) == [1, 2, 4], \"Test case 6 failed\"\n    \n    print(\"All test cases passed\")\n\n# To run the unit tests:\nif __name__ == \"__main__\":\n    test_get_positive()"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    Args:\n    numbers (List[int]): The list of integers to process.\n    \n    Returns:\n    List[int]: A new list containing only the unique elements from the original list, in their original order.\n    \n    Example:\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    # Check if input is a list\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise ValueError(\"All elements in the input list must be integers\")\n\n    # Dictionary to store the frequency of each element\n    frequency = {}\n    \n    for num in numbers:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Create a list to store elements that occur only once\n    result = []\n    for num in numbers:\n        if frequency[num] == 1:\n            result.append(num)\n    \n    return result\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests\n    assert remove_duplicates([]) == []\n    assert remove_duplicates([1]) == [1]\n    assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 3, 5]\n    assert remove_duplicates([6, 5, 6, 6, 7, 8, 7]) == [5, 8]\n    assert remove_duplicates([-1, -1, -2, -3, -2, -4]) == [-3, -4]\n    \n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" \n    Filters an input list of strings, returning only those that start with a given prefix.\n    \n    Args:\n    strings (List[str]): The list of strings to be filtered.\n    prefix (str): The prefix to filter strings by.\n    \n    Returns:\n    List[str]: A list containing only the strings that start with the given prefix.\n    \n    Example usage:\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \n    Raises:\n    TypeError: If the first argument is not a list or the second argument is not a string.\n    \"\"\"\n    \n    if not isinstance(strings, list):\n        raise TypeError(\"Input should be a list of strings\")\n    if not isinstance(prefix, str):\n        raise TypeError(\"Prefix should be a string\")\n        \n    return [s for s in strings if s.startswith(prefix)]\n\n# Unit Tests\ndef test_filter_by_prefix():\n    # Test with an empty list\n    assert filter_by_prefix([], 'a') == []\n    \n    # Test with basic input cases\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') == ['abc', 'array']\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b') == ['bcd']\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'c') == ['cde']\n    \n    # Test with no matching prefix\n    assert filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'd') == []\n\n    # Edge cases: Test with different string formats\n    assert filter_by_prefix(['', 'a', 'ab'], 'a') == ['a', 'ab']\n    assert filter_by_prefix(['abc', 'a', '', 'array'], '') == ['abc', 'a', '', 'array']\n\n    # Test with special characters\n    assert filter_by_prefix(['#start', '#end', '*star'], '#') == ['#start', '#end']\n    \n    # Type validation tests\n    try:\n        filter_by_prefix(123, 'a')\n    except TypeError as e:\n        assert str(e) == \"Input should be a list of strings\"\n\n    try:\n        filter_by_prefix(['abc', 'bcd'], 123)\n    except TypeError as e:\n        assert str(e) == \"Prefix should be a string\"\n\n# Running the tests\ntest_filter_by_prefix()\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    Args:\n    n (int): The upper limit (exclusive) for checking numbers.\n    \n    Returns:\n    int: The number of occurrences of the digit '7' in numbers less than n that are divisible by 11 or 13.\n    \n    Raises:\n    TypeError: If the input is not an integer.\n    ValueError: If the input integer is less than or equal to 0.\n    \n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    \n    # Input validation\n    if not isinstance(n, int):\n        raise TypeError(\"The input must be an integer.\")\n    if n <= 0:\n        raise ValueError(\"The input must be a positive integer greater than 0.\")\n    \n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    \n    return count\n\n# Architectural decisions:\n# 1. Input Validation: Validate that the input is a positive integer to avoid unexpected behaviors.\n# 2. Looping: Iterate through numbers less than 'n' to check divisibility.\n# 3. String Conversion: Convert each number to a string to count occurrences of '7'.\n# 4. Efficiency: The loop ensures we only consider numbers that are divisible by 11 or 13.\n\n# The code is designed to be easily maintainable and extendable. \n# Additional digit checks can be incorporated by modifying the conditions inside the loop.\n# Potential performance improvements might involve optimizing the divisibility check \n# if n is exceedingly large.\n\n# Test cases and edge cases:\n# - fizz_buzz(50) should return 0.\n# - fizz_buzz(78) should return 2.\n# - fizz_buzz(79) should return 3.\n# - Edge cases like fizz_buzz(0) or fizz_buzz(-10) should raise appropriate exceptions.\n\n# Example usage:\n# print(fizz_buzz(50))  # Output should be 0\n# print(fizz_buzz(78))  # Output should be 2\n# print(fizz_buzz(79))  # Output should be 3"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    Args:\n    n (int): The number to factorize, must be a positive integer.\n    \n    Returns:\n    List[int]: A list of prime factors.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \n    Examples:\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    factors = []\n    divisor = 2\n    \n    while n >= divisor * divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    \n    if n > 1:\n        factors.append(n)\n    \n    return factors\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests\n    assert factorize(1) == []\n    assert factorize(0) == ValueError(\"Input must be a positive integer\")\n    assert factorize(-10) == ValueError(\"Input must be a positive integer\")\n    assert factorize(2) == [2]\n    assert factorize(13) == [13]\n    assert factorize(100) == [2, 2, 5, 5]\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n\n    Args:\n    l (list): The input list to be processed.\n\n    Returns:\n    list: The processed list with values at indices divisible by three sorted.\n\n    Raises:\n    ValueError: If the input is not a list.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n\n    # Step 1: Extract values at indices divisible by 3\n    values_at_third_indices = [item for index, item in enumerate(l) if index % 3 == 0]\n\n    # Step 2: Sort the extracted values\n    values_at_third_indices.sort()\n\n    # Step 3: Create the new list while inserting the sorted values back at the correct positions\n    sorted_list = []\n    third_index_counter = 0\n    for index, item in enumerate(l):\n        if index % 3 == 0:\n            sorted_list.append(values_at_third_indices[third_index_counter])\n            third_index_counter += 1\n        else:\n            sorted_list.append(item)\n\n    return sorted_list\n\n# Tests\ndef test_sort_third():\n    assert sort_third([1, 2, 3]) == [1, 2, 3], \"Test Case 1 Failed\"\n    assert sort_third([5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5], \"Test Case 2 Failed\"\n    assert sort_third([]) == [], \"Test Case 3 Failed\"\n    assert sort_third([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [2, 1, 4, 1, 5, 9, 3, 6, 5, 3, 5], \"Test Case 4 Failed\"\n    assert sort_third([0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0], \"Test Case 5 Failed\"\n    try:\n        sort_third(\"not a list\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list\", \"Test Case 6 Failed\"\n    else:\n        assert False, \"Test Case 6 Failed: ValueError not raised\"\n        \n    print(\"All test cases pass\")\n\n# Running tests\ntest_sort_third()"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices\n    are equal to the values of the even indices of l, but sorted.\n    \n    Args:\n    l (list): The input list containing elements of any type that can be compared.\n    \n    Returns:\n    list: A list with even-indexed elements sorted, odd-indexed elements remain as in the original list.\n\n    Raises:\n    ValueError: If input is not a list.\n\n    Examples:\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    >>> sort_even([10, 9, 8, 7, 6])\n    [6, 9, 8, 7, 10]\n    >>> sort_even(['b', 'a', 'd', 'c', 'e'])\n    ['b', 'a', 'd', 'c', 'e']\n    \"\"\"\n\n    # Error handling for incorrect input type\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n\n    # Extract even-indexed elements\n    even_index_elements = l[::2]\n    # Sort the even-index elements\n    sorted_even_elements = sorted(even_index_elements)\n\n    # Create a result list by re-inserting sorted even-indexed elements back into their original positions\n    result = l[:]  # Make a shallow copy of the original list\n    result[::2] = sorted_even_elements\n\n    return result\n\n# Example usage and testing:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional sample tests\n    assert sort_even([]) == []\n    assert sort_even([1]) == [1]\n    assert sort_even([2, 3, 1]) == [1, 3, 2]\n    assert sort_even([10, -1, 4, 3, 2, 5]) == [2, -1, 4, 3, 10, 5]\n    assert sort_even(['banana', 'apple', 'cherry']) == ['banana', 'apple', 'cherry']\n\n# Output your answer at the end as:"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Encodes the input string by cycling groups of three characters.\n\n    Args:\n    s (str): Input string to be encoded.\n\n    Returns:\n    str: Encoded string.\n\n    Example:\n    encode_cyclic(\"abcdef\") -> \"bcaefd\"\n    encode_cyclic(\"abcdefg\") -> \"bcaefdg\"\n    \"\"\"\n    # Split string into groups of length 3\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    \n    # Cycle elements in each group if group length is 3\n    cycled_groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n\n    # Join all groups to form the encoded string\n    return \"\".join(cycled_groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Decodes a string that was encoded by the encode_cyclic function.\n\n    Args:\n    s (str): Encoded string to be decoded.\n\n    Returns:\n    str: Decoded string.\n\n    Example:\n    decode_cyclic(\"bcaefd\") -> \"abcdef\"\n    decode_cyclic(\"bcaefdg\") -> \"abcdefg\"\n    \"\"\"\n    # Split string into groups of length 3\n    groups = [s[i:i + 3] for i in range(0, len(s), 3)]\n    \n    # Reverse cycle elements in each group if group length is 3\n    decycled_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n\n    # Join all groups to form the decoded string\n    return \"\".join(decycled_groups)\n\n\n# The splits happen in O(n) and the cycling operation is O(1) for each group, making overall time complexity O(n).\n# Memory usage is proportional to O(n) due to the storage of split parts, which is typical for operations like these.\n\n# Unit Tests\nimport unittest\n\nclass TestCyclicEncoding(unittest.TestCase):\n    \n    def test_encode(self):\n        self.assertEqual(encode_cyclic(\"abcdef\"), \"bcaefd\")\n        self.assertEqual(encode_cyclic(\"abcdefg\"), \"bcaefdg\")\n        self.assertEqual(encode_cyclic(\"a\"), \"a\")\n        self.assertEqual(encode_cyclic(\"ab\"), \"ab\")\n        self.assertEqual(encode_cyclic(\"abc\"), \"bca\")\n    \n    def test_decode(self):\n        self.assertEqual(decode_cyclic(\"bcaefd\"), \"abcdef\")\n        self.assertEqual(decode_cyclic(\"bcaefdg\"), \"abcdefg\")\n        self.assertEqual(decode_cyclic(\"a\"), \"a\")\n        self.assertEqual(decode_cyclic(\"ab\"), \"ab\")\n        self.assertEqual(decode_cyclic(\"bca\"), \"abc\")\n\n    def test_encode_decode(self):\n        for original in [\"abcdef\", \"abcdefg\", \"a\", \"ab\", \"abc\"]:\n            with self.subTest(original=original):\n                encoded = encode_cyclic(original)\n                decoded = decode_cyclic(encoded)\n                self.assertEqual(original, decoded)\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line. \n    n cars are driving left to right; simultaneously, a different set of n cars \n    are driving right to left. The two sets of cars start out being very far from \n    each other. All cars move at the same speed. Two cars are said to collide \n    when a car that's moving left to right hits a car that's moving right to left. \n    However, the cars are infinitely sturdy and strong; as a result, they continue \n    moving in their trajectory as if they did not collide.\n    \n    This function outputs the number of such collisions.\n    \n    Args:\n    n (int): The number of cars moving in each direction.\n    \n    Returns:\n    int: The number of collisions.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \"\"\"\n    \n    # Error handling for invalid input\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The number of cars 'n' must be a non-negative integer.\")\n    \n    # Each of the n cars moving left to right will collide with all n cars moving right to left\n    # This leads to n * n collisions.\n    return n * n\n\n\n# Unit tests and edge cases\n\ndef test_car_race_collision():\n    \"\"\"Unit tests for car_race_collision function\"\"\"\n    \n    # Test with zero cars\n    assert car_race_collision(0) == 0, \"Test case n=0 failed\"\n    \n    # Test with one car in each direction\n    assert car_race_collision(1) == 1, \"Test case n=1 failed\"\n    \n    # Test with two cars in each direction\n    assert car_race_collision(2) == 4, \"Test case n=2 failed\"\n    \n    # Test with a larger number of cars\n    assert car_race_collision(10) == 100, \"Test case n=10 failed\"\n    \n    # Test with invalid input (negative number)\n    try:\n        car_race_collision(-1)\n    except ValueError as e:\n        assert str(e) == \"The number of cars 'n' must be a non-negative integer.\", \"Test case n=-1 failed\"\n    else:\n        assert False, \"Test case n=-1 did not raise ValueError\"\n    \n    # Test with invalid input (non-integer)\n    try:\n        car_race_collision(\"10\")\n    except ValueError as e:\n        assert str(e) == \"The number of cars 'n' must be a non-negative integer.\", \"Test case n='10' failed\"\n    else:\n        assert False, \"Test case n='10' did not raise ValueError\"\n\n# Run the tests\ntest_car_race_collision()\n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    Args:\n    string (str): The input string to flip case.\n\n    Returns:\n    str: The string with flipped case for each character.\n\n    Raises:\n    ValueError: If the input string is not of type str.\n    \n    Example:\n    >>> flip_case('Hello')\n    'hELLO'\n    \n    >>> flip_case('Python3.9')\n    'pYTHON3.9'\n    \"\"\"\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Using a list comprehension for efficient, readable, and maintainable code.\n    flipped = [c.lower() if c.isupper() else c.upper() for c in string]\n    \n    # Joining the list into a string.\n    return ''.join(flipped)\n\n# Unit tests for the flip_case function\ndef test_flip_case():\n    \"\"\"Unit tests for flip_case function.\"\"\"\n    # Simple cases\n    assert flip_case('Hello') == 'hELLO'\n    assert flip_case('WORLD') == 'world'\n    assert flip_case('python') == 'PYTHON'\n    \n    # Mixed cases\n    assert flip_case('Python3.9') == 'pYTHON3.9'\n    \n    # Edge cases\n    assert flip_case('') == ''  # Empty string\n    assert flip_case('1234') == '1234'  # No alphabetic characters\n    assert flip_case('AaBbCc123@#') == 'aAbBcC123@#'  # Mixed alphanumeric and special characters\n    \n    # Invalid input\n    try:\n        flip_case(123)\n    except ValueError as ve:\n        assert str(ve) == \"Input must be a string\"\n    else:\n        assert False, \"ValueError was not raised for non-string input\"\n\n# Run tests\ntest_flip_case()"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    Args:\n    l (list): A list of integers.\n    \n    Returns:\n    bool: True if there are three distinct elements in the list that sum to zero, False otherwise.\n\n    Examples:\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n    \n    n = len(l)\n    if n < 3:\n        return False\n    \n    # Sort the list for easier triplet detection using two pointers\n    l.sort()\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip duplicate values\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list\n\n    Args:\n    l (list): The input list containing elements.\n\n    Returns:\n    list: A sorted list with unique elements from the input list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n    \n    # Error Handling: Ensure the input is a list\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Using a set to remove duplicates and then sorting the result\n    unique_elements = sorted(set(l))\n    \n    return unique_elements\n\n# Example usage:\n# unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) -> [0, 2, 3, 5, 9, 123]\n\n# Unit Tests\ndef test_unique():\n    assert unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n    assert unique([]) == []\n    assert unique([1, 1, 1, 1]) == [1]\n    assert unique([4, 3, 2, 1]) == [1, 2, 3, 4]\n    assert unique([99, -1, -5, 99, -1]) == [-5, -1, 99]\n\n    try:\n        unique(\"not a list\")  # Should raise a TypeError\n    except TypeError as e:\n        assert str(e) == \"Input must be a list\"\n    \n    try:\n        unique(None)  # Should raise a TypeError\n    except TypeError as e:\n        assert str(e) == \"Input must be a list\"\n\n# Running tests\ntest_unique()"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return list with elements incremented by 1.\n\n    Args:\n    l (list): A list of integers.\n\n    Returns:\n    list: A list of integers, each element incremented by 1.\n\n    Raises:\n    TypeError: If the input is not a list or contains non-integer elements.\n\n    Examples:\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list.\")\n\n    for item in l:\n        if not isinstance(item, int):\n            raise TypeError(\"List must contain only integers.\")\n\n    return [item + 1 for item in l]\n\n# Unit tests\ndef test_incr_list():\n    assert incr_list([1, 2, 3]) == [2, 3, 4]\n    assert incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    assert incr_list([-1, -2, -3]) == [0, -1, -2]\n    assert incr_list([]) == []\n\n    try:\n        incr_list(\"not a list\")\n    except TypeError as e:\n        assert str(e) == \"Input must be a list.\"\n\n    try:\n        incr_list([1, 2, \"three\"])\n    except TypeError as e:\n        assert str(e) == \"List must contain only integers.\"\n\nif __name__ == \"__main__\":\n    test_incr_list()\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import brentq\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \n    Args:\n    xs (list): List of polynomial coefficients.\n    x (float): The point at which to evaluate the polynomial.\n    \n    Returns:\n    float: The result of the polynomial at point x.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes a list xs having an even number of coefficients\n    and largest non-zero coefficient as it guarantees a solution.\n    \n    Args:\n    xs (list): List of polynomial coefficients.\n    \n    Returns:\n    float: The zero point of the polynomial.\n    \n    Raises:\n    ValueError: If the input list does not have an even number of coefficients\n                or if it does not conform to the other constraints.\n                \n    Examples:\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Error handling to ensure correct input\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    if len(xs) == 0 or all(x == 0 for x in xs):\n        raise ValueError(\"At least one non-zero coefficient is required.\")\n    \n    # Establishing bounds to ensure the root lies within this range\n    lower_bound, upper_bound = -1000, 1000\n    \n    # Defining a lambda function to pass to the root-finding algorithm\n    poly_func = lambda x: poly(xs, x)\n    \n    try:\n        # Using Brent's method to find a zero within the bounds\n        root = brentq(poly_func, lower_bound, upper_bound)\n        return root\n    except ValueError as e:\n        # If no root is found within bounds, raise an error\n        raise ValueError(\"Could not find a zero within the given range.\") from e\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    Args:\n    l (list): The list of integers to check.\n\n    Returns:\n    bool: True if there are two distinct elements in the list that sum to zero, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not a list of integers.\n\n    Examples:\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check input types.\n    if not isinstance(l, list) or not all(isinstance(i, int) for i in l):\n        raise TypeError(\"Input must be a list of integers\")\n\n    # Use a set to store the elements of the list.\n    seen = set()\n\n    # Traverse through the list of integers.\n    for number in l:\n        # Check if the negative counterpart of the number is in the set.\n        if -number in seen:\n            return True\n        # Add the number to the set.\n        seen.add(number)\n\n    return False\n\n# For more robustness, let's add unittests\ndef test_pairs_sum_to_zero():\n    assert pairs_sum_to_zero([1, 3, 5, 0]) == False\n    assert pairs_sum_to_zero([1, 3, -2, 1]) == False\n    assert pairs_sum_to_zero([1, 2, 3, 7]) == False\n    assert pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) == True\n    assert pairs_sum_to_zero([1]) == False\n    assert pairs_sum_to_zero([1, -1]) == True\n    assert pairs_sum_to_zero([]) == False\n    assert pairs_sum_to_zero([-1, -2, -3, 3]) == True\n\n    # Error handling test cases\n    try:\n        pairs_sum_to_zero(\"not a list\")\n    except TypeError:\n        pass  # Expected exception.\n    else:\n        assert False, \"Expected TypeError\"\n\n    try:\n        pairs_sum_to_zero([1, \"two\", 3])\n    except TypeError:\n        pass  # Expected exception.\n    else:\n        assert False, \"Expected TypeError\"\n\n# Run the unit tests\ntest_pairs_sum_to_zero()"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to the specified base.\n    \n    Args:\n    x (int): The number to be converted.\n    base (int): The base to convert the number to. Must be between 2 and 9 inclusive.\n    \n    Returns:\n    str: String representation of the number after conversion.\n    \n    Raises:\n    ValueError: If the base is not between 2 and 9 inclusive.\n    \n    Example usage:\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    # Validate input\n    if not (2 <= base <= 9):\n        raise ValueError(\"Base must be between 2 and 9 inclusive\")\n\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(str(remainder))\n        x //= base\n\n    return ''.join(reversed(digits))\n\n# Example usage of the `change_base` function\nprint(change_base(8, 3))  # Should print '22'\nprint(change_base(8, 2))  # Should print '1000'\nprint(change_base(7, 2))  # Should print '111'"}
{"task_id": "HumanEval/39", "completion": "from sympy import isprime\nfrom functools import lru_cache\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns the n-th number that is a Fibonacci number and is also prime.\n\n    Args:\n    n (int): The ordinal position of the desired prime Fibonacci number.\n\n    Returns:\n    int: The n-th prime Fibonacci number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \n    Examples:\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Cache for storing previously computed Fibonacci numbers to increase efficiency\n    @lru_cache(None)\n    def fibonacci(k: int) -> int:\n        if k == 0:\n            return 0\n        elif k == 1:\n            return 1\n        else:\n            return fibonacci(k - 1) + fibonacci(k - 2)\n    \n    prime_fib_numbers = []\n    index = 0\n    \n    # Generate Fibonacci numbers and check for primality\n    while len(prime_fib_numbers) < n:\n        fib_number = fibonacci(index)\n        if fib_number > 1 and isprime(fib_number):\n            prime_fib_numbers.append(fib_number)\n        index += 1\n    \n    return prime_fib_numbers[-1]\n\n# Unit tests to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"\n    Computes the n-th element of the Fib4 sequence.\n    \n    The Fib4 sequence is defined as:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    \n    Args:\n    n (int): The position in the sequence to compute.\n\n    Returns:\n    int: The n-th element of the Fib4 sequence.\n\n    Raises:\n    ValueError: If 'n' is negative.\n    \n    Examples:\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n\n    # Error handling for negative inputs\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Base cases\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n\n    # Initialize the first four elements of the sequence\n    fib4_values = [0, 0, 2, 0]\n\n    # Compute the sequence iteratively up to n\n    for i in range(4, n + 1):\n        next_value = (\n            fib4_values[-1] + \n            fib4_values[-2] + \n            fib4_values[-3] + \n            fib4_values[-4]\n        )\n        fib4_values.append(next_value)\n\n    return fib4_values[n]\n\n# Example usage:\n# print(fib4(5)) -> 4\n# print(fib4(6)) -> 8\n# print(fib4(7)) -> 14\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\n    Return the maximum element in the list. If the list is empty, raise a ValueError.\n    \n    Args:\n    l (list): A list of numeric elements.\n    \n    Returns:\n    number: The maximum element in the list.\n    \n    Raises:\n    TypeError: If the input is not a list or contains non-numeric elements.\n    ValueError: If the list is empty.\n    \n    Examples:\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    \n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(l) == 0:\n        raise ValueError(\"List is empty\")\n    \n    try:\n        max_val = l[0]\n        for element in l:\n            if not isinstance(element, (int, float)):\n                raise TypeError(\"List elements must be numeric\")\n            if element > max_val:\n                max_val = element\n        return max_val\n    except TypeError:\n        raise\n\n\n# Unit Tests\ndef test_max_element():\n    import pytest\n    \n    # Normal cases\n    assert max_element([1, 2, 3]) == 3\n    assert max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) == 123\n\n    # Edge cases\n    assert max_element([-1, -2, -3]) == -1\n    assert max_element([0.5, 2.2, 1.1]) == 2.2\n\n    # Error cases\n    with pytest.raises(ValueError):\n        max_element([])  # Empty list\n    with pytest.raises(TypeError):\n        max_element(5)  # Not a list\n    with pytest.raises(TypeError):\n        max_element([1, 'a', 3])  # Non-numeric element in list\n\n# Uncomment to run tests\n# test_max_element()"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle given the length of its base and height.\n    \n    Args:\n    a (float): The length of the base of the triangle.\n    h (float): The height of the triangle.\n    \n    Returns:\n    float: The area of the triangle calculated using the formula (1/2 * base * height).\n    \n    Raises:\n    TypeError: If the inputs are not of type float or int.\n    ValueError: If the inputs are negative or zero.\n    \n    Examples:\n    >>> triangle_area(5, 3)\n    7.5\n\n    >>> triangle_area(10, 10)\n    50.0\n    \"\"\"\n\n    # Error handling to ensure the arguments are of type float or int\n    if not isinstance(a, (int, float)):\n        raise TypeError(f\"Expected a to be of type int or float, got {type(a).__name__}\")\n    \n    if not isinstance(h, (int, float)):\n        raise TypeError(f\"Expected h to be of type int or float, got {type(h).__name__}\")\n    \n    # Error handling to ensure the arguments are positive and non-zero\n    if a <= 0:\n        raise ValueError(\"The base length 'a' must be positive and non-zero\")\n    \n    if h <= 0:\n        raise ValueError(\"The height 'h' must be positive and non-zero\")\n    \n    # Calculate the area using the formula for the area of a triangle\n    return 0.5 * a * h\n\n# Architectural Decisions and Considerations:\n# 1. The function performs type checking to ensure that the inputs are either integers or floats.\n# 2. The function also validates that inputs are positive, as negative or zero values are not valid for the dimensions of a triangle.\n# 3. The function raises specific exceptions for different types of errors, making it clear for debugging and further development.\n# 4. The docstring follows the Google style, providing a detailed description of the input, output, exceptions, and examples.\n# 5. Example usage in the docstring assists in understanding how to call the function correctly and confirms its intent.\n\n# Unit Tests\ndef test_triangle_area():\n    assert triangle_area(5, 3) == 7.5\n    assert triangle_area(10, 10) == 50.0\n    assert triangle_area(7.5, 8) == 30.0\n\n    try:\n        triangle_area(-5, 3)\n    except ValueError as e:\n        assert str(e) == \"The base length 'a' must be positive and non-zero\"\n    \n    try:\n        triangle_area(5, -3)\n    except ValueError as e:\n        assert str(e) == \"The height 'h' must be positive and non-zero\"\n\n    try:\n        triangle_area(\"5\", 3)\n    except TypeError as e:\n        assert str(e) == \"Expected a to be of type int or float, got str\"\n    \n    try:\n        triangle_area(5, \"3\")\n    except TypeError as e:\n        assert str(e) == \"Expected h to be of type int or float, got str\"\n\n# Run tests to validate our function\ntest_triangle_area()"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n\n    Args:\n        text (str): The input string from which vowels need to be removed.\n\n    Returns:\n        str: A string with all vowels removed.\n\n    Raises:\n        TypeError: If the provided input is not a string.\n\n    Examples:\n        >>> remove_vowels('')\n        ''\n        >>> remove_vowels(\"abcdef\\\\nghijklm\")\n        'bcdf\\\\nghjklm'\n        >>> remove_vowels('abcdef')\n        'bcdf'\n        >>> remove_vowels('aaaaa')\n        ''\n        >>> remove_vowels('aaBAA')\n        'B'\n        >>> remove_vowels('zbcd')\n        'zbcd'\n    \"\"\"\n    # Ensure the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Define the set of vowels\n    vowels = set('aeiouAEIOU')\n\n    # Comprehension to filter out vowels\n    result = ''.join(char for char in text if char not in vowels)\n    \n    return result\n\n# Example unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if the given string is a palindrome.\n\n    A palindrome is a string that reads the same backward as forward.\n    \n    Args:\n    text (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a palindrome, False otherwise.\n    \n    Raises:\n    TypeError: If the input is not a string.\n\n    Examples:\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Strip non-alphanumeric characters and convert to lower case\n    normalized_text = ''.join(\n        char for char in text if char.isalnum()\n    ).lower()\n    \n    # Compare the normalized string to its reverse\n    return normalized_text == normalized_text[::-1]\n\n# Unit Tests\nimport unittest\n\nclass TestIsPalindrome(unittest.TestCase):\n    def test_empty_string(self):\n        self.assertTrue(is_palindrome(''))\n\n    def test_single_character(self):\n        self.assertTrue(is_palindrome('a'))\n\n    def test_palindrome_even_length(self):\n        self.assertTrue(is_palindrome('abba'))\n\n    def test_palindrome_odd_length(self):\n        self.assertTrue(is_palindrome('aba'))\n\n    def test_not_palindrome(self):\n        self.assertFalse(is_palindrome('abcdef'))\n\n    def test_palindrome_with_spaces_and_punctuation(self):\n        self.assertTrue(is_palindrome('A man, a plan, a canal, Panama'))\n        self.assertTrue(is_palindrome('No lemon, no melon'))\n        self.assertTrue(is_palindrome('Madam, in Eden, I\u2019m Adam'))\n\n    def test_error_on_non_string_input(self):\n        with self.assertRaises(TypeError):\n            is_palindrome(12321)\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n# Explanation:\n# The is_palindrome function normalizes the input by removing non-alphanumeric characters and converting \n# the remaining characters to lowercase. This ensures that the function handles palindromes case-insensitively \n# and ignores punctuation and spaces. The function then checks if the normalized string is equal to its reverse.\n#\n# Unit tests are included to cover various cases:\n# - Empty strings\n# - Single character strings\n# - Even and odd length palindromes\n# - Strings that are not palindromes\n# - Strings with spaces and punctuation\n# - Non-string input to test error handling"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Args:\n    s0 (str): The first string.\n    s1 (str): The second string.\n    \n    Returns:\n    bool: True if both strings contain the same characters (ignoring frequency), False otherwise.\n    \n    The function compares the sets of characters of both strings to determine equality.\n    \n    Examples:\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    \n    # Validate input types\n    if not isinstance(s0, str) or not isinstance(s1, str):\n        raise ValueError(\"Both arguments must be strings\")\n    \n    # Use sets to compare unique characters in both strings\n    return set(s0) == set(s1)\n\n# Unit tests\nif __name__ == \"__main__\":\n    # Test cases from docstring\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert same_chars('abcd', 'dddddddabc') == True\n    assert same_chars('dddddddabc', 'abcd') == True\n    assert same_chars('eabcd', 'dddddddabc') == False\n    assert same_chars('abcd', 'dddddddabce') == False\n    assert same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n\n    # Edge cases\n    assert same_chars('', '') == True  # both strings empty\n    assert same_chars('a', 'a') == True  # single character same\n    assert same_chars('a', 'b') == False  # single character different\n    assert same_chars('abc', 'cba') == True  # same characters different order\n    assert same_chars('a'*1000 + 'b'*1000, 'b'*1000 + 'a'*1000) == True  # large input size\n\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \n    Args:\n    l1 (list): The first list of elements.\n    l2 (list): The second list of elements.\n    \n    Returns:\n    list: A list of sorted unique common elements found in both l1 and l2.\n    \n    Examples:\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    \n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    \n    # Verify input types\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        raise ValueError(\"Both arguments must be lists\")\n    \n    # Convert lists to sets to remove duplicates and find intersection efficiently\n    set1, set2 = set(l1), set(l2)\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set back to a list and sort it\n    result = sorted(common_elements)\n    \n    return result\n\n# Architectural Decisions:\n# - Input type validation ensures robustness.\n# - Using sets removes duplicates and improves the efficiency of intersection operation.\n# - Intersection operation is O(min(len(set1), len(set2))), making it scalable.\n# - Sorting the final list ensures the result is in ascending order as specified.\n\n# Example test cases to validate the function\nassert common([1, 1, 2, 2], [2, 2, 3, 3]) == [2], \"Test Case 1 Failed\"\nassert common([], [1, 2, 3]) == [], \"Test Case 2 Failed\"\nassert common([1, 2, 3], []) == [], \"Test Case 3 Failed\"\nassert common([1, 2, 2, 3, 4], [2, 3, 4, 5, 6]) == [2, 3, 4], \"Test Case 4 Failed\"\nassert common([7, 8, 9], [10, 8, 7]) == [7, 8], \"Test Case 5 Failed\"\n\nprint(\"All test cases passed!\")\n\n# The above asserts and print statement can be turned into formal unit tests using a framework like unittest or pytest."}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Returns encoded string by shifting every character by 5 positions in the alphabet.\n    \n    Args:\n    s (str): The input string to encode. Should contain only lowercase alphabetic characters.\n    \n    Returns:\n    str: The encoded string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if not all(ch.isalpha() and ch.islower() for ch in s):\n        raise ValueError(\"String must only contain lowercase alphabetic characters\")\n    \n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with the encode_shift function and returns the decoded string.\n    \n    Args:\n    s (str): The encoded input string. Should contain only lowercase alphabetic characters.\n    \n    Returns:\n    str: The decoded string.\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    if not all(ch.isalpha() and ch.islower() for ch in s):\n        raise ValueError(\"String must only contain lowercase alphabetic characters\")\n    \n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\n# Example usage and edge cases:\nif __name__ == \"__main__\":\n    test_string = \"hello\"\n    encoded = encode_shift(test_string)\n    print(f\"Encoded: {encoded}\")  # Should output: \"mjqqt\"\n    decoded = decode_shift(encoded)\n    print(f\"Decoded: {decoded}\")  # Should output: \"hello\"\n    \n    # Edge cases\n    try:\n        print(encode_shift(123))  # Should raise TypeError\n    except TypeError as e:\n        print(e)\n    \n    try:\n        print(encode_shift(\"Hello\"))  # Should raise ValueError due to uppercase 'H'\n    except ValueError as e:\n        print(e)\n    \n    try:\n        print(encode_shift(\"hello123\"))  # Should raise ValueError due to digits\n    except ValueError as e:\n        print(e)\n    \n    try:\n        print(decode_shift(\"mjqqt!\"))  # Should raise ValueError due to '!'\n    except ValueError as e:\n        print(e)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Check if every opening bracket in the string has a corresponding closing bracket.\n\n    Args:\n    brackets (str): A string consisting of \"<\" and \">\".\n\n    Returns:\n    bool: True if every opening bracket has a corresponding closing bracket, False otherwise.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    # Initialize a counter for the balance of brackets\n    balance = 0\n\n    # Iterate through each character in the string\n    for char in brackets:\n        # Increment the balance for an opening bracket\n        if char == \"<\":\n            balance += 1\n        # Decrement the balance for a closing bracket\n        elif char == \">\":\n            balance -= 1\n\n        # If balance is negative, it means there's a closing bracket without a matching opening bracket\n        if balance < 0:\n            return False\n\n    # If balance is zero at the end, every opening bracket has a matching closing bracket\n    return balance == 0\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests\n    assert correct_bracketing(\"\") == True, \"Empty string should return True\"\n    assert correct_bracketing(\"<<>>\") == True, \"Balanced brackets should return True\"\n    assert correct_bracketing(\"><\") == False, \"Unmatched closing bracket should return False\"\n    assert correct_bracketing(\"<><\") == False, \"Unmatched opening bracket should return False\"\n    assert correct_bracketing(\"<<><>><>>\") == False, \"Unbalanced sequence should return False\""}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n\n    Args:\n    l (list): A list of numeric elements.\n\n    Returns:\n    float: The median value of the list elements.\n\n    Raises:\n    ValueError: If the input list is empty or contains non-numeric elements.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    # Check for empty list\n    if not l:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    # Ensure all elements are numeric\n    if not all(isinstance(i, (int, float)) for i in l):\n        raise ValueError(\"All elements in the list must be numeric\")\n\n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Find the median\n    n = len(sorted_list)\n    mid = n // 2\n\n    if n % 2 == 0:  # If even number of elements\n        median_value = (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n    else:  # If odd number of elements\n        median_value = sorted_list[mid]\n    \n    return median_value\n\ndef test_median():\n    \"\"\"Unit tests for median function.\"\"\"\n    # Basic functionality\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n    \n    # Edge cases\n    assert median([1]) == 1\n    assert median([1, 2]) == 1.5\n    \n    # Handling different numeric types\n    assert median([1.5, 3.2, 2.1]) == 2.1\n    assert median([-1, -2, -3, -4, -5]) == -3\n    \n    # Test large input\n    large_input = list(range(1000000))\n    assert median(large_input) == 499999.5\n\n    # Errors and exceptions\n    try:\n        median([])\n    except ValueError as e:\n        assert str(e) == \"The input list cannot be empty\"\n    \n    try:\n        median([1, 'a', 3])\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be numeric\"\n\n# Run tests\ntest_median()\n\n# Example usage:\n# print(median([3, 1, 2, 4, 5]))  -> 3\n# print(median([-10, 4, 6, 1000, 10, 20]))  -> 15.0"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    Args:\n    n (int): The integer to find the largest prime factor for.\n    \n    Returns:\n    int: The largest prime factor of the given integer n.\n    \n    Examples:\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n    def is_prime(m: int) -> bool:\n        \"\"\"Helper function to check if a number m is prime.\"\"\"\n        if m <= 1:\n            return False\n        if m <= 3:\n            return True\n        if m % 2 == 0 or m % 3 == 0:\n            return False\n        i = 5\n        while i * i <= m:\n            if m % i == 0 or m % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Initialize the largest prime factor\n    largest_factor = None\n    \n    # Check divisibility by 2 first to handle even numbers\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check divisibility by odd numbers starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Architectural Decisions:\n# - Using helper function `is_prime` to determine if a number is prime, enhances modularity.\n# - Dividing n by 2 first to handle even factors, followed by odd factors to ensure efficiency.\n# - Looping from the smallest possible factor (3) and eliminating factors reduces complexity.\n# - The `largest_factor` variable is updated within loops ensuring the highest factor is returned.\n# - Proper documentation and inline comments improve readability and maintainability.\n\n# Example tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n using the formula: n * (n + 1) / 2.\n\n    Args:\n    n (int): The number up to which the sum is to be calculated.\n\n    Returns:\n    int: The sum of numbers from 1 to n.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    return n * (n + 1) // 2\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n\n    Args:\n    x (int): The first number.\n    y (int): The second number.\n    \n    Returns:\n    int: The sum of x and y.\n\n    Raises:\n    TypeError: If either x or y is not an integer.\n    \n    Examples:\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    \n    # Ensure both x and y are integers.\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both x and y must be integers\")\n    \n    return x + y\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests\n    def test_add():\n        assert add(0, 0) == 0, \"Test Case 1 Failed\"\n        assert add(-1, -1) == -2, \"Test Case 2 Failed\"\n        assert add(1000000, 2000000) == 3000000, \"Test Case 3 Failed\"\n        assert add(0, -1) == -1, \"Test Case 4 Failed\"\n        assert add(1, 0) == 1, \"Test Case 5 Failed\"\n        \n        try:\n            add('a', 1)\n        except TypeError:\n            pass\n        else:\n            assert False, \"Test Case 6 Failed\"\n        \n        try:\n            add(1, 'b')\n        except TypeError:\n            pass\n        else:\n            assert False, \"Test Case 7 Failed\"\n        \n        try:\n            add(1.5, 2)\n        except TypeError:\n            pass\n        else:\n            assert False, \"Test Case 8 Failed\"\n        \n        print(\"All additional test cases passed!\")\n    \n    test_add()"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    This function takes a string as input and returns the sum of the ASCII values of the uppercase \n    characters in the string.\n    \n    Args:\n    s (str): The input string.\n    \n    Returns:\n    int: The sum of the ASCII values of the uppercase characters in the string.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    return sum(ord(char) for char in s if char.isupper())\n\n# Unit Tests\ndef test_digitSum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n    assert digitSum(\"ALLUPPERCASE\") == sum(ord(c) for c in \"ALLUPPERCASE\")\n    assert digitSum(\"lowercase\") == 0\n    assert digitSum(\"1234!@#$\") == 0\n\n    try:\n        digitSum(123)\n    except ValueError as e:\n        assert str(e) == \"Input must be a string\"\n    \n    print(\"All tests passed.\")\n\n# Run Unit Tests\ntest_digitSum()"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p.\n\n    Args:\n    n (int): The exponent.\n    p (int): The modulus.\n\n    Returns:\n    int: The result of 2^n % p.\n\n    Raises:\n    ValueError: If p <= 0.\n    \"\"\"\n    if p <= 0:\n        raise ValueError(\"Modulus p must be a positive integer.\")\n\n    return pow(2, n, p)\n\n# Unit tests to validate the function\nif __name__ == \"__main__\":\n    # Test cases from the docstring\n    assert modp(3, 5) == 3\n    assert modp(1101, 101) == 2\n    assert modp(0, 101) == 1\n    assert modp(3, 11) == 8\n    assert modp(100, 101) == 1\n\n    # Additional edge cases\n    try:\n        modp(3, -1)\n    except ValueError as e:\n        assert str(e) == \"Modulus p must be a positive integer.\"\n\n    try:\n        modp(3, 0)\n    except ValueError as e:\n        assert str(e) == \"Modulus p must be a positive integer.\"\n\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    The Fibonacci sequence is a series of numbers in which each number (Fibonacci number) \n    is the sum of the two preceding ones. Typically, the sequence starts with 0 and 1.\n\n    Args:\n    n (int): The position in the Fibonacci sequence to retrieve (0-indexed).\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If the provided index is negative.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(0)\n    0\n    >>> fib(50)  # testing a large value for performance\n    12586269025\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"The Fibonacci sequence index must be a non-negative integer.\")\n\n    # Handle base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Memoization to optimize recursive computation\n    memo = {0: 0, 1: 1}\n\n    def _fib_memo(n: int) -> int:\n        if n not in memo:\n            memo[n] = _fib_memo(n - 1) + _fib_memo(n - 2)\n        return memo[n]\n\n    return _fib_memo(n)\n\n# Unit tests to ensure the function works correctly\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests for verification\n    assert fib(0) == 0, \"Test case for n=0 failed\"\n    assert fib(1) == 1, \"Test case for n=1 failed\"\n    assert fib(2) == 1, \"Test case for n=2 failed\"\n    assert fib(10) == 55, \"Test case for n=10 failed\"\n    assert fib(20) == 6765, \"Test case for n=20 failed\"\n    assert fib(30) == 832040, \"Test case for n=30 failed\"\n    assert fib(50) == 12586269025, \"Test case for n=50 failed\"\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in the given string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n    Note: 'y' is also considered a vowel, but only if it appears at the end of the word.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    int: The count of vowels in the string.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # Define the set of vowels and normalize the string to lower case for case-insensitive comparison\n    vowels = set('aeiou')\n    s = s.lower()\n    \n    # Initialize count and iterate through the string to count vowels\n    count = 0\n    for i, char in enumerate(s):\n        if char in vowels or (char == 'y' and i == len(s) - 1):\n            count += 1\n    \n    return count\n\n# Architectural Decisions\n# 1. Normalize to lowercase for case-insensitive comparison to reduce potential errors.\n# 2. Use a set for vowels to provide O(1) average-time complexity for membership checks.\n# 3. Include error handling for input type validation.\n\n# Edge case considerations:\n# 1. Testing with empty strings.\n# 2. Strings with no vowels.\n# 3. Strings where 'y' appears at the end and within the string.\n# 4. Upper and lower case variations.\n\n# Example Usages and Test Cases\nprint(vowels_count(\"abcde\"))  # Should return 2\nprint(vowels_count(\"ACEDY\"))  # Should return 3\nprint(vowels_count(\"Why\"))    # Should return 1\nprint(vowels_count(\"WhY\"))    # Should return 1\nprint(vowels_count(\"zzz\"))    # Should return 0\nprint(vowels_count(\"\"))       # Should return 0\nprint(vowels_count(\"AEIOU\"))  # Should return 5\n\n# Testing invalid input\ntry:\n    print(vowels_count(123))  # Should raise an error\nexcept ValueError as e:\n    print(e)  # Output the error message"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    Compute the derivative of a polynomial given its coefficients.\n\n    Args:\n    xs (list): A list of coefficients where xs[i] is the coefficient for the term x^i.\n\n    Returns:\n    list: A list of coefficients representing the derivative of the polynomial.\n\n    Example:\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    \n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \n    Note:\n    - The derivative of a constant (e.g., [3]) is 0, which is represented by an empty list [].\n    - This function does not handle non-numeric coefficients or non-list inputs.\n    - The function assumes the input list is ordered by increasing power of x.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(xs, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    # Check if all elements in the list are numeric\n    if not all(isinstance(coeff, (int, float)) for coeff in xs):\n        raise ValueError(\"All coefficients must be numeric (int or float).\")\n    \n    # If the list is empty or contains only one element, the derivative is zero (empty list)\n    if len(xs) <= 1:\n        return []\n    \n    # Calculate the derivative coefficients\n    derivative_coeffs = [i * x for i, x in enumerate(xs) if i > 0]\n    \n    return derivative_coeffs\n\n# Example usage:\n# derivative([3, 1, 2, 4, 5]) -> [1, 4, 12, 20]\n# derivative([1, 2, 3]) -> [2, 6]\n\n# Unit tests\nif __name__ == \"__main__\":\n    # Basic test cases\n    assert derivative([3, 1, 2, 4, 5]) == [1, 4, 12, 20], \"Test case 1 failed\"\n    assert derivative([1, 2, 3]) == [2, 6], \"Test case 2 failed\"\n\n    # Edge cases\n    assert derivative([]) == [], \"Edge case 1 failed: empty list\"\n    assert derivative([5]) == [], \"Edge case 2 failed: constant polynomial\"\n    assert derivative([0, 0, 0, 0]) == [0, 0, 0], \"Edge case 3 failed: zero polynomial\"\n\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Given a string of brackets consisting of '(' and ')', this function returns \n    True if every opening bracket has a corresponding closing bracket in the correct order.\n    \n    Args:\n    brackets (str): A string containing only '(' and ')'.\n    \n    Returns:\n    bool: True if the brackets are correctly matched, False otherwise.\n    \n    Examples:\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    \n    if not isinstance(brackets, str):\n        raise ValueError(\"Input must be a string containing only '(' and ')'\")\n\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        else:\n            raise ValueError(\"Input string contains invalid characters; only '(' and ')' are allowed\")\n        \n        if balance < 0:\n            return False  # There are more closing brackets than opening brackets\n\n    return balance == 0\n\n# Example unit tests\nif __name__ == \"__main__\":\n    assert correct_bracketing(\"(\") == False, \"Test case 1 failed\"\n    assert correct_bracketing(\"()\") == True, \"Test case 2 failed\"\n    assert correct_bracketing(\"(()())\") == True, \"Test case 3 failed\"\n    assert correct_bracketing(\")(()\") == False, \"Test case 4 failed\"\n    assert correct_bracketing(\"\") == True, \"Test case 5 failed\"\n    assert correct_bracketing(\"(((())))\") == True, \"Test case 6 failed\"\n    assert correct_bracketing(\"(()))(\") == False, \"Test case 7 failed\"\n    assert correct_bracketing(\"()()()()\") == True, \"Test case 8 failed\"\n\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n    l (list): The list of elements to check.\n    \n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \n    Raises:\n    ValueError: If the input is not a list or contains non-comparable elements.\n    \n    Example usage:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic(['a', 'b', 'c'])\n    True\n    >>> monotonic(['c', 'b', 'a'])\n    True\n    >>> monotonic(['a', 'c', 'b'])\n    False\n    \"\"\"\n\n    # Validate input\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list\")\n\n    if len(l) < 2:  # A list with less than 2 element is considered monotonic\n        return True\n\n    # Initialize boolean flags for increasing and decreasing\n    increasing = True\n    decreasing = True\n\n    # Iterate through the list and compare adjacent elements\n    for i in range(1, len(l)):\n        if not (isinstance(l[i-1], (int, float, str)) and isinstance(l[i], (int, float, str))):\n            raise ValueError(\"List contains non-comparable elements\")\n        \n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n            \n        # Early exit if we already know the list is neither\n        if not increasing and not decreasing:\n            return False\n\n    return increasing or decreasing\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional edge cases\n    assert monotonic([1]) == True  # Single element\n    assert monotonic([]) == True  # Empty list\n    assert monotonic([3, 3, 3]) == True  # Constant list\n    assert monotonic(['a', 'b', 'c']) == True  # Increasing string list\n    assert monotonic(['c', 'b', 'a']) == True  # Decreasing string list\n    assert monotonic(['a', 'c', 'b']) == False  # Non-monotonic string list\n\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\n    Args:\n    n (int): The position in the FibFib sequence to compute.\n\n    Returns:\n    int: The n-th element of the FibFib sequence.\n\n    Raises:\n    ValueError: If `n` is a negative integer.\n    \n    Examples:\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer\")\n    \n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_list = [0, 0, 1]\n    \n    for i in range(3, n + 1):\n        next_val = fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3]\n        fibfib_list.append(next_val)\n    \n    return fibfib_list[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Additional tests\n    print(fibfib(0))  # Expected: 0\n    print(fibfib(1))  # Expected: 0\n    print(fibfib(2))  # Expected: 1\n    print(fibfib(3))  # Expected: 1\n    print(fibfib(4))  # Expected: 2\n    print(fibfib(5))  # Expected: 4\n    print(fibfib(10)) # Expected: 183\n    try:\n        print(fibfib(-1)) # Expected: ValueError\n    except ValueError as e:\n        print(e)\n\n    try:\n        print(fibfib(\"test\")) # Expected: ValueError\n    except ValueError as e:\n        print(e)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"\n    Circularly shift the digits of the integer x to the right by 'shift' positions\n    and return the result as a string. If 'shift' is greater than the number of digits,\n    reverse the digits of 'x'.\n    \n    Args:\n    x (int): The integer whose digits are to be shifted.\n    shift (int): The number of positions to shift the digits.\n    \n    Returns:\n    str: The resulting shifted digit string or the reversed digit string if shift > number of digits.\n    \n    Raises:\n    ValueError: If 'x' is not an integer or if 'shift' is not a non-negative integer.\n    \n    Examples:\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(1234, 5)\n    '4321'\n    \"\"\"\n    \n    # Error handling to ensure 'x' is an integer and 'shift' is a non-negative integer\n    if not isinstance(x, int) or x < 0:\n        raise ValueError(\"x must be a non-negative integer\")\n    if not isinstance(shift, int) or shift < 0:\n        raise ValueError(\"shift must be a non-negative integer\")\n    \n    # Convert 'x' to a string to easily manipulate the digits\n    str_x = str(x)\n    len_x = len(str_x)\n    \n    # If shift is greater than or equal to the number of digits, return the reversed digits\n    if shift >= len_x:\n        return str_x[::-1]\n    \n    # Calculate the effective shift within the bounds of the number of digits\n    effective_shift = shift % len_x\n    \n    # Perform the circular shift\n    shifted_str = str_x[-effective_shift:] + str_x[:-effective_shift]\n    \n    return shifted_str"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list `l` are below threshold `t`.\n    \n    Args:\n    l (list): A list of integers to check.\n    t (int): The threshold value.\n    \n    Returns:\n    bool: True if all numbers in the list are below the threshold, otherwise False.\n    \n    Raises:\n    TypeError: If `l` is not a list or `t` is not an integer.\n    ValueError: If any element in `l` is not an integer.\n    \n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(t, int):\n        raise TypeError(\"The threshold must be an integer.\")\n    \n    for item in l:\n        if not isinstance(item, int):\n            raise ValueError(\"All elements in the list must be integers.\")\n        if item >= t:\n            return False\n    return True\n\n# Unit Tests\n\ndef test_below_threshold():\n    assert below_threshold([1, 2, 4, 10], 100) == True\n    assert below_threshold([1, 20, 4, 10], 5) == False\n    assert below_threshold([], 5) == True  # Edge case: empty list should return True\n    assert below_threshold([4, 4, 4], 4) == False  # Edge case: elements equal to the threshold\n    assert below_threshold([-1, -2, -3], 0) == True  # Negative numbers case\n    assert below_threshold([1, 2, 3], 4) == True  # All elements below threshold\n\n    try:\n        below_threshold(\"not a list\", 5)\n    except TypeError:\n        assert True\n    else:\n        assert False\n    \n    try:\n        below_threshold([1, 2, 3], \"not an int\")\n    except TypeError:\n        assert True\n    else:\n        assert False\n    \n    try:\n        below_threshold([1, \"a\", 3], 5)\n    except ValueError:\n        assert True\n    else:\n        assert False\n\n# Run tests\ntest_below_threshold()"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    If the two lists have the same number of chars, return the first list.\n\n    Args:\n    lst1 (list): First list of strings.\n    lst2 (list): Second list of strings.\n\n    Returns:\n    list: The list with fewer total characters, or the first list if they are equal.\n    \"\"\"\n\n    def total_chars(lst):\n        \"\"\"\n        Helper function to calculate the total number of characters in all strings of a list.\n\n        Args:\n        lst (list): List of strings.\n\n        Returns:\n        int: Total number of characters in the list.\n        \"\"\"\n        return sum(len(s) for s in lst)\n\n    total1 = total_chars(lst1)\n    total2 = total_chars(lst2)\n    \n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1\n\n# Testing the function with examples\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    Calculate the number of mangoes in the basket given a string that represents the number \n    of apples and oranges and the total number of fruits.\n    \n    Args:\n    s (str): A string representing the number of apples and oranges in the format \n             \"{x} apples and {y} oranges\"\n    n (int): The total number of fruits in the basket.\n    \n    Returns:\n    int: The number of mangoes in the basket.\n    \n    Raises:\n    ValueError: If the input string does not contain valid integers for apples and oranges.\n    \"\"\"\n    import re\n    \n    # Extract numbers from the string\n    try:\n        numbers = re.findall(r'\\d+', s)\n        if len(numbers) != 2:\n            raise ValueError(\"The input string must contain exactly two numbers.\")\n        \n        apples = int(numbers[0])\n        oranges = int(numbers[1])\n    except (ValueError, IndexError) as e:\n        raise ValueError(\"Invalid input string format.\") from e\n    \n    # Total fruits should be at least the sum of apples and oranges\n    if n < apples + oranges:\n        raise ValueError(\"Total number of fruits cannot be less than the sum of apples and oranges.\")\n    \n    # Calculate mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Example usage:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) -> 8\n# fruit_distribution(\"0 apples and 1 oranges\", 3) -> 2\n# fruit_distribution(\"2 apples and 3 oranges\", 100) -> 95\n# fruit_distribution(\"100 apples and 1 oranges\", 120) -> 19"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n\n# Testing the function with given examples\nprint(smallest_change([1,2,3,5,4,7,9,6]))   # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))   # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))   # Output: 0\n\n# Additional unit tests\n# Palindromic array: No changes needed\nprint(smallest_change([1,1,1,1,1]))  # Output: 0\n# Only one change needed to make it palindromic\nprint(smallest_change([1, 2, 1, 3, 1]))  # Output: 1\n# Three changes needed: [1, 5, 4, 9, 4, 5, 1]\nprint(smallest_change([1, 5, 4, 3, 4, 7, 1]))  # Output: 3\n# Edge case: Single element array\nprint(smallest_change([1]))  # Output: 0\n# Edge case: Empty array\nprint(smallest_change([]))  # Output: 0\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    \n    Args:\n    lst (list of int): A list of integers to be sorted strangely.\n    \n    Returns:\n    list of int: A new list sorted in the strange order.\n    \n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    \n    # Check if the input is indeed a list of integers\n    if not isinstance(lst, list) or not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"Input must be a list of integers\")\n    \n    sorted_lst = sorted(lst)\n    \n    result = []\n    i, j = 0, len(sorted_lst) - 1\n    \n    take_min = True\n    while i <= j:\n        if take_min:\n            result.append(sorted_lst[i])\n            i += 1\n        else:\n            result.append(sorted_lst[j])\n            j -= 1\n        take_min = not take_min\n    \n    return result\n\n# Example usage:\n# strange_sort_list([1, 2, 3, 4]) -> [1, 4, 2, 3]\n# strange_sort_list([5, 5, 5, 5]) -> [5, 5, 5, 5]\n# strange_sort_list([]) -> []\n\n# Testing\nassert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nassert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nassert strange_sort_list([]) == []\nassert strange_sort_list([3, 7, 2, 9, 1, 5]) == [1, 9, 2, 7, 3, 5]\nassert strange_sort_list([-1, -2, 3, 4]) == [-2, 4, -1, 3]\n\n# Testing edge cases\ntry:\n    strange_sort_list(\"1234\")\nexcept ValueError as e:\n    assert str(e) == \"Input must be a list of integers\"\n\ntry:\n    strange_sort_list([1, 2, 'a', 4])\nexcept ValueError as e:\n    assert str(e) == \"Input must be a list of integers\"\n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    \"\"\"\n    Determines if an integer is a cube of some integer number.\n    \n    Args:\n    a (int): The input integer to check.\n    \n    Returns:\n    bool: True if the integer is a cube of some integer, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    \n    if a == 0:\n        return True\n\n    # Calculate the cube root of the absolute value of a\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n\n    # Check if cube_root ** 3 is equal to the absolute value of a\n    if cube_root ** 3 == abs_a:\n        return True\n    else:\n        return False\n\n# Examples for testing\nprint(iscube(1))   # ==> True\nprint(iscube(2))   # ==> False\nprint(iscube(-1))  # ==> True\nprint(iscube(64))  # ==> True\nprint(iscube(0))   # ==> True\nprint(iscube(180)) # ==> False"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    \"\"\"\n    Finds the greatest integer in a list which has a frequency in the list\n    that is greater than or equal to the integer itself.\n\n    Args:\n    lst (list of int): The list of positive integers.\n\n    Returns:\n    int: The greatest integer that meets the criteria or -1 if no such integer exists.\n    \"\"\"\n    if not lst or not all(isinstance(x, int) and x > 0 for x in lst):\n        raise ValueError(\"Input must be a non-empty list of positive integers\")\n    \n    from collections import Counter\n    \n    # Step 1: Count the frequency of each integer in the list.\n    count = Counter(lst)\n    \n    result = -1\n    \n    # Step 2: Iterate over the count dictionary and check frequency against the integer itself.\n    for num, freq in count.items():\n        if freq >= num:\n            if num > result:\n                result = num\n                \n    return result\n\n# Unit tests\ndef test_search():\n    assert search([4, 1, 2, 2, 3, 1]) == 2, \"Test case 1 Failed\"\n    assert search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3, \"Test case 2 Failed\"\n    assert search([5, 5, 4, 4, 4]) == -1, \"Test case 3 Failed\"\n    assert search([3, 3, 3, 3, 3]) == 3, \"Test case 4 Failed\"\n    assert search([1, 1, 1, 2]) == 1, \"Test case 5 Failed\"\n    assert search([7, 7, 7, 7, 7, 7, 7]) == 7, \"Test case 6 Failed\"\n    assert search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == -1, \"Test case 7 Failed\"\n    assert search([1]) == 1, \"Test case 8 Failed\"\n    print(\"All test cases passed!\")\n\n# Run unit tests\ntest_search()\n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    \"\"\"\n    Determines if an object will fly based on its balance and weight.\n\n    The object will fly if it meets two conditions:\n    1. It is balanced (i.e. it is the same forwards and backwards).\n    2. The sum of its elements is less than or equal to the maximum possible weight `w`.\n\n    Args:\n    q (list): A list of integers representing the object.\n    w (int): The maximum possible weight the object can have to fly.\n\n    Returns:\n    bool: True if the object will fly, False otherwise.\n\n    Raises:\n    TypeError: If `q` is not a list or if elements of `q` are not integers.\n               If `w` is not an integer.\n    ValueError: If `w` is negative.\n    \"\"\"\n\n    if not isinstance(q, list):\n        raise TypeError(\"The object `q` must be a list.\")\n    if not all(isinstance(i, int) for i in q):\n        raise TypeError(\"All elements in the object `q` must be integers.\")\n    if not isinstance(w, int):\n        raise TypeError(\"The maximum weight `w` must be an integer.\")\n    if w < 0:\n        raise ValueError(\"The maximum weight `w` must be non-negative.\")\n\n    # Check if the object is balanced by comparing it with its reverse\n    is_balanced = q == q[::-1]\n\n    # Calculate the sum of elements in the object\n    total_weight = sum(q)\n\n    # Check both conditions: balanced and within weight limit\n    return is_balanced and total_weight <= w\n\n# Unit test examples to consider\ndef run_tests():\n    assert will_it_fly([1, 2], 5) == False, \"Example Test 1 Failed\"\n    assert will_it_fly([3, 2, 3], 1) == False, \"Example Test 2 Failed\"\n    assert will_it_fly([3, 2, 3], 9) == True, \"Example Test 3 Failed\"\n    assert will_it_fly([3], 5) == True, \"Example Test 4 Failed\"\n    assert will_it_fly([], 0) == True, \"Edge Case 1 Failed\"\n    assert will_it_fly([], -1) == False, \"Edge Case 2 Failed\"\n    assert will_it_fly([1,2,3,2,1], 9) == True, \"Edge Case 3 Failed\"\n    \n    # Test errors\n    try:\n        will_it_fly(\"not_a_list\", 5)\n    except TypeError:\n        print(\"Handled invalid `q` type\")\n    \n    try:\n        will_it_fly([1, 2, '3'], 5)\n    except TypeError:\n        print(\"Handled invalid element in `q`\")\n    \n    try:\n        will_it_fly([1, 2, 3], \"not_an_int\")\n    except TypeError:\n        print(\"Handled invalid `w` type\")\n    \n    try:\n        will_it_fly([1, 2, 3], -5)\n    except ValueError:\n        print(\"Handled invalid negative `w`\")\n\n    print(\"All tests passed!\")\n\n# Run tests\nrun_tests()"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"\n    Returns true if the given number is the multiplication of exactly three prime numbers and false otherwise.\n    Assumes the input number (a) is less than 100.\n    \n    Args:\n    a (int): The number to be checked.\n    \n    Returns:\n    bool: True if `a` is the product of exactly three prime numbers, False otherwise.\n    \n    Raises:\n    ValueError: If `a` is not an integer or if `a` is less than 2.\n    \"\"\"\n    \n    if not isinstance(a, int) or a < 2 or a >= 100:\n        raise ValueError(\"Input must be an integer greater than or equal to 2 and less than 100\")\n    \n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def get_primes_up_to(n):\n        \"\"\"Helper function to get a list of primes up to a given number.\"\"\"\n        return [x for x in range(2, n) if is_prime(x)]\n    \n    primes = get_primes_up_to(100)\n    \n    # Using three nested loops to determine if the number can be obtained by multiplying three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage (for testing):\nprint(is_multiply_prime(30))  # Should return True (2 * 3 * 5)\nprint(is_multiply_prime(28))  # Should return False (not a product of three primes)"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise, return -1.\n\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    \n    This function utilizes Heron's formula to compute the area of the triangle.\n    \n    Args:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n    c (float): Length of the third side.\n    \n    Returns:\n    float: Area of the triangle rounded to two decimal places if valid, -1 otherwise.\n    \"\"\"\n    \n    # Error handling: Check if inputs are of type float or int\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise ValueError(\"All side lengths must be either integers or floats\")\n\n    # Validity check for a triangle\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    \n    # Heron's formula to calculate the area of the triangle\n    s = (a + b + c) / 2  # Semi-perimeter\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 2)\n\n# Example usage and unit tests:\n# These can be executed to validate the correctness of the implemented function.\n\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00, \"Test case 1 failed\"\n    assert triangle_area(1, 2, 10) == -1, \"Test case 2 failed\"\n    assert triangle_area(6, 8, 10) == 24.00, \"Test case 3 failed\"\n    assert triangle_area(1, 1, 1) == 0.43, \"Test case 4 failed\"\n    assert triangle_area(0, 0, 0) == -1, \"Test case 5 failed\"  # Edge case: zero lengths\n    assert triangle_area(-1, 2, 2) == -1, \"Test case 6 failed\"  # Edge case: negative length\n    assert triangle_area(10, 20, 30) == -1, \"Test case 7 failed\"  # Invalid triangle\n    \n    # Check for unexpected inputs (e.g., strings)\n    try:\n        triangle_area(\"a\", 4, 5)\n    except ValueError:\n        print(\"Passed string input test\")\n    \n    print(\"All tests passed.\")\n\ntest_triangle_area()"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Checks if x is a simple power of n. Specifically, checks if there exists an integer k such that n ** k == x.\n    \n    Args:\n    x (int): The number to check.\n    n (int): The base number.\n    \n    Returns:\n    bool: True if x is a simple power of n, otherwise False.\n    \n    Example Usage:\n    is_simple_power(1, 4) -> True\n    is_simple_power(2, 2) -> True\n    is_simple_power(8, 2) -> True\n    is_simple_power(3, 2) -> False\n    is_simple_power(3, 1) -> False\n    is_simple_power(5, 3) -> False\n    \n    Notes:\n    - If n <= 1, the function will always return False, since no meaningful simple power relationship can be established.\n    - The function handles edge cases such as x or n being zero or negative.\n    \"\"\"\n    # Edge cases\n    if x < 1 or n <= 1:\n        return x == 1  # the only valid base case when n <= 1 is x == 1\n\n    # Initialize k to 1 (since n ** 0 is always 1)\n    k = 0\n    current_power = 1\n    \n    # Loop until the current_power exceeds x\n    while current_power <= x:\n        if current_power == x:\n            return True\n        k += 1\n        current_power = n ** k\n    \n    return False\n\n# Testing\ndef test_is_simple_power():\n    assert is_simple_power(1, 4) == True, \"Test case 1 failed\"\n    assert is_simple_power(2, 2) == True, \"Test case 2 failed\"\n    assert is_simple_power(8, 2) == True, \"Test case 3 failed\"\n    assert is_simple_power(3, 2) == False, \"Test case 4 failed\"\n    assert is_simple_power(3, 1) == False, \"Test case 5 failed\"\n    assert is_simple_power(5, 3) == False, \"Test case 6 failed\"\n    assert is_simple_power(27, 3) == True, \"Test case 7 failed\"\n    assert is_simple_power(16, 4) == True, \"Test case 8 failed\"\n    assert is_simple_power(15, 4) == False, \"Test case 9 failed\"\n    assert is_simple_power(0, 2) == False, \"Test case 10 failed\"\n    assert is_simple_power(1, 0) == False, \"Test case 11 failed\"    \n    print(\"All test cases passed!\")\n\n# Running tests\ntest_is_simple_power()"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to its binary representation as a string.\n\n    This function converts a given decimal number into a binary string.\n    The binary string will be wrapped with 'db' at both the beginning and the end.\n\n    Args:\n    decimal (int): The decimal number to be converted. It must be a non-negative integer.\n\n    Returns:\n    str: The binary representation of the input decimal, wrapped with 'db' at both ends.\n\n    Raises:\n    ValueError: If the provided decimal is negative.\n    TypeError: If the provided decimal is not an integer.\n\n    Examples:\n    >>> decimal_to_binary(15)\n    'db1111db'\n    >>> decimal_to_binary(32)\n    'db100000db'\n    \"\"\"\n\n    if not isinstance(decimal, int):\n        raise TypeError(\"Input must be an integer\")\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Convert the decimal to binary and remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n\n    # Return the formatted binary string\n    return f'db{binary_str}db'\n\n# Testing the function\nif __name__ == \"__main__\":\n    # Test cases\n    test_cases = [\n        (0, 'db0db'),\n        (1, 'db1db'),\n        (2, 'db10db'),\n        (15, 'db1111db'),\n        (32, 'db100000db'),\n    ]\n\n    for decimal, expected in test_cases:\n        result = decimal_to_binary(decimal)\n        assert result == expected, f\"Input: {decimal}; Expected: {expected}; Got: {result}\"\n\n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"\n    Checks if the length of the given string is a prime number.\n    \n    Args:\n    string (str): The input string.\n    \n    Returns:\n    bool: True if the length of the string is a prime number, False otherwise.\n    \n    Examples:\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"\n        Determines if the input number is a prime number.\n        \n        Args:\n        n (int): The number to check.\n        \n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    length = len(string)\n    \n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n        \n    return is_prime(length)\n\n# Example usage:\n# print(prime_length('Hello')) -> True\n# print(prime_length('abcdcba')) -> True\n# print(prime_length('kittens')) -> True\n# print(prime_length('orange')) -> False\n\n# Unit Tests\ndef test_prime_length():\n    assert prime_length('Hello') == True    # Length is 5 (prime)\n    assert prime_length('abcdcba') == True  # Length is 7 (prime)\n    assert prime_length('kittens') == True  # Length is 7 (prime)\n    assert prime_length('orange') == False  # Length is 6 (not prime)\n    assert prime_length('a') == False       # Length is 1 (not prime)\n    assert prime_length('ab') == True       # Length is 2 (prime)\n    assert prime_length('') == False        # Length is 0 (not prime)\n\n# Run tests\ntest_prime_length()"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"\n    Checks if a given string is happy.\n    \n    A string is considered happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Args:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    \n    # Checking if the length of the string is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string considering each 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract a triplet of consecutive characters\n        triplet = s[i:i+3]\n        # Check if the characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    return True\n\n# Testing the function\nassert is_happy('a') == False, \"Test case 1 failed\"\nassert is_happy('aa') == False, \"Test case 2 failed\"\nassert is_happy('abcd') == True, \"Test case 3 failed\"\nassert is_happy('aabb') == False, \"Test case 4 failed\"\nassert is_happy('adb') == True, \"Test case 5 failed\"\nassert is_happy('xyy') == False, \"Test case 6 failed\"\nassert is_happy('xya') == True, \"Test case 7 failed\"\nassert is_happy('xxaabbddee') == False, \"Test case 8 failed\"\nassert is_happy('aabbcddeeff') == False, \"Test case 9 failed\"\nassert is_happy('abcdabeb') == True, \"Test case 10 failed\"\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes.\n    \n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, B (decimal 11), D (decimal 13).\n    \n    Args:\n    num (str): A string representing the hexadecimal number.\n    \n    Returns:\n    int: The count of prime hexadecimal digits in the input string.\n    \n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    # List of hexadecimal digits that are considered prime\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the count of prime hex digits\n    count = 0\n    \n    # Iterate through each character in the hexadecimal string\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    \n    return count\n\n# Testing\nprint(hex_key(\"AB\"))  # Expected output: 1\nprint(hex_key(\"1077E\"))  # Expected output: 2\nprint(hex_key(\"ABED1A33\"))  # Expected output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Expected output: 6\nprint(hex_key(\"2020\"))  # Expected output: 2\n\n# Unit tests\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"\") == 0  # Edge case: empty string\n    assert hex_key(\"FFFFFFF\") == 0  # Edge case: no prime digits\n    assert hex_key(\"2B3D57\") == 6   # All prime digits\n    print(\"All tests passed.\")\n\ntest_hex_key()"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    Args:\n    s (str): The input string.\n\n    Returns:\n    str: The modified string with each word's characters sorted in ascending order.\n\n    For example:\n    anti_shuffle('Hi') -> 'Hi'\n    anti_shuffle('hello') -> 'ehllo'\n    anti_shuffle('Hello World!!!') -> 'Hello !!!Wdlor'\n    \"\"\"\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Split the string maintaining the spaces\n    words = s.split(' ')\n    # Sort characters in each word\n    sorted_words = [''.join(sorted(word)) for word in words]\n    # Join the words back with spaces\n    return ' '.join(sorted_words)\n\n\n# Example usage:\n# anti_shuffle('Hi') -> 'Hi'\n# anti_shuffle('hello') -> 'ehllo'\n# anti_shuffle('Hello World!!!') -> 'Hello !!!Wdlor'\n\n# Unit Tests\n\ndef test_anti_shuffle():\n    assert anti_shuffle('Hi') == 'Hi'\n    assert anti_shuffle('hello') == 'ehllo'\n    assert anti_shuffle('Hello World!!!') == 'Hello !!!Wdlor'\n    assert anti_shuffle('a b c') == 'a b c'\n    assert anti_shuffle('abc def ghi') == 'abc def ghi'\n    assert anti_shuffle('') == ''\n    assert anti_shuffle('123 456 789') == '123 456 789'\n    assert anti_shuffle('Zebra zebra') == 'Zaber aberz'\n    assert anti_shuffle('Spaces   between') == 'aesscp   beenetw'\n\n    print(\"All tests passed.\")\n\ntest_anti_shuffle()"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index].\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Initialize variables to track the smallest even value and its index\n    smallest_even_value = None\n    index_of_smallest_even = None\n\n    # Iterate over the array to find the smallest even value\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the current value is even\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                index_of_smallest_even = index\n\n    # If an even value is found, return it and its index in a list\n    if smallest_even_value is not None:\n        return [smallest_even_value, index_of_smallest_even]\n\n    # If no even values are found, return an empty list\n    return []\n\n# Unit Tests\ndef test_pluck():\n    assert pluck([4, 2, 3]) == [2, 1], \"Test Case 1 Failed\"\n    assert pluck([1, 2, 3]) == [2, 1], \"Test Case 2 Failed\"\n    assert pluck([]) == [], \"Test Case 3 Failed\"\n    assert pluck([5, 0, 3, 0, 4, 2]) == [0, 1], \"Test Case 4 Failed\"\n    assert pluck([7, 1, 5, 11]) == [], \"Test Case 5 Failed\"\n    assert pluck([6, 4, 8, 4, 6]) == [4, 1], \"Test Case 6 Failed\"\n    assert pluck([2, 4, 2, 6, 8]) == [2, 0], \"Test Case 7 Failed\"\n    assert pluck([10]) == [10, 0], \"Test Case 8 Failed\"\n    assert pluck([9, 2, 5, 0, 3]) == [0, 3], \"Test Case 9 Failed\"\n    \n    print(\"All test cases pass\")\n\ntest_pluck()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2-dimensional data, as nested lists,\n    which is similar to a matrix. However, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find instances of x in the list,\n    and return a list of tuples, [(x1, y1), (x2, y2), ...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Args:\n    lst (list of list of int): The 2-dimensional data.\n    x (int): The integer to find in the data.\n    \n    Returns:\n    list of tuple: List of coordinates where x is found.\n    \n    Examples:\n    get_row([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    \n    get_row([], 1) == []\n    \n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    if not isinstance(lst, list) or not all(isinstance(row, list) for row in lst):\n        raise ValueError(\"Input must be a list of lists\")\n    if not isinstance(x, int):\n        raise ValueError(\"The search value should be an integer\")\n    \n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    \n    # Sort coordinates by rows in ascending order, and columns in descending order within the row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Example usage and edge cases:\nprint(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1))\n# Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]\n\nprint(get_row([[1, 2], [3, 1, 4], [5]], 4))  # Output: [(1, 2)]\n\n# Test for correct input types\ntry:\n    get_row(\"not a list\", 1)\nexcept ValueError as e:\n    print(e)  # Output: Input must be a list of lists\n\n# Test for correct value type\ntry:\n    get_row([[1, 2], [3, 4]], \"not an int\")\nexcept ValueError as e:\n    print(e)  # Output: The search value should be an integer"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    Converts a list of GPAs to their corresponding letter grades based on a predefined grading scale.\n    \n    Args:\n    grades (list of floats): A list containing the GPAs of students.\n    \n    Returns:\n    list of str: A list containing the corresponding letter grades.\n    \n    Example:\n    >>> numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\n    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    if not isinstance(grades, list):\n        raise ValueError(\"Input must be a list\")\n    for grade in grades:\n        if not (isinstance(grade, int) or isinstance(grade, float)):\n            raise ValueError(\"All elements in the input list must be numbers (int or float)\")\n\n    grade_scale = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n\n    letter_grades = []\n    for gpa in grades:\n        for threshold, grade in grade_scale:\n            if gpa == threshold:\n                letter_grades.append(grade)\n                break\n            elif gpa > threshold:\n                continue\n            elif gpa < 0:\n                letter_grades.append('E')\n                break\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n\n# Test cases\ndef test_numerical_letter_grade():\n    assert numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert numerical_letter_grade([0]) == ['E']\n    assert numerical_letter_grade([4.0, 4.0, 4.0]) == ['A+', 'A+', 'A+']\n    assert numerical_letter_grade([0.7, 1.0, 2.0]) == ['D', 'D+', 'C+']\n    assert numerical_letter_grade([3.85, 2.9, 2.7]) == ['A', 'B+', 'B']\n    assert numerical_letter_grade([-2.0]) == ['E']  # Edge case for negative GPA\n\n    try:\n        numerical_letter_grade(\"4.0, 3, 1.7, 2, 3.5\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list\"\n\n    try:\n        numerical_letter_grade([4.0, 3, 1.7, \"2\", 3.5])\n    except ValueError as e:\n        assert str(e) == \"All elements in the input list must be numbers (int or float)\"\n\n# Run tests\ntest_numerical_letter_grade()"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\n    Example:\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Args:\n    N (int): A positive integer (0 \u2264 N \u2264 10000).\n    \n    Returns:\n    str: A string representing the sum of digits of N in binary.\n    \"\"\"\n    if not isinstance(N, int) or N < 0 or N > 10000:\n        raise ValueError(\"N must be an integer within the range 0 to 10000 inclusive.\")\n\n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in str(N))\n\n    # Convert the sum to binary and return\n    return bin(digit_sum)[2:]\n\n# Example usage\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"\nprint(solve(0))     # Output: \"0\"\nprint(solve(10000)) # Output: \"1\""}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Args:\n    array (list): A list of non-negative integers.\n\n    Returns:\n    list: A sorted copy of the given array in either ascending or descending order based on the specified rule.\n    \n    Raises:\n    ValueError: If the array has any negative integers.\n    \n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    if any(num < 0 for num in array):\n        raise ValueError(\"Array should contain only non-negative integers.\")\n    \n    if not array:\n        return []\n    \n    first_index_value = array[0]\n    last_index_value = array[-1]\n    sum_first_last = first_index_value + last_index_value\n\n    # Decide sort order based on the sum of the first and last elements\n    if sum_first_last % 2 == 0:\n        # If the sum is even, sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # If the sum is odd, sort in ascending order\n        return sorted(array)\n\n# Test cases to verify the correctness of the implementation\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([10, 22, 5, 2]) == [22, 10, 5, 2]\n    \n    try:\n        sort_array([-1, 2, 3])\n    except ValueError as e:\n        assert str(e) == \"Array should contain only non-negative integers.\"\n\n# Run the tests\ntest_sort_array()"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    Args:\n    lst (list): A list of integers.\n    \n    Returns:\n    int or None: The 2nd smallest element in the list, or None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) -> 2\n    next_smallest([5, 1, 4, 3, 2]) -> 2\n    next_smallest([]) -> None\n    next_smallest([1, 1]) -> None\n    \"\"\"\n    # Check if input list has fewer than 2 unique elements\n    if len(lst) < 2:\n        return None\n\n    # Remove duplicates by converting to a set\n    unique_elements = set(lst)\n\n    # If there are fewer than 2 unique elements after removing duplicates, return None\n    if len(unique_elements) < 2:\n        return None\n\n    # Convert the set back to a list, sort it, and return the second element\n    sorted_unique_elements = sorted(unique_elements)\n    \n    return sorted_unique_elements[1]\n\n# Unit Tests\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([2, 2, 1, 1]) == None\n    assert next_smallest([4, -1, 2, -1]) == 2\n    assert next_smallest([1, 2, 3, 4, 5, -3, 0]) == 0\n    assert next_smallest([7]) == None\n\ntest_next_smallest()"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    Args:\n    n (int): The number of digits in the integer.\n    \n    Returns:\n    int: The count of n-digit positive integers starting or ending with 1.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    \n    # Input validation\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    if n == 1:\n        # For single-digit numbers, 1 is the only valid number that starts and ends with 1\n        return 1\n    \n    # Calculate 9^(n-1) once and use it in the formula to avoid redundant calculations\n    possible_combinations = 9 ** (n - 1)\n    \n    # Count of numbers starting with 1 \n    start_with_1 = possible_combinations\n    \n    # Count of numbers ending with 1\n    end_with_1 = possible_combinations\n    \n    # Count of numbers starting and ending with 1 (overlap)\n    start_and_end_with_1 = 9 ** (n - 2)\n    \n    # Total count: starting or ending with 1 minus the overlap\n    total_count = start_with_1 + end_with_1 - start_and_end_with_1\n    \n    return total_count\n\n# Example Unit Tests\nimport unittest\n\nclass TestStartsOneEnds(unittest.TestCase):\n    def test_single_digit(self):\n        self.assertEqual(starts_one_ends(1), 1)\n    \n    def test_two_digit(self):\n        self.assertEqual(starts_one_ends(2), 18)\n    \n    def test_three_digit(self):\n        self.assertEqual(starts_one_ends(3), 162)\n    \n    def test_invalid_input_zero(self):\n        with self.assertRaises(ValueError):\n            starts_one_ends(0)\n\n    def test_invalid_input_negative(self):\n        with self.assertRaises(ValueError):\n            starts_one_ends(-1)\n\n    def test_invalid_input_non_integer(self):\n        with self.assertRaises(ValueError):\n            starts_one_ends(\"a\")\n\nif __name__ == \"__main__\":\n    unittest.main()"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    Args:\n    s (str): The input string.\n    \n    Returns:\n    int: The count of uppercase vowels located at even indices.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    \n    # Error handling for input type\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Set of uppercase vowels for quick lookup\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0  # Initialize count of uppercase vowels at even indices\n\n    # Iterate over the string and check only even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    return count\n\n# Example usage:\n# count_upper('aBCdEf') -> 1\n# count_upper('abcdefg') -> 0\n# count_upper('dBBE') -> 0\n\n# Unit tests\ndef test_count_upper():\n    assert count_upper('aBCdEf') == 1, \"Test case 1 failed\"\n    assert count_upper('abcdefg') == 0, \"Test case 2 failed\"\n    assert count_upper('dBBE') == 0, \"Test case 3 failed\"\n    assert count_upper('HELLO') == 1, \"Test case 4 failed\"\n    assert count_upper('AABEC') == 2, \"Test case 5 failed\"\n    assert count_upper('') == 0, \"Test case 6 failed\"\n    assert count_upper('A') == 1, \"Test case 7 failed\"\n    \n    try:\n        count_upper(123)\n    except TypeError:\n        pass\n    else:\n        raise AssertionError(\"Test case 8 failed: TypeError not raised\")\n\n    print(\"All test cases passed\")\n\n# Run tests\ntest_count_upper()"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places (i.e., 4 characters forward).\n    \n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \n    Args:\n    s (str): The string to be encrypted.\n    \n    Returns:\n    str: The encrypted string with characters shifted.\n    \"\"\"\n    \n    # Constant for the rotation amount\n    ROTATION_AMOUNT = 4\n    ALPHABET_SIZE = 26\n    \n    # Helper function to perform the rotation\n    def rotate_char(c, rotation):\n        if 'a' <= c <= 'z':\n            new_pos = (ord(c) - ord('a') + rotation) % ALPHABET_SIZE\n            return chr(ord('a') + new_pos)\n        else:\n            # Non-alphabetic characters are returned unchanged.\n            return c\n    \n    # Create the encrypted string\n    encrypted_string = ''.join(rotate_char(char, ROTATION_AMOUNT) for char in s)\n    \n    return encrypted_string\n\n# Example usage:\n# print(encrypt('hi'))  # Should return 'lm'\n# print(encrypt('asdfghjkl'))  # Should return 'ewhjklnop'\n# print(encrypt('gf'))  # Should return 'kj'\n# print(encrypt('et'))  # Should return 'ix'"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Args:\n    x (int): The first number.\n    y (int): The second number.\n    z (int): The third number.\n\n    Returns:\n    bool: True if one of the numbers is equal to the sum of the other two and all numbers are integers, \n          False in any other cases.\n    \n    Examples:\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all inputs are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check the condition if any of the number is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n\n# Example usage:\n# print(any_int(5, 2, 7))  # Should print True\n# print(any_int(3, 2, 2))  # Should print False\n\n# Unit tests\ndef test_any_int():\n    assert any_int(5, 2, 7) == True, \"Test Case 1 Failed\"\n    assert any_int(3, 2, 2) == False, \"Test Case 2 Failed\"\n    assert any_int(3, -2, 1) == True, \"Test Case 3 Failed\"\n    assert any_int(3.6, -2.2, 2) == False, \"Test Case 4 Failed\"\n    assert any_int(0, 0, 0) == True, \"Test Case 5 Failed\"\n    assert any_int(0, 1, 1) == True, \"Test Case 6 Failed\"\n    assert any_int(-3, -1, -4) == True, \"Test Case 7 Failed\"\n    # Further edge cases can be added here\n    print(\"All test cases passed!\")\n\n# Run unit tests\ntest_any_int()"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Args:\n    - lst (list of int): The input list of integers.\n\n    Returns:\n    - int: The sum of even elements located at odd indices.\n    \n    Raises:\n    - ValueError: If the input is not a list or contains non-integer elements.\n    \n    Examples:\n        add([4, 2, 6, 7]) -> 2\n        add([1, 3, 5, 7, 2, 8, 10, 12]) -> 20\n    \"\"\"\n\n    # Validate input\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    if not all(isinstance(i, int) for i in lst):\n        raise ValueError(\"All elements in the input list must be integers.\")\n    \n    # Initialize the sum\n    result = 0\n\n    # Iterate through the list and sum up even elements at odd indices.\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    \n    return result\n\n# Unit Tests\ndef test_add():\n    # Test with normal cases\n    assert add([4, 2, 6, 7]) == 2\n    assert add([1, 3, 5, 7, 2, 8, 10, 12]) == 20\n\n    # Test with edge cases\n    assert add([2]) == 0  # Only one element, at index 0 (even index)\n    assert add([0, -2, -4, 7]) == -2  # Even elements but negative\n\n    # Test with list containing all odd numbers and some even indices\n    assert add([1, 1, 1, 1, 1, 1]) == 0\n\n    # Test with invalid input types\n    try:\n        add(\"not a list\")\n    except ValueError as e:\n        assert str(e) == 'Input must be a list of integers.'\n\n    try:\n        add([1, \"two\", 3])\n    except ValueError as e:\n        assert str(e) == 'All elements in the input list must be integers.'\n\n    print(\"All tests passed!\")\n\n# Run the tests\ntest_add()"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    Counts the number of \"boredoms\" in the given string S. A \"boredom\" is defined\n    as a sentence that starts with the word \"I\". Sentences are delimited by\n    '.', '?' or '!'.\n    \n    Args:\n    S (str): The input string containing sentences.\n    \n    Returns:\n    int: The number of sentences starting with the word \"I\".\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    \n    # Raise an error if the input is not of type string\n    if not isinstance(S, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Sentence delimiters\n    delimiters = '.!?'\n    \n    # Split the string into sentences using delimiters\n    # Maintain sentences with the delimiters for accurate sentence identification\n    import re\n    sentences = re.split(r'([.!?])', S)\n    \n    # Combine sentence fragments back together\n    bounded_sentences = []\n    for i in range(0, len(sentences) - 1, 2):\n        bounded_sentences.append(sentences[i].strip() + sentences[i+1])\n    \n    # Initialize boredom count\n    boredom_count = 0\n    \n    # Loop through each sentence\n    for sentence in bounded_sentences:\n        # Strip any leading and trailing whitespace\n        trimmed_sentence = sentence.strip()\n        \n        # Check if the sentence starts with \"I\" (case-sensitive)\n        if trimmed_sentence.startswith(\"I\"):\n            boredom_count += 1\n    \n    return boredom_count\n\n\n# Example usage:\n# is_bored(\"Hello world\") -> 0\n# is_bored(\"The sky is blue. The sun is shining. I love this weather\") -> 1\n\n# Unit tests and edge cases\ndef test_is_bored():\n    assert is_bored(\"Hello world\") == 0\n    assert is_bored(\"The sky is blue. The sun is shining. I love this weather.\") == 1\n    assert is_bored(\"Do you know? I am here! Yes, I am!\") == 2\n    assert is_bored(\"I think I can. I think I can. I think I can!\") == 3\n    assert is_bored(\"\") == 0\n    assert is_bored(\"I. I. I.\") == 3\n    assert is_bored(\"i am here. I am too. i will come.\") == 1\n    assert is_bored(\"Hello? I said hello! Are you there?\") == 1\n    print(\"All test cases pass.\")\n\n# Running the tests\ntest_is_bored()"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    def swap_case_and_replace_vowel(char):\n        vowels_mapping = {\n            'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n            'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n        }\n        \n        # Check if character is a vowel, if so replace it\n        if char in vowels_mapping:\n            return vowels_mapping[char]\n        else:\n            # if the character is not a vowel, just swap its case\n            return char.swapcase()\n    \n    encoded_message = \"\".join(swap_case_and_replace_vowel(char) for char in message)\n    return encoded_message\n\n# Example usage and tests\nprint(encode('test'))\nprint(encode('This is a message'))\n\n\n# Unit tests\nimport unittest\n\nclass TestEncode(unittest.TestCase):\n    def test_simple_cases(self):\n        self.assertEqual(encode('test'), 'TGST')\n        self.assertEqual(encode('This is a message'), 'tHKS KS C MGSSCGG')\n    \n    def test_edge_cases(self):\n        self.assertEqual(encode('aEiOu'), 'CGKQW')\n        self.assertEqual(encode(''), '')\n        self.assertEqual(encode('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'), 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz')\n\n    def test_all_vowels(self):\n        self.assertEqual(encode('aeiouAEIOU'), 'cgkqwCGKQW')\n\n    def test_all_consonants(self):\n        self.assertEqual(encode('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'), 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz')\n\nif __name__ == '__main__':\n    unittest.main()"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Args:\n    value (str): The input value as a string representing a number.\n\n    Returns:\n    int: The closest integer to the given value.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    try:\n        # Convert the string value to a float\n        number = float(value)\n    except ValueError:\n        # Handle the case where the input cannot be converted to a float\n        raise ValueError(\"The input value must be a valid number string.\")\n    \n    # Check the decimal part to determine how to round\n    if number > 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)\n\n# Unit tests\nimport unittest\n\nclass TestClosestInteger(unittest.TestCase):\n    def test_positive(self):\n        self.assertEqual(closest_integer(\"10\"), 10)\n        self.assertEqual(closest_integer(\"15.3\"), 15)\n        self.assertEqual(closest_integer(\"14.5\"), 15)\n    \n    def test_negative(self):\n        self.assertEqual(closest_integer(\"-10\"), -10)\n        self.assertEqual(closest_integer(\"-15.3\"), -15)\n        self.assertEqual(closest_integer(\"-14.5\"), -15)\n    \n    def test_zero(self):\n        self.assertEqual(closest_integer(\"0\"), 0)\n        self.assertEqual(closest_integer(\"0.5\"), 1)\n        self.assertEqual(closest_integer(\"-0.5\"), -1)\n    \n    def test_invalid_input(self):\n        with self.assertRaises(ValueError):\n            closest_integer(\"abc\")\n        with self.assertRaises(ValueError):\n            closest_integer(\"\")\n\n# Running tests\nif __name__ == \"__main__\":\n    unittest.main(argv=[''], exit=False)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Args:\n    n (int): The number of levels in the pile.\n\n    Returns:\n    list: A list containing the number of stones at each level.\n\n    Raises:\n    ValueError: If the provided value of n is not a positive integer.\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    # Error handling for invalid input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Optimized way to continuously generate odd or even numbers\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            # If initial n is even, next even number sequence\n            next_stone = levels[-1] + 2\n        else:\n            # If initial n is odd, next odd number sequence\n            next_stone = levels[-1] + 2\n        levels.append(next_stone)\n\n    return levels\n\n# Example usage:\n# print(make_a_pile(3)) -> [3, 5, 7]\n# print(make_a_pile(4)) -> [4, 6, 8, 10]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    Args:\n    x (int): The starting number of the range.\n    y (int): The ending number of the range.\n\n    Returns:\n    int: The largest even integer within the range [x, y] inclusive, or -1 if no such number exists.\n    \n    Examples:\n    choose_num(12, 15) -> 14\n    choose_num(13, 12) -> -1\n\n    Error Handling:\n    - If x or y are not integers or not positive, a ValueError is raised.\n    \"\"\"\n\n    # Ensure x and y are positive integers\n    if not (isinstance(x, int) and isinstance(y, int)):\n        raise ValueError(\"Both x and y must be integers.\")\n    if x < 0 or y < 0:\n        raise ValueError(\"Both x and y must be positive numbers.\")\n\n    # If x > y, the range is invalid\n    if x > y:\n        return -1\n\n    # Find the largest even number in [x, y]\n    if y % 2 == 0:\n        largest_even = y\n    else:\n        largest_even = y - 1\n\n    if largest_even >= x:\n        return largest_even\n    else:\n        return -1\n\n# Uncomment to test the function with the provided examples\n# print(choose_num(12, 15))  # Expected output: 14\n# print(choose_num(13, 12))  # Expected output: -1\n\n# Additional test cases for edge cases and broader coverage\n# print(choose_num(0, 0))  # Expected output: 0\n# print(choose_num(1, 1))  # Expected output: -1\n# print(choose_num(2, 2))  # Expected output: 2\n# print(choose_num(3, 4))  # Expected output: 4\n# print(choose_num(-1, 4)) # Expected output: ValueError"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \n    Args:\n    dictionary (dict): The dictionary to check.\n    \n    Returns:\n    bool: True if all keys are either lower case strings or upper case strings, False otherwise.\n    \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check if the dictionary is empty; return False immediately if it is\n    if not dictionary:\n        return False\n    \n    # Extract keys from the dictionary\n    keys = dictionary.keys()\n    \n    # Initialize flags to check if all keys are lowercase or uppercase\n    all_lowercase = all(isinstance(k, str) and k.islower() for k in keys)\n    all_uppercase = all(isinstance(k, str) and k.isupper() for k in keys)\n    \n    # Return True if either all keys are lowercase or all keys are uppercase\n    return all_lowercase or all_uppercase\n\n# Unit test cases to validate the functionality\ndef test_check_dict_case():\n    assert check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}) == True\n    assert check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}) == False\n    assert check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}) == False\n    assert check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}) == False\n    assert check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}) == True\n    assert check_dict_case({}) == False\n    assert check_dict_case({\"a\": \"apple\", \"B\": \"banana\"}) == False\n    print(\"All test cases pass\")\n\n# Run the unit tests\ntest_check_dict_case()"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The product of the unit digits of the two integers.\n    \n    Examples:\n    multiply(148, 412) -> 16\n    multiply(19, 28) -> 72\n    multiply(2020, 1851) -> 0\n    multiply(14, -15) -> 20\n    \"\"\"\n    \n    try:\n        # Extracting the unit digits using modulus operator\n        unit_digit_a = abs(a) % 10\n        unit_digit_b = abs(b) % 10\n        \n        # Returning the product of unit digits\n        return unit_digit_a * unit_digit_b\n    except Exception as e:\n        # General exception handling to catch any unexpected errors\n        raise RuntimeError(f\"An error occurred while calculating the product: {e}\")\n\n\n# Unit tests to validate the function\ndef test_multiply():\n    assert multiply(148, 412) == 16, \"Test case 1 failed\"\n    assert multiply(19, 28) == 72, \"Test case 2 failed\"\n    assert multiply(2020, 1851) == 0, \"Test case 3 failed\"\n    assert multiply(14, -15) == 20, \"Test case 4 failed\"\n    assert multiply(0, 50) == 0, \"Test case 5 failed\"\n    assert multiply(-17, -29) == 63, \"Test case 6 failed\"\n\n# Running tests\ntest_multiply()\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    Args:\n    s (str): The input string containing words separated by commas or spaces.\n\n    Returns:\n    List[str]: A list of individual words extracted from the input string.\n    \"\"\"\n    \n    import re\n\n    # Regular expression pattern to split the string by commas or one or more spaces\n    pattern = r'[,\\s]+'\n\n    try:\n        # Split the input string using the pattern\n        words = re.split(pattern, s.strip())\n        # Filter out any empty strings that might be present due to consecutive spaces or leading/trailing commas\n        words = [word for word in words if word]\n\n        return words\n\n    except Exception as e:\n        # Log the error message or handle it as required\n        print(f\"An error occurred: {e}\")\n        return []\n\n# Example unit tests for the function\ndef test_words_string():\n    assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert words_string(\"\") == []\n    assert words_string(\"   \") == []\n    assert words_string(\" , , , \") == []\n    assert words_string(\"Word,anotherWord,yetAnother\") == [\"Word\", \"anotherWord\", \"yetAnother\"]\n    assert words_string(\"singleWord\") == [\"singleWord\"]\n    print(\"All tests passed!\")\n\n# Run the unit tests\nif __name__ == \"__main__\":\n    test_words_string()"}
{"task_id": "HumanEval/94", "completion": "import math\nfrom typing import List\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a given number is prime.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the digits of a given number.\n    \n    Args:\n    n (int): The number whose digits are to be summed.\n    \n    Returns:\n    int: The sum of the digits.\n    \"\"\"\n    return sum(map(int, str(n)))\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Args:\n    lst (List[int]): The list of integers.\n\n    Returns:\n    int: Sum of the digits of the largest prime value in the list.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The list cannot be empty\")\n    \n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    \n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n\n# Example unit tests\ndef test_skjkasdkd():\n    assert skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10\n    assert skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25\n    assert skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13\n    assert skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11\n    assert skjkasdkd([0,81,12,3,1,21]) == 3\n    assert skjkasdkd([0,8,1,2,1,7]) == 7\n    assert skjkasdkd([]) == 0  # No prime in the list: handled but needs clarity in doc\n\n# Running Unit Tests\ntest_skjkasdkd()\nprint(\"All tests passed.\")\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"\n    Computes the average of the integers from n through m (including n and m),\n    rounds the answer to the nearest integer, and converts that to binary.\n    If n is greater than m, returns -1.\n    \n    Args:\n    n (int): The starting integer.\n    m (int): The ending integer.\n    \n    Returns:\n    str or int: The binary representation of the rounded average, or -1 if n > m.\n    \n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    # Check if n is greater than m and return -1 if true\n    if n > m:\n        return -1\n    \n    # Compute the sum of the range from n to m (inclusive)\n    total_sum = sum(range(n, m + 1))\n    \n    # Compute the count of numbers in the range from n to m (inclusive)\n    count = m - n + 1\n    \n    # Compute the average and round to the nearest integer\n    avg = round(total_sum / count)\n    \n    # Convert the rounded average to binary\n    binary_avg = bin(avg)\n    \n    return binary_avg\n\n# Example usage:\n# rounded_avg(1, 5) -> \"0b11\"\n# rounded_avg(7, 5) -> -1\n# rounded_avg(10, 20) -> \"0b1111\"\n# rounded_avg(20, 33) -> \"0b11010\"\n\n# Testing the function\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\"\nassert rounded_avg(0, 0) == \"0b0\"  # edge case with a single-element range\nassert rounded_avg(1, 1) == \"0b1\"  # edge case with a single-element range\nassert rounded_avg(1000, 1003) == \"0b1111101000\"  # testing with larger numbers"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\n    Args:\n    n (int): The size of the list to generate.\n\n    Returns:\n    list: A list where the value of the element at index i is either the factorial of i (if i is even)\n          or the sum of numbers from 1 to i (if i is odd).\n    \"\"\"\n    \n    # Function for calculating factorial\n    def factorial(x):\n        if x < 0:\n            raise ValueError(\"Factorial is not defined for negative numbers\")\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    # Function for calculating the sum of numbers from 1 to x\n    def sum_numbers(x):\n        if x < 0:\n            raise ValueError(\"Sum of numbers is not defined for negative numbers\")\n        return x * (x + 1) // 2  # Using the arithmetic series sum formula\n    \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    result = []  # Initialize the result list\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n\n    return result\n\n# Testing function f\ndef test_f():\n    assert f(5) == [1, 2, 6, 24, 15], \"Test case 1 failed\"\n    assert f(0) == [], \"Test case 2 failed\"\n    assert f(1) == [1], \"Test case 3 failed\"\n    assert f(2) == [1, 2], \"Test case 4 failed\"\n    try:\n        f(-1)\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-negative integer\", \"Test case 5 failed\"\n    try:\n        f(3.5)\n    except ValueError as e:\n        assert str(e) == \"Input must be a non-negative integer\", \"Test case 6 failed\"\n    print(\"All test cases passed\")\n\ntest_f()"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Takes a non-negative integer and returns a list of the first n prime numbers that are less than n.\n    \n    Args:\n    n (int): The upper limit (non-inclusive) for the prime numbers to be included in the list.\n    \n    Returns:\n    List[int]: A list of prime numbers less than n.\n    \n    Examples:\n    count_up_to(5) -> [2, 3]\n    count_up_to(11) -> [2, 3, 5, 7]\n    count_up_to(0) -> []\n    count_up_to(20) -> [2, 3, 5, 7, 11, 13, 17, 19]\n    count_up_to(1) -> []\n    count_up_to(18) -> [2, 3, 5, 7, 11, 13, 17]\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    # Validate input\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n            \n    return primes\n\n# Example usage for testing:\nif __name__ == \"__main__\":\n    print(count_up_to(5))  # [2, 3]\n    print(count_up_to(11))  # [2, 3, 5, 7]\n    print(count_up_to(0))  # []\n    print(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\n    print(count_up_to(1))  # []\n    print(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    Determines if it is possible to sort an array in non-decreasing order by performing\n    any number of right shift operations.\n    \n    Args:\n    arr (list): A list of unique integers in random order.\n    \n    Returns:\n    bool: True if the array can be sorted by right shifts, False otherwise.\n    \n    Examples:\n    move_one_ball([3, 4, 5, 1, 2]) -> True  # Can be sorted with 2 right shifts\n    move_one_ball([3, 5, 4, 1, 2]) -> False # Cannot be sorted with any number of right shifts\n    \n    Notes:\n    - The function returns True if the input array is empty.\n    \"\"\"\n\n    # Error handling for invalid inputs\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list\")\n        \n    # Empty list is always sorted  \n    if len(arr) == 0:\n        return True\n\n    # Find the index where the array is \"broken\" - where arr[i] > arr[i + 1]\n    break_point = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            if break_point == -1:\n                break_point = i\n            else:\n                # If we find more than one breaking point, it's not possible by right shifts\n                return False\n\n    # If no breaking point found, the array is already sorted\n    if break_point == -1:\n        return True\n\n    # Check if array without break_point refers back to beginning\n    if arr[-1] > arr[0]:\n        return False\n\n    # Compare the two segments to ascertain if it's sorted\n    if arr[break_point] <= arr[-1] and arr[0] >= arr[break_point + 1]:\n        return True\n\n    return False\n\n# Unit Test Functions\ndef test_move_one_ball():\n    assert move_one_ball([3, 4, 5, 1, 2]) == True, \"Test case 1 failed.\"\n    assert move_one_ball([3, 5, 4, 1, 2]) == False, \"Test case 2 failed.\"\n    assert move_one_ball([]) == True, \"Test case 3 failed.\"\n    assert move_one_ball([1]) == True, \"Test case 4 failed.\"\n    assert move_one_ball([1, 3, 2]) == False, \"Test case 5 failed.\"\n    assert move_one_ball([2, 1]) == True, \"Test case 6 failed.\"\n    assert move_one_ball([1, 2, 3, 4, 5]) == True, \"Test case 7 failed.\"\n    print(\"All test cases pass\")\n    \n# Run unit tests\ntest_move_one_ball()"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return ['One']\n    \"\"\"\n    \n    # Mapping of integers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter the list to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered list\n    filtered_arr.sort()\n    \n    # Reverse the sorted list\n    filtered_arr.reverse()\n    \n    # Replace each number with its corresponding name\n    result = [num_to_name[num] for num in filtered_arr]\n    \n    return result\n\n# Example Unit Tests\ndef test_by_length():\n    # Test with a simple example\n    assert by_length([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n    # Test with an empty array\n    assert by_length([]) == []\n    \n    # Test with a strange number\n    assert by_length([1, -1, 55]) == ['One']\n    \n    # Test with all elements out of range\n    assert by_length([-5, 0, 10, 55]) == []\n    \n    # Test with all valid elements\n    assert by_length([3, 4, 2, 1, 5, 8, 7, 9, 6]) == [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\"]\n    \n    # Test with multiple instances of valid numbers\n    assert by_length([1, 1, 1, 1, 1, 1, 1, 1]) == [\"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\", \"One\"]\n    \n    print(\"All tests passed!\")\n\n# Run the unit tests\ntest_by_length()"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between lst1 and lst2\n    to make lst1 a list of only even numbers. There is no limit on the number of exchanged elements \n    between lst1 and lst2.\n\n    Args:\n    lst1 (list): The first list of numbers.\n    lst2 (list): The second list of numbers.\n\n    Returns:\n    str: \"YES\" if it is possible to make all elements of lst1 even, otherwise \"NO\".\n    \"\"\"\n    \n    # Validate that the inputs are lists\n    if not isinstance(lst1, list) or not isinstance(lst2, list):\n        raise TypeError(\"Both inputs must be lists\")\n\n    # Validate that the lists are non-empty\n    if not lst1 or not lst2:\n        raise ValueError(\"Both input lists must be non-empty\")\n    \n    # Separate the lists into even and odd numbers\n    lst1_even = [x for x in lst1 if x % 2 == 0]\n    lst1_odd = [x for x in lst1 if x % 2 != 0]\n    lst2_even = [x for x in lst2 if x % 2 == 0]\n    lst2_odd = [x for x in lst2 if x % 2 != 0]\n    \n    # If there are more evens in lst1 than combined evens in lst1 and lst2, return \"YES\"\n    if len(lst1_even) + len(lst2_even) >= len(lst1):\n        return \"YES\"\n    \n    # Otherwise, return \"NO\"\n    return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # \"NO\"\nprint(exchange([2, 4, 6], [1, 3, 5]))        # \"YES\"\nprint(exchange([1, 3, 5], [2, 4, 6]))        # \"YES\"\nprint(exchange([1, 3, 5], [7, 9, 11]))       # \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter(s) with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Args:\n    test (str): The string of space-separated lowercase letters.\n\n    Returns:\n    dict: A dictionary with key(s) being the letter(s) with the highest repetition \n          and value(s) being the corresponding count(s).\n          \n    Example:\n    >>> histogram('a b c')\n    {'a': 1, 'b': 1, 'c': 1}\n    >>> histogram('a b b a')\n    {'a': 2, 'b': 2}\n    >>> histogram('a b c a b')\n    {'a': 2, 'b': 2}\n    >>> histogram('b b b b a')\n    {'b': 4}\n    >>> histogram('')\n    {}\n    \"\"\"\n\n    # Step 1: Validate input type\n    if not isinstance(test, str):\n        raise ValueError(\"Input must be a string\")\n\n    # Step 2: Split the string by spaces to get the individual letters\n    letters = test.split()\n    \n    # Step 3: Create a dictionary to store the frequency of each letter\n    frequency = {}\n    for letter in letters:\n        if letter in frequency:\n            frequency[letter] += 1\n        else:\n            frequency[letter] = 1\n    \n    # Step 4: Find the maximum frequency value(s)\n    if not frequency:\n        return {}\n\n    max_frequency = max(frequency.values())\n    result = {letter: freq for letter, freq in frequency.items() if freq == max_frequency}\n\n    return result\n\n# Edge cases testing\nassert histogram('a b c d e f g h i j') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1}\nassert histogram('') == {}\nassert histogram('a a a a b b b b c c c') == {'a': 4, 'b': 4}\nassert histogram('d e f g h d d e g g') == {'d': 3, 'g': 3}\nassert histogram('a    a  ') == {'a': 2}\nassert histogram('z') == {'z': 1}\nassert histogram('k k k k k k k k k') == {'k': 9}"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array of nums.\n    \n    Args:\n    nums (list): List of integers.\n    \n    Returns:\n    int: The minimum sum of any non-empty sub-array.\n    \n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) -> 1\n    minSubArraySum([-1, -2, -3]) -> -6\n    \"\"\"\n    \n    # Check if input is a valid list of integers\n    if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums):\n        raise ValueError(\"Input must be a list of integers\")\n\n    # Edge case: empty list\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n\n    # Initialize variables for the algorithm\n    current_min = nums[0]\n    global_min = nums[0]\n\n    for num in nums[1:]:\n        current_min = min(num, current_min + num)\n        if current_min < global_min:\n            global_min = current_min\n\n    return global_min\n\n# Unit tests\ndef test_minSubArraySum():\n    assert minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    assert minSubArraySum([-1, -2, -3]) == -6\n    assert minSubArraySum([1]) == 1\n    assert minSubArraySum([-1]) == -1\n    assert minSubArraySum([0]) == 0\n    assert minSubArraySum([3, -4, 2, -3]) == -4\n    \n    # Multiple same elements\n    assert minSubArraySum([2, 2, 2, 2]) == 2\n    \n    # All elements positive, single element should be the residue\n    assert minSubArraySum([1, 2, 3, 4, 5]) == 1\n    \n    # All elements negative, must take the whole array\n    assert minSubArraySum([-1, -2, -3, -4]) == -10\n    \n    # Mixed elements\n    assert minSubArraySum([1, -2, 3, -4, 5, -6]) == -6\n    \n    # Large input\n    large_input = [i for i in range(-1000, 1001)]\n    assert minSubArraySum(large_input) == -500500\n\n    print(\"All test cases pass\")\n\n# Run tests\ntest_minSubArraySum()"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\n    Args:\n    arr (List[int]): The array of integers to check.\n\n    Returns:\n    int: The count of elements where the sum of its digits is greater than 0.\n    \n    Examples:\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    def digit_sum(n):\n        \"\"\"\n        Helper function to compute the sum of the digits of a number.\n        If the number is negative, considers the first digit as negative followed by positive digits.\n        \n        Args:\n        n (int): The number to process.\n        \n        Returns:\n        int: The sum of the digits.\n        \"\"\"\n        sum_digits = 0\n        str_n = str(n)\n        if str_n[0] == '-':\n            sum_digits = -int(str_n[1])  # The first digit should be negative if number is negative\n            str_n = str_n[2:]  # Remove sign and first digit from the string\n        else:\n            str_n = str_n[1:]  # Remove first digit from the string\n        \n        for digit in str_n:\n            sum_digits += int(digit)\n        \n        return sum_digits\n\n    count = 0\n    \n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n    \n    return count\n\n# Test cases to validate the function\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element of the output should be a string similar to \"the number of odd elements \n    in the string i of the input.\" where all the i's should be replaced by the number of \n    odd digits in the i-th string of the input.\n\n    Args:\n    lst (list): List of strings where each string consists only of digits.\n\n    Returns:\n    list: List of strings with the format described in the docstring.\n    \n    Raises:\n    ValueError: If any element in the input list is not a string consisting of digits.\n    \n    Examples:\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3', '11111111'])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    \n    output = []\n    for s in lst:\n        if not s.isdigit():\n            raise ValueError(f\"All elements of the input list must be strings consisting only of digits. Invalid element: {s}\")\n        \n        odd_count = sum(1 for ch in s if int(ch) % 2 != 0)\n        result = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        output.append(result)\n    \n    return output\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional edge cases\n    assert odd_count(['']) == [\"the number of odd elements 0n the str0ng 0 of the 0nput.\"]\n    assert odd_count(['2', '4', '8', '0']) == [\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\",\n        \"the number of odd elements 0n the str0ng 0 of the 0nput.\"\n    ]\n    assert odd_count(['7', '9', '13579']) == [\n        \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n        \"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n        \"the number of odd elements 5n the str5ng 5 of the 5nput.\"\n    ]\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Args:\n    arr (list): A list of integers.\n    k (int): A positive integer denoting the number of maximum elements to return.\n\n    Returns:\n    list: A sorted list of length k with the maximum k numbers in arr.\n\n    Raises:\n    ValueError: If k is negative or greater than the length of the array.\n\n    Example:\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n    \"\"\"\n\n    # Check if k is within a valid range\n    if k < 0 or k > len(arr):\n        raise ValueError(\"k must be a non-negative integer and less than or equal to the length of arr\")\n\n    # Return an empty list if k is 0\n    if k == 0:\n        return []\n\n    # Use a heap to find the k largest elements\n    import heapq\n\n    # Find the k largest elements and then sort them\n    largest_k = heapq.nlargest(k, arr)\n    largest_k.sort()\n\n    return largest_k\n\n# Example usage:\n# print(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\n# print(maximum([4, -4, 4], 2))   # Output: [4, 4]\n# print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]\n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n\n    Args:\n    s (str): The original string.\n    c (str): The characters to be deleted from the original string.\n\n    Returns:\n    tuple: A tuple containing the result string and a boolean indicating whether the result string is a palindrome.\n\n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    \n    if not isinstance(s, str) or not isinstance(c, str):\n        raise ValueError(\"Both input arguments must be strings.\")\n    \n    # Create a set of characters to delete for faster membership checking\n    chars_to_delete = set(c)\n    \n    # Build the resulting string by excluding characters in 'c'\n    result = ''.join(char for char in s if char not in chars_to_delete)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result string and palindrome check\n    return (result, is_palindrome)\n\n# Example usage:\n# reverse_delete(\"abcde\", \"ae\") -> ('bcd', False)\n# reverse_delete(\"abcdef\", \"b\") -> ('acdef', False)\n# reverse_delete(\"abcdedcba\", \"ab\") -> ('cdedc', True)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Args:\n    n (int): The upper limit (inclusive) for finding palindrome numbers.\n    \n    Returns:\n    tuple: A tuple containing the count of even and odd palindromes respectively.\n    \n    Example:\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. One of them is even, and two of them are odd.\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Four of them are even, and 6 of them are odd.\n    \n    Note:\n        1. 1 <= n <= 10^3\n        2. Returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    \n    def is_palindrome(num):\n        \"\"\" Helper function to check if a number is a palindrome \"\"\"\n        str_num = str(num)\n        return str_num == str_num[::-1]\n    \n    # Initialize counters for even and odd palindromes\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through the range 1 to n (inclusive)\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_palindrome(3))  # Output should be (1, 2)\n# print(even_odd_palindrome(12)) # Output should be (4, 6)\n\n# Below are unit test cases that can be used to test this function\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(1) == (0, 1)\n    assert even_odd_palindrome(2) == (1, 1)\n    assert even_odd_palindrome(10) == (4, 5)\n    assert even_odd_palindrome(20) == (5, 9)\n    assert even_odd_palindrome(100) == (9, 18)\n    assert even_odd_palindrome(999) == (49, 90)\n    assert even_odd_palindrome(1000) == (49, 90)\n    print(\"All test cases pass\")\n\n# Uncomment below line to run tests\n# test_even_odd_palindrome()"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    \n    Args:\n    lst (list of str): A list containing exactly two strings of parentheses.\n    \n    Returns:\n    str: 'Yes' if there's a way to make a good string, and 'No' otherwise.\n    \n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n    \n    def is_balanced(s):\n        \"\"\"\n        Checks if the given string of parentheses is balanced.\n        \n        Args:\n        s (str): A string consisting of '(' and ')'.\n        \n        Returns:\n        bool: True if the string is balanced, False otherwise.\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')' and stack:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0\n\n    # Error handling: ensuring the input list has exactly two strings\n    if not isinstance(lst, list) or len(lst) != 2 or not all(isinstance(s, str) for s in lst):\n        raise ValueError(\"Input must be a list of exactly two strings.\")\n    \n    a, b = lst\n    \n    # Error handling: ensuring both strings consist of only '(' and ')'\n    if not all(c in '()' for c in a + b):\n        raise ValueError(\"Strings must consist of '(' and ')' only.\")\n\n    # Check all possible concatenations of the two strings\n    return 'Yes' if is_balanced(a + b) or is_balanced(b + a) else 'No'\n\n# Example usage:\nprint(match_parens(['()(', ')']))  # Should output 'Yes'\nprint(match_parens([')', ')']))    # Should output 'No'"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n\n    # Validation of inputs\n    if not isinstance(grid, list) or not grid:\n        raise ValueError(\"Grid must be a non-empty list.\")\n    if not all(isinstance(row, list) for row in grid):\n        raise ValueError(\"Grid must be a list of lists.\")\n    if any(len(row) != len(grid[0]) for row in grid):\n        raise ValueError(\"All rows in the grid must have the same length.\")\n    if not (1 <= capacity <= 10):\n        raise ValueError(\"Bucket capacity must be between 1 and 10.\")\n\n    total_water_units = 0\n\n    # Counting total units of water in the grid\n    for row in grid:\n        for cell in row:\n            if cell not in [0, 1]:\n                raise ValueError(\"Grid elements must be either 0 or 1.\")\n            total_water_units += cell\n   \n    # Calculate the number of buckets needed\n    if total_water_units == 0:\n        return 0\n    \n    num_buckets = math.ceil(total_water_units / capacity)\n    \n    return num_buckets\n\n\n# Test cases\nassert max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6\nassert max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5\nassert max_fill([[0, 0, 0], [0, 0, 0]], 5) == 0\nassert max_fill([[1, 1, 1], [1, 1 ,1], [1, 1, 1]], 3) == 3\n\n# Edge case tests\nassert max_fill([[0]], 1) == 0\nassert max_fill([[1]], 1) == 1\nassert max_fill([[1]], 10) == 1\n\n# Large input with lower bucket capacity\nassert max_fill([[1]*100 for _ in range(100)], 1) == 10000\n# Large input with higher bucket capacity\nassert max_fill([[1]*100 for _ in range(100)], 10) == 1000\n\nprint(\"All test cases passed!\")\n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all \n    elements that do not have any even digit.\n    \n    Arguments:\n    x (list): A list of positive integers.\n    \n    Returns:\n    list: A sorted list of integers containing no even digits.\n    \n    Example Usage:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(num):\n        \"\"\"\n        Helper function to determine if a number contains any even digits.\n        \n        Arguments:\n        num (int): The number to check.\n        \n        Returns:\n        bool: True if the number contains at least one even digit, False otherwise.\n        \"\"\"\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num //= 10\n        return False\n    \n    # Validate input\n    if not isinstance(x, list) or not all(isinstance(i, int) and i > 0 for i in x):\n        raise ValueError(\"Input must be a list of positive integers.\")\n    \n    # Filter out numbers with even digits and sort the result\n    result = sorted([num for num in x if not has_even_digit(num)])\n    \n    return result\n\n# Example usage:\n# unique_digits([15, 33, 1422, 1]) -> [1, 15, 33]\n# unique_digits([152, 323, 1422, 10]) -> []\n\n# Unit tests\nassert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\nassert unique_digits([152, 323, 1422, 10]) == []\nassert unique_digits([5, 7, 9]) == [5, 7, 9]\nassert unique_digits([21, 31, 41]) == []\nassert unique_digits([135, 157, 139]) == [135, 139, 157]\nassert unique_digits([1]) == [1]\n\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Ensure 'k' is within the bounds\n    if k > len(arr):\n        raise ValueError(\"k should be less than or equal to the length of the array\")\n        \n    # Initialize sum to zero\n    total_sum = 0\n    \n    # Iterate through the first 'k' elements\n    for i in range(k):\n        element = arr[i]\n        # Check if the element has at most two digits (absolute value)\n        if -99 <= element <= 99:\n            total_sum += element\n            \n    return total_sum\n\n# Unit Tests\ndef test_add_elements():\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24, \"Test case 1 failed\"\n    assert add_elements([1, 2, 3, 4, 5], 3) == 6, \"Test case 2 failed\"\n    assert add_elements([10, 99, 100, 101], 4) == 109, \"Test case 3 failed\"\n    assert add_elements([101], 1) == 0, \"Test case 4 failed\"  # no valid two-digit numbers\n    assert add_elements([-10, -20, -30], 3) == -60, \"Test case 5 failed\"  # negative two-digit numbers included\n    assert add_elements([50], 1) == 50, \"Test case 6 failed\"  # single element\n    assert add_elements([0, 100, 200], 2) == 0, \"Test case 7 failed\"  # Zero is also a valid two-digit number\n    print(\"All test cases passed!\")\n\n# Run the unit tests\ntest_add_elements()"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from\n    string s that contain exactly n consonants, in the order these words appear in the string s.\n    \n    Args:\n    s (str): The input string containing words separated by spaces.\n    n (int): A natural number representing the required number of consonants.\n    \n    Returns:\n    list: A list of words from the input string that contain exactly n consonants.\n    \n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Consonant count n must be a natural number\")\n    \n    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n# Example usage and testing\nif __name__ == \"__main__\":\n    # Example cases\n    print(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n    print(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n    print(select_words(\"simple white space\", 2))  # Output: []\n    print(select_words(\"Hello world\", 4))  # Output: [\"world\"]\n    print(select_words(\"Uncle sam\", 3))  # Output: [\"Uncle\"]\n\n    # Edge cases\n    print(select_words(\"\", 2))  # Output: []\n    print(select_words(\"a e i o u\", 1))  # Output: []\n    print(select_words(\"Bb Cc\", 2))  # Output: [\"Bb\", \"Cc\"]\n\n    # Testing invalid inputs\n    try:\n        print(select_words(1234, 2))\n    except ValueError as e:\n        print(e)  # Expected to raise a ValueError about input type\n    \n    try:\n        print(select_words(\"Test string\", 0))\n    except ValueError as e:\n        print(e)  # Expected to raise a ValueError about n being natural number\n\n    try:\n        print(select_words(\"Test string\", -1))\n    except ValueError as e:\n        print(e)  # Expected to raise a ValueError about n being natural number"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"\n    Finds the closest vowel that stands between two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Returns empty string if no such vowel is found or if \n    the given string is too short to have a vowel between two consonants.\n    \n    Args:\n    word (str): The input word.\n    \n    Returns:\n    str: The found vowel or an empty string if no such vowel exists.\n    \n    Raises:\n    TypeError: If input is not a string.\n    \n    Examples:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    if not isinstance(word, str):\n        raise TypeError(\"Input must be a string\")\n    \n    vowels = set(\"AEIOUaeiou\")\n    \n    # Check for any valid positions\n    n = len(word)\n    if n < 3:\n        return \"\"\n    \n    # Iterate from right to left, ignoring the first and last character\n    index = n - 2  # Start from the second last character\n    while index > 0:\n        if word[index] in vowels:\n            if word[index - 1] not in vowels and word[index + 1] not in vowels:\n                return word[index]\n        index -= 1\n        \n    return \"\""}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this function, you have to sort an array of non-negative integers according to\n    the number of ones in their binary representation in ascending order.\n    For similar numbers of ones, sort based on decimal value.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    list: A sorted list of integers.\n    \n    It must be implemented as follows:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    \"\"\"\n    \n    # Error handling\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list\")\n    for item in arr:\n        if not isinstance(item, int):\n            raise ValueError(\"All elements in the list must be integers\")\n    \n    def sort_key(x):\n        \"\"\"\n        Key function for sorting:\n        1. Number of ones in the binary representation of the absolute value of x (ascending).\n        2. Decimal value of x (ascending) for ties.\n\n        Args:\n        x (int): Integer to provide the sorting key for.\n\n        Returns:\n        tuple: Sorting key as a tuple (number_of_ones, decimal_value).\n        \"\"\"\n        if x < 0:\n            return (bin(x + (1 << 32)).count('1'), x)  # For negative numbers\n        return (bin(x).count('1'), x)\n\n    return sorted(arr, key=sort_key)\n\n# Example usage\nprint(sort_array([1, 5, 2, 3, 4])) # prints [1, 2, 4, 3, 5]\nprint(sort_array([-2, -3, -4, -5, -6])) # prints [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4])) # prints [0, 1, 2, 4, 3]\n\n# Testing\ndef test_sort_array():\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert sort_array([7, 8, 6, 5, 3]) == [8, 3, 5, 6, 7]\n    assert sort_array([15, 23, 8, 3, 29]) == [8, 3, 15, 23, 29]\n    \n    try:\n        sort_array(\"not a list\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a list\"\n    \n    try:\n        sort_array([1, 2, \"not an integer\", 4])\n    except ValueError as e:\n        assert str(e) == \"All elements in the list must be integers\"\n    \ntest_sort_array()\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    An 'even position' refers to indices 0, 2, 4, etc.\n\n    Args:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of odd integers at even positions.\n    \n    Examples:\n    solution([5, 8, 7, 1]) => 12\n    solution([3, 3, 3, 3, 3]) => 9\n    solution([30, 13, 24, 321]) => 0\n    \"\"\"\n    \n    # Check if the input is a list of integers\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n    if not all(isinstance(i, int) for i in lst):\n        raise ValueError(\"All elements of the list must be integers\")\n    \n    # Iterate through list and sum the odd elements at even indices\n    total_sum = 0\n    for i in range(0, len(lst), 2):  # Only even indices\n        if lst[i] % 2 != 0:  # Check if the number is odd\n            total_sum += lst[i]\n    \n    return total_sum\n\n# Unit tests\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    \n    def test_example_cases(self):\n        self.assertEqual(solution([5, 8, 7, 1]), 12)\n        self.assertEqual(solution([3, 3, 3, 3, 3]), 9)\n        self.assertEqual(solution([30, 13, 24, 321]), 0)\n    \n    def test_empty_list(self):\n        # Not a valid input as per the problem statement (non-empty list)\n        with self.assertRaises(ValueError):\n            solution([])\n    \n    def test_single_element(self):\n        self.assertEqual(solution([1]), 1)\n        self.assertEqual(solution([2]), 0)\n    \n    def test_all_even_positions_even_numbers(self):\n        self.assertEqual(solution([2, 4, 6, 8]), 0)\n    \n    def test_all_even_positions_odd_numbers(self):\n        self.assertEqual(solution([1, 3, 5, 7, 9]), 15)\n    \n    def test_list_with_negative_numbers(self):\n        self.assertEqual(solution([-1, -2, -3, -4, -5]), -9)\n    \n    def test_large_list(self):\n        # Test with a larger list to ensure scalability\n        large_list = list(range(10000))  # List of numbers from 0 to 9999\n        result = solution(large_list)  # Sum of all odd numbers at even positions\n        self.assertEqual(result, sum(x for x in range(0, 10000, 2) if x % 2 != 0))\n    \n    def test_input_type_errors(self):\n        with self.assertRaises(ValueError):\n            solution(\"not a list\")\n        with self.assertRaises(ValueError):\n            solution([1, 2, \"three\"])\n\n# Run the unit tests\nunittest.main(argv=[''], exit=False)\n"}
{"task_id": "HumanEval/124", "completion": "import re\nfrom datetime import datetime\n\ndef valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid otherwise False.\n    \n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. \n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    Args:\n    date (str): The date string to be validated.\n    \n    Returns:\n    bool: True if the date is valid, False otherwise.\n    \n    Example:\n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Rule 1: Check if the date string is empty\n    if not date:\n        return False\n\n    # Rule 4: Check the format using regex\n    date_pattern = re.compile(r'^(0[1-9]|1[0-2])-([0-2][0-9]|3[01])-\\d{4}$')\n    if not date_pattern.match(date):\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    # Rule 3: Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Rule 2: Validate the day ranges for each month\n    if month in {4, 6, 9, 11} and day > 30:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12} and day > 31:\n        return False\n    if month == 2:\n        leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)\n        if day > (29 if leap_year else 28):\n            return False\n\n    try:\n        # Additional check if the parsed date is actually valid using `datetime.date`.\n        _ = datetime(year=year, month=month, day=day)\n    except ValueError:\n        return False\n\n    return True\n\n# Example usage:\n# print(valid_date('03-11-2000'))  # True\n# print(valid_date('15-01-2012'))  # False\n# print(valid_date('04-0-2040'))   # False\n# print(valid_date('06-04-2020'))  # True\n# print(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    \n    Args:\n    lst (list): A list of numbers.\n    \n    Returns:\n    int: The sum of squared numbers after rounding each element to the upper int.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of numbers\")\n\n    sum_squared = 0\n    \n    # Iterate through each number in the list\n    for num in lst:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"All elements in the list must be either integers or floats\")\n        \n        # Round up to the nearest whole number\n        rounded_num = math.ceil(num)\n        \n        # Square the rounded number and add to the sum\n        sum_squared += rounded_num ** 2\n        \n    return sum_squared\n\n# Example usage:\n# print(sum_squares([1, 2, 3])) # Output: 14\n# print(sum_squares([1, 4, 9])) # Output: 98\n# print(sum_squares([1, 3, 5, 7])) # Output: 84\n# print(sum_squares([1.4, 4.2, 0])) # Output: 29\n# print(sum_squares([-2.4, 1, 1])) # Output: 6\n"}
{"task_id": "HumanEval/125", "completion": "import re\n\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exist in the text you\n    should split on commas ',' if no commas exist you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\n    Args:\n    txt (str): The input string of words.\n\n    Returns:\n    list: A list of words split based on the conditions or an int if no split can be made.\n\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") \u279e 3 \n    '''\n    \n    if not isinstance(txt, str):\n        raise TypeError(\"Input must be a string\")\n\n    # If text contains whitespace, split on whitespace\n    if re.search(r'\\s', txt):\n        return txt.split()\n    \n    # If text contains commas and not whitespaces, split on commas\n    if ',' in txt:\n        return txt.split(',')\n    \n    # If neither whitespace nor commas exist, count lower-case letters with odd order in the alphabet\n    odd_order_count = sum(1 for ch in txt if 'a' <= ch <= 'z' and (ord(ch) - ord('a')) % 2 == 1)\n    return odd_order_count\n\n# Unit tests\ndef test_split_words():\n    # Test cases with whitespace\n    assert split_words(\"Hello world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"A quick brown fox.\") == [\"A\", \"quick\", \"brown\", \"fox.\"]\n    \n    # Test cases with commas\n    assert split_words(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    assert split_words(\"apple,orange,banana\") == [\"apple\", \"orange\", \"banana\"]\n    \n    # Test cases with neither whitespace nor commas\n    assert split_words(\"abcdef\") == 3  # 'b', 'd', 'f' -> 3 odd ordered lower-case letters\n    assert split_words(\"xyz\") == 1  # 'y' -> 1 odd ordered lower-case letter\n    assert split_words(\"ABCDEF\") == 0  # No lower-case letters\n    \n    # Test cases with different data types\n    try:\n        split_words(12345)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n\n    try:\n        split_words(None)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n\ntest_split_words()\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Args:\n    arr (list): List of integers.\n\n    Returns:\n    int or None: The computed result or None if the list is empty.\n    \n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    # Check if the array is empty\n    if not arr:\n        return None\n\n    # Initialize variables to hold the sum of magnitudes and product of signs\n    magnitude_sum = 0\n    sign_product = 1  # Start with 1 as the multiplicative identity\n\n    # Iterate over the array to compute the magnitude sum and sign product\n    for num in arr:\n        magnitude_sum += abs(num)\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n\n    # Final result is magnitude sum multiplied by sign product\n    return magnitude_sum * sign_product\n\n# Example usage and testing\nif __name__ == \"__main__\":\n    # Test cases\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([-1, -2, -2, 4]) == -9\n    assert prod_signs([1, 2, 3]) == 6\n    assert prod_signs([-1, -2, -3]) == -6\n    assert prod_signs([]) == None\n    assert prod_signs([0, 0, 0]) == 0\n    \n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Args:\n    string (str): A string containing only square brackets.\n\n    Returns:\n    bool: True if there exists a nested subsequence, False otherwise.\n    '''\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n\n    # To keep track of the balance of brackets and check nesting\n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                if stack[-1] == '[':\n                    stack.pop()\n            else:\n                # More closing brackets than opening brackets which is invalid\n                return False\n\n    # Valid sub-sequences with nesting, like '[[]]', have empty stack approach\n    nested = string.find('][') == -1 and len(stack) == 0\n    return nested and string.count('[') > 1 and string.count(']') > 1\n\n# Example usage:\n# is_nested('[[]]') \u279e True\n# is_nested('[]]]]]]][[[[[]') \u279e False\n# is_nested('[][]') \u279e False\n# is_nested('[]') \u279e False\n# is_nested('[[][]]') \u279e True\n# is_nested('[[]][[') \u279e True"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    Args:\n    n (int): A positive integer.\n    \n    Returns:\n    int: The product of the odd digits, or 0 if all digits are even.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \n    Examples:\n    >>> digits(1)\n    1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\n    # Check for valid input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # List to store odd digits\n    odd_digits = []\n    \n    # Iterate over each digit in the integer\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            odd_digits.append(digit)\n    \n    # If no odd digits were found, return 0\n    if not odd_digits:\n        return 0\n    \n    # Calculate the product of all odd digits\n    product = 1\n    for digit in odd_digits:\n        product *= digit\n    \n    return product\n\n\n# Example usage:\n# print(digits(1))   # Outputs: 1\n# print(digits(4))   # Outputs: 0\n# print(digits(235)) # Outputs: 15\n\n# Unit Tests\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123456789) == 945  # Odd digits are 1, 3, 5, 7, 9\n    assert digits(2222) == 0         # No odd digits\n    assert digits(13579) == 945      # All digits are odd\n    assert digits(2468) == 0         # All digits are even\n    \n    try:\n        digits(-1)\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive integer\"\n    else:\n        assert False  # Expected a ValueError\n\n    try:\n        digits(0)\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive integer\"\n    else:\n        assert False  # Expected a ValueError\n\n    try:\n        digits(\"123\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive integer\"\n    else:\n        assert False  # Expected a ValueError\n\n# Running tests\ntest_digits()\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Generates the first n + 1 numbers of the Tribonacci sequence.\n\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\n    Args:\n    n (int): The input number, must be a non-negative integer.\n\n    Returns:\n    list: A list containing the first n + 1 numbers of the Tribonacci sequence.\n    \n    Raises:\n    ValueError: If n is not a non-negative integer.\n    \n    Examples:\n    tri(3) -> [3, 2, 3, 8]\n    \"\"\"\n\n    # Input validation\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Base cases and pre-conditions\n    if n == 0:\n        return [3]\n    \n    # Supporting function to handle recursion efficiently using memoization\n    memo = {1: 3}\n\n    def tribonacci(k):\n        if k in memo:\n            return memo[k]\n\n        if k % 2 == 0:\n            result = 1 + k // 2\n        else:\n            result = tribonacci(k - 1) + tribonacci(k - 2) + tribonacci(k + 1)\n        \n        memo[k] = result\n        return result\n\n    # Generate the sequence by evaluating the function for each index\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(tribonacci(i + 1))\n\n    return sequence\n\n# Unit tests\nassert tri(0) == [3], \"Test case 0 failed\"\nassert tri(1) == [3, 2], \"Test case 1 failed\"\nassert tri(2) == [3, 2, 3], \"Test case 2 failed\"\nassert tri(3) == [3, 2, 3, 8], \"Test case 3 failed\"\nassert tri(4) == [3, 2, 3, 8, 3], \"Test case 4 failed\"\nassert tri(5) == [3, 2, 3, 8, 3, 4], \"Test case 5 failed\"\n\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \n    Args:\n    lst (list): A list of integers.\n    \n    Returns:\n    bool: True if the list is sorted in ascending order with no more than one duplicate of the same number, False otherwise.\n    \n    Examples:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"The input must be a list of integers.\")\n    \n    if len(lst) < 2:\n        return True\n\n    duplicate_count = {}\n    \n    for i in range(len(lst) - 1):\n        if not isinstance(lst[i], int) or not isinstance(lst[i+1], int):\n            raise ValueError(\"The input list must contain only integers.\")\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            if lst[i] in duplicate_count:\n                return False\n            duplicate_count[lst[i]] = 1\n\n    # Check the last element\n    if isinstance(lst[-1], int):\n        if lst[-1] in duplicate_count:\n            return False\n\n    return True\n\n# Example usage and testing:\nprint(is_sorted([5]))              # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. Returned list is sorted in increasing order.\n\n    Args:\n    n (int): A positive integer to start the Collatz sequence.\n\n    Returns:\n    list: A sorted list of odd numbers in the Collatz sequence.\n    \n    Raises:\n    ValueError: If n is not a positive integer.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Handle error case where n is not a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    odd_numbers = set()  # Use a set to avoid duplicates and facilitate sorting at the end\n\n    while n != 1:\n        if n % 2 == 1:  # If n is odd\n            odd_numbers.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n\n    odd_numbers.add(1)  # The sequence always ends with 1, which is odd\n    return sorted(odd_numbers)  # Return a sorted list from the set\n\n# Example unit tests\ndef test_get_odd_collatz():\n    # Basic tests\n    assert get_odd_collatz(1) == [1], \"Test case 1 failed\"\n    assert get_odd_collatz(5) == [1, 5], \"Test case 2 failed\"\n    assert get_odd_collatz(7) == [1, 5, 7], \"Test case 3 failed\"\n\n    # Edge cases\n    try:\n        get_odd_collatz(0)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Test case 4 failed: ValueError not raised for n=0\"\n\n    try:\n        get_odd_collatz(-3)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Test case 5 failed: ValueError not raised for n=-3\"\n    \n    try:\n        get_odd_collatz(3.5)\n    except ValueError:\n        pass\n    else:\n        assert False, \"Test case 6 failed: ValueError not raised for n=3.5\"\n    \n    print(\"All test cases passed!\")\n    \n# Run tests\ntest_get_odd_collatz()"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    \"\"\"\n    Checks if a given number n is prime.\n    \n    Args:\n    n (int): The number to be checked.\n    \n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Determines whether the length of intersection of two intervals is a prime number.\n    \n    Args:\n    interval1 (tuple): The first interval (start, end).\n    interval2 (tuple): The second interval (start, end).\n    \n    Returns:\n    str: \"YES\" if the length of the intersection is a prime number, \"NO\" otherwise.\n    \"\"\"\n    # Extract the start and end points of the intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if there is an intersection\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    \n    return \"NO\""}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    Args:\n    a: int, float, or str - The first value to compare.\n    b: int, float, or str - The second value to compare.\n\n    Returns:\n    The larger value in its given variable type. If both values are equal, return None.\n    \"\"\"\n\n    def convert_to_number(value):\n        \"\"\"Helper function to convert string to float, handling both '.' and ',' as decimal points.\"\"\"\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                return float(value)\n            except ValueError:\n                raise ValueError(f\"Cannot convert string {value} to float.\")\n        return value\n\n    def validate_input(value):\n        \"\"\"Checks if the input is of valid type.\"\"\"\n        if not isinstance(value, (int, float, str)):\n            raise TypeError(\"Input values must be either int, float, or str.\")\n\n    # Validate inputs\n    validate_input(a)\n    validate_input(b)\n\n    # Convert to numbers for comparison\n    num_a = convert_to_number(a)\n    num_b = convert_to_number(b)\n\n    # Compare numbers\n    if num_a > num_b:\n        return a\n    elif num_b > num_a:\n        return b\n    else:\n        return None\n\n# Unit tests\ndef test_compare_one():\n    assert compare_one(1, 2.5) == 2.5\n    assert compare_one(1, \"2,3\") == \"2,3\"\n    assert compare_one(\"5,1\", \"6\") == \"6\"\n    assert compare_one(\"1\", 1) == None\n    assert compare_one(3, 3) == None\n    assert compare_one(\"3,2\", 3.5) == 3.5\n    assert compare_one(\"3.2\", \"3,2\") == None\n    print(\"All tests passed.\")\n\ntest_compare_one()"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n\n    Args:\n    n (int): The number to evaluate.\n\n    Returns:\n    bool: True if n can be expressed as the sum of 4 positive even numbers, False otherwise.\n    \n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n\n    # Ensure the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # A positive even number can be written as the sum of four positive even numbers\n    # if and only if it is >= 8. This is because the smallest 4 positive even numbers\n    # are 2, 2, 2, and 2, and their sum is 8.\n    if n < 8:\n        return False\n    \n    # For numbers 8 and above, it is always possible to construct them as\n    # the sum of four positive even numbers.\n    return n % 2 == 0\n\n# Testing function to cover various cases\ndef test_is_equal_to_sum_even():\n    try:\n        assert is_equal_to_sum_even(4) == False, \"Test Case 1 Failed\"\n        assert is_equal_to_sum_even(6) == False, \"Test Case 2 Failed\"\n        assert is_equal_to_sum_even(8) == True, \"Test Case 3 Failed\"\n        assert is_equal_to_sum_even(10) == True, \"Test Case 4 Failed\"\n        assert is_equal_to_sum_even(12) == True, \"Test Case 5 Failed\"\n        assert is_equal_to_sum_even(0) == False, \"Test Case 6 Failed\"  # Edge case of zero\n        assert is_equal_to_sum_even(-4) == False, \"Test Case 7 Failed\"  # Negative number\n        assert is_equal_to_sum_even(\"10\") == False, \"Test Case 8 Failed\"  # Non-integer input\n    except ValueError:\n        pass  # Expected for invalid inputs\n    except AssertionError as ae:\n        print(str(ae))\n    else:\n        print(\"All test cases passed!\")\n\n# Run tests\ntest_is_equal_to_sum_even()"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal to the element \n    immediately preceding it. If no such element exists, returns -1. The given array will not \n    contain duplicate values.\n    \n    Args:\n    arr (list of int): The array of integers to check.\n    \n    Returns:\n    int: The largest index where the element is not greater than or equal to the preceding element \n         or -1 if no such element exists.\n    \"\"\"\n    # Input validation\n    if not isinstance(arr, list):\n        raise ValueError(\"Input should be a list.\")\n    if not all(isinstance(i, int) for i in arr):\n        raise ValueError(\"All elements in the array should be integers.\")\n    \n    # Traverse the list from second last to the first element to find the largest such index\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    \n    # If no such element found, return -1\n    return -1"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    Args:\n    n (int): A positive integer to calculate its Brazilian factorial.\n\n    Returns:\n    int: The Brazilian factorial of the input integer.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n    \"\"\"\n    from math import factorial\n\n    # Error Handling: Check if input is a positive integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer\")\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer greater than 0\")\n\n    # Calculate Brazilian factorial\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result\n\n# Unit Tests\n\ndef test_special_factorial():\n    \"\"\"Test cases for special_factorial function.\"\"\"\n    assert special_factorial(1) == 1, \"Test Case 1 Failed\"\n    assert special_factorial(2) == 2, \"Test Case 2 Failed\"  # 2! * 1! = 2\n    assert special_factorial(3) == 12, \"Test Case 3 Failed\"  # 3! * 2! * 1! = 6 * 2 * 1 = 12\n    assert special_factorial(4) == 288, \"Test Case 4 Failed\"  # 4! * 3! * 2! * 1! = 24 * 6 * 2 * 1 = 288\n    assert special_factorial(5) == 34560, \"Test Case 5 Failed\"  # 5! * 4! * 3! * 2! * 1! = 120 * 24 * 6 * 2 * 1 = 34560\n\n    print(\"All test cases passed!\")\n\n# Run tests\ntest_special_factorial()"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    Args:\n    nums (list of int): List of integers to be sorted.\n\n    Returns:\n    list of int: Sorted list based on the sum of digits and original index order.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        \"\"\"\n        Calculate the sum of the digits of an integer\n        Args:\n        n (int): The integer whose digit sum is to be calculated\n\n        Returns:\n        int: The sum of the digits of the integer\n        \"\"\"\n        # Work with the absolute value to ensure correct sum of digits\n        return sum(int(digit) for digit in str(abs(n)))\n\n    try:\n        # Enumerate to maintain original indices\n        enumerated_nums = list(enumerate(nums))\n        # Sort using the digit_sum as the primary key, and index as the secondary key\n        sorted_nums = sorted(enumerated_nums, key=lambda x: (digit_sum(x[1]), x[0]))\n        # Return only the values, preserving the original order where necessary\n        return [num[1] for num in sorted_nums]\n    except TypeError:\n        raise TypeError(\"Input must be a list of integers\")\n\n# Example usage:\n# order_by_points([1, 11, -1, -11, -12]) -> [-1, -11, 1, -12, 11]\n# order_by_points([]) -> []"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"\n        Check if a number is a prime number.\n\n        Args:\n        n (int): The number to check.\n\n        Returns:\n        bool: True if the number is a prime number, False otherwise.\n        \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def filter_prime_length_words(words):\n        \"\"\"\n        Filter words by their length being a prime number.\n\n        Args:\n        words (list): The list of words to filter.\n\n        Returns:\n        list: The list of words whose lengths are prime numbers.\n        \"\"\"\n        return [word for word in words if is_prime(len(word))]\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter the words\n    prime_length_words = filter_prime_length_words(words)\n\n    # Join the words back into a sentence and return\n    return ' '.join(prime_length_words)\n\n# Example usage:\n# print(words_in_sentence(\"This is a test\")) -> \"is\"\n# print(words_in_sentence(\"lets go for swimming\")) -> \"go for\""}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Args:\n    grid (List[List[int]]): The grid with each cell containing a unique value in range [1, N*N].\n    k (int): The length of the path.\n\n    Returns:\n    List[int]: The values on the cells that the minimum path goes through.\n\n    Throws:\n    ValueError: If the grid is not valid or if k is not positive.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    from heapq import heappush, heappop\n    import sys\n\n    if not grid or not isinstance(grid, list) or not all(isinstance(row, list) for row in grid):\n        raise ValueError(\"Grid should be a non-empty matrix.\")\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"k should be a positive integer.\")\n\n    N = len(grid)\n    for row in grid:\n        if len(row) != N:\n            raise ValueError(\"Grid should be NxN.\")\n\n    # Initialize min heap with all cells; each cell is a starting point\n    min_heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(min_heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    # Possible directions to move in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    while min_heap:\n        current_value, x, y, path = heappop(min_heap)\n\n        # If path length is k, return the path\n        if len(path) == k:\n            return path\n\n        # Explore all possible moves\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heappush(min_heap, (new_path[0], nx, ny, new_path))\n\n    # Edge case for some unforeseen issues\n    return []\n\n# Testing for correctness and edge cases\nprint(minPath([[1,2,3],[4,5,6],[7,8,9]], 3))  # Expected [1, 2, 1]\nprint(minPath([[5,9,3],[4,1,6],[7,8,2]], 1))  # Expected [1]\nprint(minPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], 5))  # Expected some valid path of length 5\nprint(minPath([[10,5,15],[20,25,30],[35,40,45]], 2))  # Expected some valid path of length 2"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n and determines if the result is a whole number.\n\n    Args:\n    x (str): A string representing a fraction in the form <numerator>/<denominator>.\n    n (str): A string representing a fraction in the form <numerator>/<denominator>.\n\n    Returns:\n    bool: True if x * n evaluates to a whole number, and False otherwise.\n    \"\"\"\n\n    def parse_fraction(fraction):\n        \"\"\"\n        Parses a string representation of a fraction into its numerator and denominator.\n\n        Args:\n        fraction (str): A string representing a fraction in the form <numerator>/<denominator>.\n\n        Returns:\n        tuple: A tuple containing the numerator and the denominator as integers.\n        \"\"\"\n        # Split the fraction into numerator and denominator\n        num, denom = fraction.split('/')\n        # Convert strings to integers\n        return int(num), int(denom)\n    \n    # Parse both fractions x and n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n\n    # Calculate the resulting numerator and denominator after multiplication\n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n\n    # The result is a whole number if the denominator evenly divides the numerator\n    return result_num % result_denom == 0\n\n# Testing the function with examples and edge cases\n\n# Example usage\nprint(simplify(\"1/5\", \"5/1\"))  # Expected output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Expected output: False\nprint(simplify(\"7/10\", \"10/2\"))  # Expected output: False\n\n# Additional edge cases\nprint(simplify(\"3/4\", \"4/3\"))  # Expected output: True (simplifies to 1)\nprint(simplify(\"2/3\", \"5/7\"))  # Expected output: False (simplifies to 10/21)\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"\n    Filters an array of numbers to count how many elements meet the criteria of\n    being greater than 10 and having both first and last digits as odd numbers.\n    \n    Args:\n    nums (list): Array of integers.\n    \n    Returns:\n    int: The count of numbers meeting the specified criteria.\n    \n    Raises:\n    TypeError: If the input nums is not a list.\n    ValueError: If the elements of nums are not integers.\n    \n    Example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for num in nums:\n        if not (isinstance(num, int) and isinstance(abs(num), int)):  # Check if each item is an integer\n            raise ValueError(\"All elements in the input list must be integers.\")\n    \n    # Define helper function to check if a digit is odd\n    def is_odd(n):\n        return n in {1, 3, 5, 7, 9}\n    \n    filtered_count = 0\n    \n    for num in nums:\n        abs_num_str = str(abs(num))  # Consider absolute value for digits extraction\n        first_digit = int(abs_num_str[0])\n        last_digit = int(abs_num_str[-1])\n        \n        if num > 10 and is_odd(first_digit) and is_odd(last_digit):\n            filtered_count += 1\n    \n    return filtered_count\n\n# Unit tests\ndef test_specialFilter():\n    assert specialFilter([15, -73, 14, -15]) == 1\n    assert specialFilter([33, -2, -3, 45, 21, 109]) == 2\n    assert specialFilter([0, 11, -99, 123, 131, -57]) == 3\n    assert specialFilter([]) == 0  # Edge case: empty list\n    assert specialFilter([101, 1001, 10001]) == 1  # Edge case: large values\n    assert specialFilter([11]) == 1  # Minimum size 1 satisfying\n    assert specialFilter([2]) == 0  # Minimum size 1 not satisfying\n    \n    # Test invalid input types\n    try:\n        specialFilter(\"12345\")\n    except TypeError:\n        pass\n    else:\n        raise AssertionError(\"TypeError not raised!\")\n        \n    try:\n        specialFilter([1, \"two\", 3])\n    except ValueError:\n        pass\n    else:\n        raise AssertionError(\"ValueError not raised!\")\n\ntest_specialFilter()"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function processes a list of integers as follows:\n    - Squares the integer if its index is a multiple of 3.\n    - Cubes the integer if its index is a multiple of 4 and not a multiple of 3.\n    - Leaves the integer unchanged otherwise.\n    The function then returns the sum of all processed entries.\n    \n    Args:\n    lst (list of int): List of integers\n    \n    Returns:\n    int: Sum of processed entries\n    \n    Examples:\n    >>> sum_squares([1, 2, 3])\n    6\n    >>> sum_squares([])\n    0\n    >>> sum_squares([-1, -5, 2, -1, -5])\n    -126\n    \"\"\"\n    \n    # Error handling: Ensure input is a list of integers\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n    \n    for item in lst:\n        if not isinstance(item, int):\n            raise ValueError(\"All elements in the list must be integers\")\n    \n    # Main computation\n    total_sum = 0\n\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            processed_value = value ** 2\n        elif index % 4 == 0:\n            processed_value = value ** 3\n        else:\n            processed_value = value\n        \n        total_sum += processed_value\n    \n    return total_sum\n\n# Example tests for verification\nassert sum_squares([1, 2, 3]) == 6, \"Test case 1 failed\"\nassert sum_squares([]) == 0, \"Test case 2 failed\"\nassert sum_squares([-1, -5, 2, -1, -5]) == -126, \"Test case 3 failed\"\nassert sum_squares([3, -2, 5, 7, 8]) == 808, \"Test case 4 failed\"  # 3^3 + -2 + 25 + 7 + 8\nassert sum_squares([10, 21, 32, 43, 54, 65, 76, 87, 98]) == 538600, \"Test case 5 failed\"  # (10^2 + 21 + 32 + 43 + 54^3 + 65 + 76^2 + 87 + 98)\n\nprint(\"All tests passed!\")"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with a dash ('-').\n    \n    Args:\n    text (str): The input string to be processed.\n    \n    Returns:\n    str: The processed string with spaces and consecutive spaces replaced.\n    \n    Raises:\n    TypeError: If the input is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Replace more than 2 consecutive spaces with a single dash\n    text = re.sub(r'\\s{3,}', '-', text)\n    # Replace single or double spaces with underscores\n    text = re.sub(r'[\\s]{1,2}', '_', text)\n    \n    return text\n\n\n# Example unit tests to validate the implementation\n\ndef test_fix_spaces():\n    assert fix_spaces(\"Example\") == \"Example\"\n    assert fix_spaces(\"Example 1\") == \"Example_1\"\n    assert fix_spaces(\" Example 2\") == \"_Example_2\"\n    assert fix_spaces(\" Example   3\") == \"_Example-3\"\n    assert fix_spaces(\"   Example\") == \"-Example\"\n    assert fix_spaces(\"\") == \"\"\n    try:\n        fix_spaces(123)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n    else:\n        assert False, \"TypeError was not raised\"\n\n# Run tests\ntest_fix_spaces()\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Args:\n    n (int): Length of the array and the highest number to generate the series.\n    \n    Returns:\n    int: The number of valid triples where the sum of the triple is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Generate the array a where a[i] = i * i - i + 1\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n\n    if n < 3:\n        return 0  # No triples possible if array has less than 3 elements\n    \n    # Dictionary to track counts of remainders\n    remainder_count = [0, 0, 0]  # counts of numbers that give remainders 0, 1, 2 when divided by 3\n    \n    # Count the remainders\n    for num in a:\n        remainder_count[num % 3] += 1\n\n    # Calculate the number of valid (i, j, k) combinations\n    total_triples = 0\n\n    # Combinations of (0,0,0)\n    total_triples += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6\n\n    # Combinations of (1,1,1)\n    total_triples += remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2) // 6\n\n    # Combinations of (2,2,2)\n    total_triples += remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2) // 6\n\n    # Combinations of (0,1,2)\n    total_triples += remainder_count[0] * remainder_count[1] * remainder_count[2]\n\n    return total_triples\n\n\n# Example usage:\n# get_max_triples(5) -> 1"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character of a given string \n    is an alphabetical character and is not a part of a word, and False otherwise.\n    \n    Note: A \"word\" is a group of characters separated by space.\n    \n    Args:\n    txt (str): The input string.\n    \n    Returns:\n    bool: True if the last character is an alphabetical character and not part of a word, False otherwise.\n    \n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    \n    # Edge case: handle empty string\n    if not txt:\n        return False\n    \n    # Strip trailing spaces to handle cases where the last character might be a space\n    txt = txt.rstrip()\n    \n    # Check again after stripping for an empty string\n    if not txt:\n        return False\n    \n    # Get the last word from the string\n    words = txt.split()\n    \n    # If there's no word, it should return False\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    \n    # Check if the last character in the last word is an alphabetical character\n    if last_word and last_word[-1].isalpha():\n        if len(last_word) == 1:\n            return True\n        else:\n            return False\n        \n    return False\n\n\n# Unit tests\ndef test_check_if_last_char_is_a_letter():\n    assert check_if_last_char_is_a_letter(\"apple pie\") == False\n    assert check_if_last_char_is_a_letter(\"apple pi e\") == True\n    assert check_if_last_char_is_a_letter(\"apple pi e \") == False\n    assert check_if_last_char_is_a_letter(\"\") == False\n    assert check_if_last_char_is_a_letter(\"a\") == True\n    assert check_if_last_char_is_a_letter(\"a \") == False\n    assert check_if_last_char_is_a_letter(\"hello w\") == True\n    assert check_if_last_char_is_a_letter(\"hello \") == False\n    assert check_if_last_char_is_a_letter(\"hello world a\") == True\n    assert check_if_last_char_is_a_letter(\"hello world a \") == False\n    assert check_if_last_char_is_a_letter(\"a b c\") == True\n\n# Running the tests\ntest_check_if_last_char_is_a_letter()\n\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Args:\n    lst (list): The list of integers to process.\n\n    Returns:\n    tuple: A tuple (a, b) where a is the largest negative integer and b is the smallest positive integer.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    \n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(i, int) for i in lst):\n        raise ValueError(\"All elements in the list must be integers\")\n\n    largest_negative = None\n    smallest_positive = None\n\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return (largest_negative, smallest_positive)\n\n# Example usage\n# print(largest_smallest_integers([2, 4, 1, 3, 5, 7])) -> (None, 1)\n# print(largest_smallest_integers([])) -> (None, None)\n# print(largest_smallest_integers([0])) -> (None, None)"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    \n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun.\n    \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # List of planets in the solar system in order from closest to farthest from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the planet1 and planet2\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    \n    # Ensure idx1 is less than idx2 by swapping if necessary\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    \n    # Return the planets between the given two planets\n    return tuple(planets[idx1 + 1: idx2])\n\n# Example usage:\n# Testing the function with given examples and edge cases\nassert bf(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Mercury\") == (\"Venus\")\nassert bf(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nassert bf(\"Neptune\", \"Mercury\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\nassert bf(\"Earth\", \"Earth\") == ()\nassert bf(\"Pluto\", \"Earth\") == ()\nassert bf(\"Jupiter\", \"Pluto\") == ()\nassert bf(\"Mars\", \"Jupiter\") == ()\nassert bf(\"Saturn\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\")\n\n# Additional tests for correctness, error handling, and edge cases\nassert bf(\"Mercury\", \"Mercury\") == ()\nassert bf(\"Neptune\", \"Neptune\") == ()\nassert bf(\"Venus\", \"Earth\") == ()\nassert bf(\"Mercury\", \"Neptune\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")\nassert bf(\"Mercury\", \"Pluto\") == ()  # Edge case with invalid planet name"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"\n    Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    \n    A file's name is considered to be valid if and only if all the following conditions are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n      the Latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \n    Args:\n    file_name (str): The name of the file to be checked.\n    \n    Returns:\n    str: 'Yes' if the file name is valid, otherwise 'No'.\n    \n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a Latin alphabet letter)\n    \"\"\"\n    \n    # Required file extensions\n    valid_extensions = ['txt', 'exe', 'dll']\n    \n    # Split the file name using the dot\n    parts = file_name.split('.')\n    \n    # Check for exactly one dot\n    if len(parts) != 2:\n        return 'No'\n    \n    name_part, extension_part = parts\n    \n    # Check if the extension part is one of the valid extensions\n    if extension_part not in valid_extensions:\n        return 'No'\n    \n    # Check if the name part is not empty and starts with a Latin alphabet letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the name part contains no more than three digits\n    digit_count = sum(c.isdigit() for c in name_part)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Example usage:\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\nprint(file_name_check(\"example.tex\")) # => 'No'\nprint(file_name_check(\"e.xample.dll\")) # => 'No'\nprint(file_name_check(\"example1.exe\")) # => 'Yes'\nprint(file_name_check(\"ex4mple123.dll\")) # => 'No'"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, returns a tuple that has the number of even and odd digits respectively.\n\n    Args:\n    num (int): The integer to analyze.\n\n    Returns:\n    tuple: A tuple where the first element is the count of even digits and the second element is the count of odd digits.\n\n    Examples:\n        even_odd_count(-12) -> (1, 1)\n        even_odd_count(123) -> (1, 2)\n    \"\"\"\n    # Error handling: ensure the input is an integer\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    # Convert the number to its absolute value to ignore the sign\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count, odd_count = 0, 0\n    \n    # Process each character in the string representation of the number\n    for digit in num_str:\n        if digit in '02468':  # Check if the digit is even\n            even_count += 1\n        elif digit in '13579':  # Check if the digit is odd\n            odd_count += 1\n    \n    # Return a tuple with the even and odd counts\n    return (even_count, odd_count)\n\n# Unit testing\ndef test_even_odd_count():\n    \"\"\"\n    Unit tests for the even_odd_count function.\n    \"\"\"\n    assert even_odd_count(123) == (1, 2), \"Test case 1 failed\"\n    assert even_odd_count(-12) == (1, 1), \"Test case 2 failed\"\n    assert even_odd_count(0) == (1, 0), \"Test case 3 failed\"  # Edge case: single zero digit\n    assert even_odd_count(2468) == (4, 0), \"Test case 4 failed\"  # All even digits\n    assert even_odd_count(13579) == (0, 5), \"Test case 5 failed\"  # All odd digits\n    assert even_odd_count(-1357924680) == (5, 5), \"Test case 6 failed\"  # Mixed digits with negative number\n    \n    print(\"All test cases passed\")\n\n# Run tests\ntest_even_odd_count()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Accepts a list of strings as a parameter, deletes the strings that have odd lengths from it,\n    and returns the resultant list with a sorted order.\n    \n    The list is always a list of strings and never an array of numbers, and it may contain duplicates.\n    The order of the list should be ascending by length of each word.\n    If two words have the same length, sort the list alphabetically.\n    \n    Args:\n    lst (list): A list of strings.\n    \n    Returns:\n    list: A list of strings sorted by length and alphabetically if lengths are equal.\n    \n    Example:\n    >>> sorted_list_sum([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    \n    >>> sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\n    \n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    for item in lst:\n        if not isinstance(item, str):\n            raise ValueError(f\"All elements in the list should be strings. Found: {type(item)}\")\n\n    # Filter out strings of odd lengths\n    even_length_strings = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort by length first, then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n\n    return sorted_strings\n\n\n# Testing Function\ndef test_sorted_list_sum():\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    assert sorted_list_sum([\"aa\", \"bb\", \"cc\", \"dd\"]) == [\"aa\", \"bb\", \"cc\", \"dd\"]\n    assert sorted_list_sum([]) == []\n    assert sorted_list_sum([\"eeee\", \"dd\", \"aa\", \"bb\", \"c\", \"bbb\"]) == [\"aa\", \"bb\", \"dd\", \"eeee\"]\n    assert sorted_list_sum([\"dog\", \"cat\", \"bird\", \"fish\"]) == []\n    \n    print(\"All tests passed.\")\n\n# Run tests\ntest_sorted_list_sum()"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    Args:\n    lst (list): A list containing numbers.\n    \n    Returns:\n    int: The sum of squares of odd integers in the input list that are non-negative.\n    \n    Examples:\n    double_the_difference([1, 3, 2, 0]) == 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n    \n    If the input list is empty, return 0.\n    \"\"\"\n\n    # Ensure the input is a list\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    for num in lst:\n        # Skip non-integers and negative numbers\n        if not isinstance(num, int) or num < 0:\n            continue\n\n        # Check if the number is odd\n        if num % 2 != 0:\n            total_sum += num ** 2\n\n    return total_sum\n\n# Example usage and tests\nassert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0\nassert double_the_difference([]) == 0\nassert double_the_difference([1.5, 3, \"4\", 5]) == 34\nassert double_the_difference([1.5, 3.0, 4.5, -5]) == 0\n\nprint(\"All tests passed!\")\n"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Determine if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"\n    Return the value of x if n is a prime number, else return the value of y.\n    \n    Args:\n    n (int): The number to check for primality.\n    x (any): The value to return if n is a prime number.\n    y (any): The value to return if n is not a prime number.\n    \n    Returns:\n    any: x if n is prime, otherwise y.\n    \n    Raises:\n    TypeError: If n is not an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n\n# Unit Tests\ndef test_x_or_y():\n    # Test cases where n is prime\n    assert x_or_y(7, 34, 12) == 34\n    assert x_or_y(11, 'Prime', 'Not Prime') == 'Prime'\n    \n    # Test cases where n is not prime\n    assert x_or_y(15, 8, 5) == 5\n    assert x_or_y(1, 'Prime', 'Not Prime') == 'Not Prime'\n    \n    # Edge case: n is 2, the smallest prime number\n    assert x_or_y(2, 'Yes', 'No') == 'Yes'\n\n    # Edge case: n is 0 or negative\n    assert x_or_y(0, 'Prime', 'Not Prime') == 'Not Prime'\n    assert x_or_y(-5, 'Prime', 'Not Prime') == 'Not Prime'\n    \n    # Edge case: non-integer n\n    try:\n        x_or_y(7.5, 34, 12)\n    except TypeError:\n        pass\n    else:\n        assert False, \"Expected TypeError\"\n\n    print(\"All tests passed!\")\n\ntest_x_or_y()"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if they form a right-angled triangle,\n    False otherwise. A right-angled triangle is a triangle in which one angle is a right angle (90 degrees).\n    \n    Args:\n    a (float): The length of the first side.\n    b (float): The length of the second side.\n    c (float): The length of the third side.\n    \n    Returns:\n    bool: True if the three sides form a right-angled triangle, False otherwise.\n    \n    Examples:\n    >>> right_angle_triangle(3, 4, 5)\n    True\n    >>> right_angle_triangle(1, 2, 3)\n    False\n    \"\"\"\n    # Ensure that inputs are positive numbers\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float))):\n        raise ValueError(\"All sides must be numbers.\")\n    if not (a > 0 and b > 0 and c > 0):\n        raise ValueError(\"All sides must be positive numbers.\")\n\n    # Sort the sides to find the hypotenuse (the largest side)\n    sides = sorted([a, b, c])\n\n    # Use the Pythagorean theorem to check for right-angle triangle\n    return round(sides[0]**2 + sides[1]**2, 10) == round(sides[2]**2, 10)\n\n# Testing the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Additional tests\n    print(right_angle_triangle(5, 12, 13))  # Expected True\n    print(right_angle_triangle(10, 6, 8))  # Expected True\n    print(right_angle_triangle(1, 1, 1))   # Expected False\n    print(right_angle_triangle(0.3, 0.4, 0.5))  # Expected True, testing with floating point numbers"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n\n    Examples:\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n\n    Args:\n    a (str): The first word.\n    b (str): The second word, which will be checked for rotations and substrings.\n\n    Returns:\n    bool: True if the second word or any of its rotations is a substring in the first word, False otherwise.\n\n    Raises:\n    ValueError: If inputs are not strings.\n    \"\"\"\n\n    # Error handling for non-string inputs\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise ValueError(\"Both arguments must be strings\")\n\n    len_b = len(b)\n    if len_b == 0:\n        return True  # Empty string is always a substring\n\n    # Generate all rotations of b and check if any is a substring of a\n    for i in range(len_b):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    return False\n\n# Example unit tests\nassert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True\nassert cycpattern_check(\"abcd\", \"\") == True  # Edge case: Empty string should be True\nassert cycpattern_check(\"\", \"a\") == False  # Edge case: Empty first string should be False\n\n# Output function definition for submission"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    \n    Args:\n    number (int): The positive integer to be converted to a Roman numeral. \n                  Must be between 1 and 1000 inclusive.\n    \n    Returns:\n    str: The Roman numeral representation of the number, in lowercase.\n    \n    Examples:\n    >>> int_to_mini_roman(19)\n    'xix'\n    >>> int_to_mini_roman(152)\n    'clii'\n    >>> int_to_mini_roman(426)\n    'cdxxvi'\n    \"\"\"\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Input number must be between 1 and 1000 inclusive.\")\n\n    # Define the Roman numeral symbols and their corresponding values\n    roman_numerals = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100),\n        ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9),\n        ('V', 5), ('IV', 4), ('I', 1)\n    ]\n\n    result = []\n\n    for roman, value in roman_numerals:\n        while number >= value:\n            result.append(roman.lower())\n            number -= value\n\n    return ''.join(result)\n\n# Unit tests to verify the function works as expected\ndef test_int_to_mini_roman():\n    assert int_to_mini_roman(1) == 'i'\n    assert int_to_mini_roman(4) == 'iv'\n    assert int_to_mini_roman(9) == 'ix'\n    assert int_to_mini_roman(19) == 'xix'\n    assert int_to_mini_roman(40) == 'xl'\n    assert int_to_mini_roman(58) == 'lviii'\n    assert int_to_mini_roman(100) == 'c'\n    assert int_to_mini_roman(399) == 'cccxcix'\n    assert int_to_mini_roman(500) == 'd'\n    assert int_to_mini_roman(900) == 'cm'\n    assert int_to_mini_roman(1000) == 'm'\n    print(\"All tests passed\")\n\ntest_int_to_mini_roman()"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"\n    Accepts a list of strings and returns the word with the maximum number of unique characters.\n    If multiple strings have the maximum number of unique characters, the one which comes first\n    in lexicographical order is returned.\n\n    Args:\n    words (list of str): List of strings to analyze\n\n    Returns:\n    str: The word with the maximum number of unique characters or the lexicographically\n    first word among those with the same number of unique characters.\n\n    Examples:\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    \n    if not isinstance(words, list):\n        raise ValueError(\"Input must be a list of strings\")\n    \n    if not all(isinstance(word, str) for word in words):\n        raise ValueError(\"All elements in the input list must be strings\")\n\n    max_unique_count = 0\n    result_word = ''\n  \n    for word in words:\n        unique_characters = set(word)\n        unique_count = len(unique_characters)\n\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            result_word = word\n        elif unique_count == max_unique_count:\n            if word < result_word:\n                result_word = word\n\n    return result_word\n\n# Example usage:\n# find_max([\"name\", \"of\", \"string\"]) -> \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) -> \"enam\"\n# find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) -> \"aaaaaaa\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    Args:\n    text (str): The input string to be hashed.\n\n    Returns:\n    str: The md5 hash equivalent string of the input 'text'. Returns None if input is an empty string.\n    \n    Examples:\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    \n    # Check if the input text is empty\n    if not text:\n        return None\n\n    # Create MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update hash object with the encoded text\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Get the hexadecimal representation of the hash\n    return md5_hash.hexdigest()\n\n# Unit tests\ndef test_string_to_md5():\n    assert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert string_to_md5('') == None\n    assert string_to_md5('1234567890') == 'e807f1fcf82d132f9bb018ca6738a19f'\n    assert string_to_md5('a' * 1000) == '7707d6ae4e027c70eea2a935c2296f21'\n    print(\"All tests passed!\")\n\n# Running unit tests\ntest_string_to_md5()"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    Args:\n    game (list): List of actual scores of the matches.\n    guess (list): List of guessed scores for the matches.\n    \n    Returns:\n    list: A list denoting how far off each guess was.\n    \n    Raises:\n    TypeError: If the inputs are not lists.\n    ValueError: If the lists do not have the same length.\n    \"\"\"\n    \n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise TypeError(\"Both game and guess should be lists.\")\n    \n    if len(game) != len(guess):\n        raise ValueError(\"Both game and guess lists should have the same length.\")\n    \n    result = []\n    \n    for g, s in zip(game, guess):\n        if g == s:\n            result.append(0)  # Correct guess\n        else:\n            result.append(abs(g - s))  # Absolute difference\n    \n    return result\n\n# Example usage:\n# print(compare([1,2,3,4,5,1],[1,2,3,4,2,-2])) -> [0,0,0,0,3,3]\n# print(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) -> [4,4,1,0,0,6]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    Args:\n    operator (list): A list of strings representing the operators.\n    operand (list): A list of integers representing the operands.\n\n    Returns:\n    int: The result of the algebraic expression.\n    \n    Raises:\n    ValueError: If the input lists have incorrect lengths or contain invalid elements.\n    \"\"\"\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list must be equal to the length of operand list minus one.\")\n    \n    if not all(isinstance(op, str) for op in operator):\n        raise ValueError(\"All elements in the operator list must be strings representing algebraic operations.\")\n    \n    if not all(isinstance(num, int) and num >= 0 for num in operand):\n        raise ValueError(\"All elements in the operand list must be non-negative integers.\")\n\n    # Create initial expression from the first operand\n    expression = str(operand[0])\n    \n    # Iterate through operator and operand to build the expression\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n        \n    # Evaluate the final expression\n    result = eval(expression)\n    \n    return result\n\n# Unit tests\ndef test_do_algebra():\n    assert do_algebra(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert do_algebra(['+', '-'], [10, 5, 3]) == 12\n    assert do_algebra(['**', '//'], [3, 2, 2]) == 2\n    assert do_algebra(['*', '+', '-'], [1, 5, 2, 3]) == 10\n    assert do_algebra(['+', '//', '*'], [10, 2, 2, 3]) == 18\n    \n    try:\n        do_algebra(['+'], [5])\n    except ValueError as e:\n        assert str(e) == \"The length of operator list must be equal to the length of operand list minus one.\"\n    \n    try:\n        do_algebra(['+', '*'], [5, -10, 2])\n    except ValueError as e:\n        assert str(e) == \"All elements in the operand list must be non-negative integers.\"\n    \n    print(\"All tests passed.\")\n\n# Run tests\ntest_do_algebra()"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    Processes the given string `s` as per the following rules:\n    \n    1. If s[i] is a letter, reverse its case from lower to upper or vice versa,\n       otherwise keep it as it is.\n    2. If the string contains no letters, reverse the string.\n    \n    Args:\n    s (str): The input string.\n    \n    Returns:\n    str: The processed string based on the above rules.\n    \n    Examples:\n    >>> solve(\"1234\")\n    '4321'\n    >>> solve(\"ab\")\n    'AB'\n    >>> solve(\"#a@C\")\n    '#A@c'\n    \"\"\"\n    if not s:  # Handle the case for empty string\n        return s\n    \n    has_letter = any(c.isalpha() for c in s)  # Check if there are any letters in the string\n    \n    if has_letter:\n        # Reverse case for letters, keep other characters as they are\n        return ''.join([c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s])\n    else:\n        # If no letters, reverse the entire string\n        return s[::-1]\n\n# Below is a set of testing scenarios to validate the function using assertions\ndef test_solve():\n    assert solve(\"\") == \"\", \"Test case for empty string failed\"\n    assert solve(\"1234\") == \"4321\", \"Test case for no letters failed\"\n    assert solve(\"ab\") == \"AB\", \"Test case for all lowercase letters failed\"\n    assert solve(\"AB\") == \"ab\", \"Test case for all uppercase letters failed\"\n    assert solve(\"#a@C\") == \"#A@c\", \"Test case for mixed characters failed\"\n    assert solve(\"HeLLo\") == \"hEllO\", \"Test case for mixed case letters failed\"\n    assert solve(\"!@#$%^&*()_+\") == \"+_)(*&^%$#@!\", \"Test case for special characters without letters failed\"\n    \n    print(\"All test cases passed!\")\n\ntest_solve()"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Args:\n        number (int): The number of carrots that you have already eaten.\n        need (int): The number of carrots that you need to eat.\n        remaining (int): The number of remaining carrots that exist in stock.\n    \n    Returns:\n        list: A list containing two integers; the first is the total number of eaten carrots after your meals,\n              and the second is the number of carrots left after your meals.\n    \n    Constraints:\n    - 0 <= number <= 1000\n    - 0 <= need <= 1000\n    - 0 <= remaining <= 1000\n    \n    Raises:\n    - ValueError: If the input values are out of the allowed range.\n    \"\"\"\n\n    # Input validation\n    if not (0 <= number <= 1000):\n        raise ValueError(\"number must be between 0 and 1000\")\n    if not (0 <= need <= 1000):\n        raise ValueError(\"need must be between 0 and 1000\")\n    if not (0 <= remaining <= 1000):\n        raise ValueError(\"remaining must be between 0 and 1000\")\n\n    # Calculate the total number of carrots eaten after the meals\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n\n    return [total_eaten, remaining]\n\n# Example usage:\n# print(eat(5, 6, 10))  # Output: [11, 4]\n# print(eat(4, 8, 9))   # Output: [12, 1]\n# print(eat(1, 10, 10)) # Output: [11, 0]\n# print(eat(2, 11, 5))  # Output: [7, 0]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Determines the strongest extension for a given class name based on a list of extensions.\n\n    Args:\n    class_name (str): The name of the class.\n    extensions (list): A list of extension names (strings).\n\n    Returns:\n    str: A string in the format 'ClassName.StrongestExtensionName' with the strongest extension.\n    \"\"\"\n\n    def calculate_strength(extension):\n        \"\"\"\n        Calculate the strength of an extension.\n\n        Args:\n        extension (str): The name of the extension.\n\n        Returns:\n        int: The strength, calculated as number of uppercase letters minus number of lowercase letters.\n        \"\"\"\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    if not isinstance(class_name, str):\n        raise TypeError(\"class_name must be a string\")\n    \n    if not isinstance(extensions, list) or not all(isinstance(ext, str) for ext in extensions):\n        raise TypeError(\"extensions must be a list of strings\")\n\n    if not extensions:\n        raise ValueError(\"extensions list cannot be empty\")\n\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if (strongest_extension is None) or (strength > max_strength):\n            strongest_extension = extension\n            max_strength = strength\n    \n    if strongest_extension is not None:\n        return f\"{class_name}.{strongest_extension}\"\n    else:\n        raise ValueError(\"No valid extensions found\")\n\n# This function can be tested by calling it directly, and verified with the given examples:\n# Strongest_Extension('my_class', ['AA', 'Be', 'CC']) -> 'my_class.AA'\n# Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']) -> 'Slices.SErviNGSliCes'"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n\n    Args:\n    a (int): The first positive integer.\n    b (int): The second positive integer.\n\n    Returns:\n    list: A list of even integers between a and b (inclusive).\n    \"\"\"\n\n    # Validate inputs\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError(\"Both a and b must be integers.\")\n    if not (a > 0 and b > 0):\n        raise ValueError(\"Both a and b must be positive integers.\")\n    \n    # Determine the inclusive range between a and b\n    start, end = min(a, b), max(a, b)\n    \n    # Generate even numbers within the range\n    even_numbers = [num for num in range(start, end + 1) if num % 2 == 0]\n    \n    return even_numbers\n\n# Edge Case Testing\ndef test_generate_integers():\n    assert generate_integers(2, 8) == [2, 4, 6, 8], \"Test Case 1 Failed\"\n    assert generate_integers(8, 2) == [2, 4, 6, 8], \"Test Case 2 Failed\"\n    assert generate_integers(10, 14) == [10, 12, 14], \"Test Case 3 Failed\"\n    assert generate_integers(2, 2) == [2], \"Test Case 4 Failed\"\n    assert generate_integers(15, 19) == [16, 18], \"Test Case 5 Failed\"\n    assert generate_integers(3, 3) == [], \"Test Case 6 Failed\"\n\n    try:\n        generate_integers(-1, 5)\n    except ValueError as ve:\n        assert str(ve) == \"Both a and b must be positive integers.\", \"Test Case 7 Failed\"\n    \n    try:\n        generate_integers(5, -3)\n    except ValueError as ve:\n        assert str(ve) == \"Both a and b must be positive integers.\", \"Test Case 8 Failed\"\n    \n    try:\n        generate_integers(\"a\", 3)\n    except ValueError as ve:\n        assert str(ve) == \"Both a and b must be integers.\", \"Test Case 9 Failed\"\n\n    print(\"All test cases passed.\")\n\n# Run tests\ntest_generate_integers()"}
