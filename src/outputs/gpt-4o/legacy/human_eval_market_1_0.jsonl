{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_nesting_level(paren_group: str) -> int:\n        current_level = 0\n        max_level = 0\n        for char in paren_group:\n            if char == '(':\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n            elif char == ')':\n                current_level -= 1\n                if current_level < 0:\n                    raise ValueError(f\"Unbalanced parentheses in input: {paren_group}\")\n        if current_level != 0:\n            raise ValueError(f\"Unbalanced parentheses in input: {paren_group}\")\n        return max_level\n\n    if not isinstance(paren_string, str):\n        raise TypeError(\"Input must be a string\")\n\n    groups = paren_string.strip().split()\n    max_levels = []\n    \n    for group in groups:\n        max_levels.append(max_nesting_level(group))\n    \n    return max_levels\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    \n    if not strings:  # Handling the case where the input list is empty\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n        \n    n = len(string)\n    if n == 0:\n        return ''\n\n    # Find the longest palindromic suffix\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # Reverse the prefix that comes before the palindromic suffix\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    \n    # If no palindromic suffix is found (theoretically not possible since single characters are palindromes)\n    return string + string[::-1]\n\n\n# Test examples\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" \n    Input to this function is a string containing multiple groups of nested parentheses. \n    Your goal is to separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Check for invalid characters\n    if any(c not in '()' for c in paren_string):\n        raise ValueError(\"Invalid input string, only '(' and ')' characters are allowed\")\n    \n    # List to store the separated groups\n    groups = []\n    # Temporary variables to hold the current group and balance count\n    current_group = []\n    balance = 0\n    \n    # Iterate over each character in the string\n    for char in paren_string:\n        current_group.append(char)\n        \n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            \n        # When balance reaches zero, we have a complete group\n        if balance == 0 and current_group:\n            groups.append(\"\".join(current_group))\n            current_group = []\n    \n    # Convert the list of characters in individual groups to strings\n    return groups\n\n# Test example\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output should be ['()', '(())', '(()())']"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    :param numbers: List of float numbers\n    :return: Mean Absolute Deviation (MAD)\n    \n    Example:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    \n    # Check if the input is a valid non-empty list of numbers\n    if not isinstance(numbers, list) or not numbers:\n        raise ValueError(\"Input must be a non-empty list of numbers\")\n    \n    # Check if all elements in the list are of type float or int\n    if not all(isinstance(n, (float, int)) for n in numbers):\n        raise TypeError(\"All elements in the input list must be of type float or int\")\n    \n    # Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the mean absolute deviation\n    mad = sum(abs(number - mean_value) for number in numbers) / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Handle edge case of empty list\n    if not numbers:\n        return (0, 1)\n\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Ensure input is a non-negative integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Generate space-delimited string of numbers from 0 to n\n    return ' '.join(map(str, range(n + 1)))\n\n# Example usage\nif __name__ == \"__main__\":\n    try:\n        print(string_sequence(5))  # Output: '0 1 2 3 4 5'\n        print(string_sequence(0))  # Output: '0'\n        print(string_sequence(-1)) # Raise ValueError\n        print(string_sequence(\"a\")) # Raise TypeError\n    except (TypeError, ValueError) as e:\n        print(e)"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    if not isinstance(numbers, list) or not all(isinstance(x, (int, float)) for x in numbers) or not isinstance(threshold, (int, float)):\n        raise ValueError(\"Invalid input: numbers must be a list of floats or ints and threshold must be a float or int.\")\n    \n    numbers.sort()  # Sort the list to reduce the number of comparisons needed\n\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n\n    return False"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(7.12)\n    0.12\n    >>> truncate_number(0.999)\n    0.999\n    >>> truncate_number(3.0)\n    0.0\n    >>> truncate_number(100)\n    0.0\n    >>> truncate_number(1e-9)\n    1e-09\n    >>> truncate_number(-2.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: The number must be a positive floating point number greater than 0.\n    \"\"\"\n    # Input validation\n    if not isinstance(number, (float, int)):\n        raise TypeError(\"Input must be a floating point number or integer.\")\n    if number <= 0:\n        raise ValueError(\"The number must be a positive floating point number greater than 0.\")\n    \n    # Get the integer part by using the int() function which truncates towards zero\n    integer_part = int(number)\n    \n    # Calculate the decimal part\n    decimal_part = number - integer_part\n    \n    return decimal_part\n\n# Examples to demonstrate how to use the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum elements found until given moment in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(x, int) for x in numbers):\n        raise ValueError(\"All elements in the list must be integers\")\n    \n    if not numbers:\n        return []\n    \n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n        \n    return result\n\n# Test cases to verify the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    \n    # Validation of inputs\n    if not isinstance(strings, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(substring, str):\n        raise TypeError(\"The second argument must be a string.\")\n    # Ensure all elements in the list are strings\n    if not all(isinstance(item, str) for item in strings):\n        raise ValueError(\"All elements in the first argument list must be strings.\")\n    \n    # Filter strings based on the substring\n    result = [s for s in strings if substring in s]\n    \n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string.\n    \n    Args:\n        string (str): The input string to generate prefixes from.\n    \n    Returns:\n        List[str]: A list of all prefixes from shortest to longest.\n    \n    Raises:\n        TypeError: If the input is not a string.\n    \n    Examples:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n# Including an example for validation.\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    def gcd(x, y):\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both a and b must be integers\")\n        \n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n        \n    return abs(gcd(a, b))\n\n# Testing the function as given in the docstring\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" \n    Find how many times a given substring can be found in the original string. \n    Count overlapping cases.\n    \n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not isinstance(string, str) or not isinstance(substring, str):\n        raise ValueError(\"Both arguments must be of string type\")\n    \n    if not string or not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Increment start to consider overlapping\n        \n    return count"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Define a dictionary to map note representations to their respective beats\n    note_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\n    # Split the input string into individual note representations\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beats corresponding to the notes\n    beats = []\n\n    for note in notes:\n        if note in note_beats:  # Check if the note is a valid representation\n            beats.append(note_beats[note])\n        else:\n            raise ValueError(f\"Invalid note representation: {note}\")\n\n    return beats\n\n# Example usage:\n# print(parse_music('o o| .| o| o| .| .| .| .| o o'))  # [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Check if the input strings are of equal length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Ensure the inputs contain only '0's and '1's\n    if not (set(a) <= {'0', '1'} and set(b) <= {'0', '1'}):\n        raise ValueError(\"Input strings must contain only '0's and '1's\")\n    \n    # Perform XOR\n    result = []\n    for char_a, char_b in zip(a, b):\n        xor_res = '1' if char_a != char_b else '0'\n        result.append(xor_res)\n    \n    return ''.join(result)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of the account falls below zero, and\n    at that point function should return True. Otherwise, it should return False.\n    \n    Args:\n    operations (List[int]): List of integers representing deposit (positive) and withdrawal (negative) operations.\n    \n    Returns:\n    bool: True if the account balance falls below zero at any point, otherwise False.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    \n    for amount in operations:\n        balance += amount\n        if balance < 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of the given string.\n    \n    This function returns the length of the input string. It assumes the input is a valid string.\n    If the input is not a string, it raises a TypeError.\n    \n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    # Check if the input is indeed a string\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Use the built-in len() function to get the length of the string\n    return len(string)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) it consists of\n    \n    Args:\n        string (str): The input string to check for distinct characters\n        \n    Returns:\n        int: The number of distinct characters (case-insensitive)\n        \n    Raises:\n        TypeError: If the input is not a string\n    \n    Examples:\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Convert string to lower case and use set to find distinct characters\n    lowercase_string = string.lower()\n    distinct_characters = set(lowercase_string)\n    \n    return len(distinct_characters)\n\n# Example usage:\n# print(count_distinct_characters('xyzXYZ'))  # Output: 3\n# print(count_distinct_characters('Jerry'))  # Output: 4"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # Input validation\n    if not isinstance(numbers, list):\n        raise TypeError(\"The 'numbers' argument must be a list.\")\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the 'numbers' list must be integers.\")\n    if not isinstance(delimiter, int):\n        raise TypeError(\"The 'delimiter' argument must be an integer.\")\n\n    # Edge case: if the input list is empty, return an empty list\n    if not numbers:\n        return []\n\n    # Initialize an empty result list to accumulate the elements\n    result = []\n\n    # Interate over the list and add delimiter between elements\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:  # Add the delimiter if it's not the last element\n            result.append(delimiter)\n    \n    return result\n\n\n# Example test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Mapping of words to their corresponding numeric value\n    word_to_number = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    number_to_word = {v: k for k, v in word_to_number.items()}\n\n    try:\n        # Split the input string into individual words\n        words = numbers.split()\n        \n        # Convert words to their numeric values\n        numeric_values = [word_to_number[word] for word in words]\n    except KeyError as e:\n        raise ValueError(f\"Invalid numeral in input: {e}\")\n\n    # Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n\n    # Convert back to words\n    sorted_words = [number_to_word[num] for num in sorted_numeric_values]\n\n    # Join the sorted words into a space-delimited string\n    return ' '.join(sorted_words)\n\n# Example usages for testing:\nif __name__ == \"__main__\":\n    try:\n        print(sort_numbers('three one five'))  # Expected Output: 'one three five'\n    except ValueError as e:\n        print(e)\n        \n    try:\n        print(sort_numbers('four three two one zero'))  # Expected Output: 'zero one two three four'\n    except ValueError as e:\n        print(e)\n        \n    try:\n        print(sort_numbers('six five five six'))  # Expected Output: 'five five six six'\n    except ValueError as e:\n        print(e)\n\n    try:\n        print(sort_numbers('ten nine'))  # Expected to raise ValueError\n    except ValueError as e:\n        print(e)"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" \n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    Args:\n    string (str): The string whose case is to be flipped.\n\n    Returns:\n    str: A new string with flipped case characters.\n\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    flipped_string = []\n    \n    for char in string:\n        if char.islower():\n            flipped_string.append(char.upper())\n        elif char.isupper():\n            flipped_string.append(char.lower())\n        else:\n            flipped_string.append(char)\n    \n    return ''.join(flipped_string)\n\n# Example usage:\n# print(flip_case('Hello'))\n# Output: 'hELLO'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    if not isinstance(numbers, list) or len(numbers) < 2:\n        raise ValueError(\"Input must be a list with at least two elements.\")\n    \n    # Sort the numbers first. This allows us to only compare adjacent elements for closest pairs.\n    numbers.sort()\n    \n    # Initialize the minimum difference as a very large value and the result pair as None.\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    \n    # Iterate through the sorted list and find the closest adjacent pair.\n    for i in range(len(numbers) - 1):\n        current_diff = numbers[i + 1] - numbers[i]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n\n# Examples for testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Check if the input is a list, raise TypeError if not\n    if not isinstance(l, list):\n        raise TypeError(\"Input should be of type 'list'\")\n\n    # Use a set to ensure unique elements and then sort the result\n    result_set = set(l)\n    sorted_result = sorted(result_set)\n    \n    return sorted_result\n\n# Let's add doctests to verify its correctness\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep the order of elements left the same as in the input.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if not isinstance(numbers, list) or not all(isinstance(n, int) for n in numbers):\n        raise ValueError(\"Input should be a list of integers.\")\n    \n    # Count occurrences of each number\n    occurrence_counts = {}\n    for number in numbers:\n        if number in occurrence_counts:\n            occurrence_counts[number] += 1\n        else:\n            occurrence_counts[number] = 1\n    \n    # Collect numbers that occur only once\n    result = [number for number in numbers if occurrence_counts[number] == 1]\n    \n    return result\n\n# Example usage and simple test case\nif __name__ == \"__main__\":\n    input_data = [1, 2, 3, 2, 4]\n    expected_output = [1, 3, 4]\n    assert remove_duplicates(input_data) == expected_output, f\"Test failed: {input_data} != {expected_output}\"\n    print(\"Test passed.\")"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    \n    # Ensure inputs are of correct types\n    if not isinstance(strings, list):\n        raise TypeError(\"The first argument must be a list of strings.\")\n    if not isinstance(prefix, str):\n        raise TypeError(\"The second argument must be a string.\")\n    \n    # Ensure all elements of the list are strings\n    for string in strings:\n        if not isinstance(string, str):\n            raise ValueError(\"All elements of the input list must be strings.\")\n    \n    # Filter strings that start with the given prefix\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    \n    return filtered_strings\n\n# Example usage and testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    # Validate the input to ensure it's a list\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Return a list comprehension filtering positive numbers\n    return [num for num in l if isinstance(num, (int, float)) and num > 0]\n\n# Sample usage and edge case tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    print(get_positive([-1, 2, -4, 5, 6]))  # Expected: [2, 5, 6]\n    print(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Expected: [5, 3, 2, 3, 9, 123, 1]\n    print(get_positive([]))  # Expected: []\n    print(get_positive([-1, -2, -3]))  # Expected: []\n    try:\n        print(get_positive(\"not a list\"))  # Expected: TypeError\n    except TypeError as e:\n        print(e)\n    try:\n        print(get_positive(123))  # Expected: TypeError\n    except TypeError as e:\n        print(e)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    Args:\n    numbers (List[float]): A list of at least two float numbers.\n    \n    Returns:\n    List[float]: A list of numbers rescaled to the unit interval [0, 1].\n    \n    Raises:\n    ValueError: If the input list has fewer than two elements.\n    TypeError: If any element in the list is not a float.\n    \n    Examples:\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \n    >>> rescale_to_unit([10.0, 20.0])\n    [0.0, 1.0]\n    \"\"\"\n    \n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n    \n    if not all(isinstance(num, (float, int)) for num in numbers):\n        raise TypeError(\"All elements in the input list must be numbers (float or int).\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Edge case: if all numbers are the same, min_val will equal max_val\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    # Apply the rescaling formula\n    rescaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(16)\n    8\n    >>> largest_divisor(42)\n    21\n    >>> largest_divisor(7)\n    1\n    >>> largest_divisor(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: No divisor found for numbers less than 2.\n    >>> largest_divisor(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer.\n    \"\"\"\n    \n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    if n < 2:\n        raise ValueError(\"No divisor found for numbers less than 2.\")\n    \n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    \n    # Technically this line will never be reached because the for loop\n    # is guaranteed to find a divisor (1 is always a divisor of any n > 1)\n    raise RuntimeError(\"Unexpected error: No divisor found.\")"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers.\n    \n    This function takes a list of values of any type and returns a list containing\n    only the integer values from that list.\n\n    Args:\n    values (List[Any]): A list containing values of any type.\n    \n    Returns:\n    List[int]: A list containing only integer values filtered from the input list.\n    \n    Examples:\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    if not isinstance(values, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Initialize an empty list to store integer values\n    result = []\n    \n    # Iterate over each value in the input list\n    for value in values:\n        # Check if the current value is an integer\n        if isinstance(value, int):\n            # Append the integer value to the result list\n            result.append(value)\n            \n    return result\n\n# Unit test examples\nif __name__ == \"__main__\":\n    # Test case 1: Input list with mixed types\n    assert filter_integers(['a', 3.14, 5]) == [5], \"Test case 1 failed\"\n    # Test case 2: Input list with integer and non-integer types\n    assert filter_integers([1, 2, 3, 'abc', {}, []]) == [1, 2, 3], \"Test case 2 failed\"\n    # Test case 3: Input list with no integers\n    assert filter_integers(['a', 3.14, 'b', {}, []]) == [], \"Test case 3 failed\"\n    # Test case 4: Input list with only integers\n    assert filter_integers([1, -2, 0, 5, 100]) == [1, -2, 0, 5, 100], \"Test case 4 failed\"\n    # Test case 5: Empty input list\n    assert filter_integers([]) == [], \"Test case 5 failed\"\n    # Test case 6: Invalid input type (not a list)\n    try:\n        filter_integers('not a list')\n    except TypeError:\n        pass\n    else:\n        assert False, \"Test case 6 failed\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string.\n    \n    Args:\n        strings (List[str]): List of strings to concatenate.\n\n    Returns:\n        str: Concatenated single string.\n\n    Raises:\n        TypeError: If the input is not a list or any element in the list is not a string.\n\n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n    \n    if not isinstance(strings, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    for item in strings:\n        if not isinstance(item, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n    \n    return ''.join(strings)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be of type list.\")\n        \n    if not l:\n        raise ValueError(\"Input list is empty.\")\n\n    max_val = l[0]\n    \n    for element in l:\n        if not isinstance(element, (int, float)):\n            raise ValueError(\"All elements in the list must be numbers.\")\n        if element > max_val:\n            max_val = element\n    return max_val"}
{"task_id": "HumanEval/39", "completion": "import itertools\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci_generator():\n    \"\"\"Generate Fibonacci numbers indefinitely.\"\"\"\n    a, b = 0, 1\n    while True:\n        yield b\n        a, b = b, a + b\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    prime_fib_count = 0\n    for fib_number in fibonacci_generator():\n        if is_prime(fib_number):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return fib_number\n"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of polynomial with coefficients xs at point x.\n    return xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + .... (n) * xs[n] * x^(n-1)\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list, tol=1e-7, max_iter=1000):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes a list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Error handling\n    if not isinstance(xs, list) or not all(isinstance(coeff, (int, float)) for coeff in xs):\n        raise ValueError(\"Invalid input: xs must be a list of numbers\")\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Invalid input: even number of coefficients required\")\n    if not any(xs):\n        raise ValueError(\"Invalid input: at least one coefficient must be non-zero\")\n\n    # Initial guess\n    x0 = 0.0  \n    for _ in range(max_iter):\n        f_val = poly(xs, x0)\n        f_derivative = poly_derivative(xs, x0)\n        if abs(f_val) < tol:  # Solution found\n            return x0\n        if abs(f_derivative) < tol:  # Derivative too small, avoid division by zero\n            raise ValueError(\"Derivative too small; no convergence\")\n        x0 = x0 - f_val / f_derivative  # Newton-Raphson step\n\n    raise ValueError(\"Exceeded maximum iterations; no convergence\")\n\n# Examples for testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Check if input is a list\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list of integers\")\n    # Check if all elements are integers\n    if not all(isinstance(i, int) for i in l):\n        raise ValueError(\"All elements in the list must be integers\")\n\n    seen_numbers = set()\n    for num in l:\n        if -num in seen_numbers:\n            return True\n        seen_numbers.add(num)\n    return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    Args:\n    n (int): The upper limit for the range of integers to inspect (exclusive).\n    \n    Returns:\n    int: The count of digit '7' in numbers less than n that are divisible by 11 or 13.\n    \n    Raises:\n    ValueError: If the input is not a positive integer.\n    \n    Examples:\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    \n    # Check for valid input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    count_of_sevens = 0\n    \n    # Iterate through numbers less than n\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_of_sevens += str(i).count('7')\n    \n    return count_of_sevens\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer greater than or equal to 1\")\n    \n    # Handle edge cases\n    if n == 1 or n == 0:\n        return False\n    if n == 2:\n        return True\n    \n    # Handle even numbers and numbers less than 2\n    if n % 2 == 0:\n        return False\n    \n    # Check for factors only up to the square root of n\n    limit = int(n**0.5) + 1\n    for i in range(3, limit, 2):\n        if n % i == 0:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    if not isinstance(l, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(l) < 3:\n        return False\n\n    l.sort()  # Sorting to facilitate the two-pointer technique\n    n = len(l)\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip duplicates to avoid redundant work\n        \n        left, right = l[i + 1], l[n - 1]\n        j, k = i + 1, n - 1\n        while j < k:\n            current_sum = l[i] + l[j] + l[k]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                j += 1\n            else:\n                k -= 1\n\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n\n    if not isinstance(x, int) or not isinstance(base, int):\n        raise TypeError(\"Both x and base must be integers.\")\n    if x < 0:\n        raise ValueError(\"x must be a non-negative integer.\")\n    if base <= 1 or base >= 10:\n        raise ValueError(\"base must be an integer greater than 1 and less than 10.\")\n\n    # Special case for x == 0\n    if x == 0:\n        return '0'\n    \n    result = []\n    while x > 0:\n        remainder = x % base\n        result.insert(0, str(remainder))\n        x //= base\n\n    return ''.join(result)\n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \n    Args:\n    l (list): The input list to be processed.\n    \n    Returns:\n    list: A new list with sorted values at indices divisible by three.\n    \n    Raises:\n    TypeError: If the input is not a list.\n    \n    Examples:\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Input validation\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not l:\n        return l\n    \n    # Extract values at indices divisible by three\n    sorted_third_indices = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_third_indices.sort()\n    \n    # Rebuild the list with sorted values at indices divisible by three\n    result = l[:]\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third_indices[j]\n            j += 1\n    \n    return result"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    Args:\n        n (int): The integer to be factorized.\n    \n    Returns:\n        List[int]: A list of prime factors.\n    \n    Raises:\n        ValueError: If n is less than 1.\n    \n    Examples:\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n    \"\"\"\n\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n <= 1:\n        raise ValueError(\"Input must be a positive integer greater than 1\")\n    \n    factors = []\n    \n    # Check for number of 2s\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # Check for odd numbers\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        factor += 2\n    \n    # If remaining n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\n# Example test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    \n    # Validate input\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(i, (int, float)) for i in l):\n        raise ValueError(\"All elements in the list must be numbers\")\n    \n    # Extract even indexed elements\n    even_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    # Sort the even indexed elements\n    sorted_even_elements = sorted(even_elements)\n    \n    # Place sorted even indexed elements back\n    sorted_list = l[:]  # create a copy of the original list\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            sorted_list[i] = sorted_even_elements[even_index]\n            even_index += 1\n    \n    return sorted_list\n\n# Example usages of the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Validate input.\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Split string into groups, each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Validate input.\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Split string into groups, each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Reverse-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    This function calculates 2 raised to the power n, modulo p.\n    \n    Args:\n    n (int): The exponent to which 2 is raised.\n    p (int): The modulus.\n    \n    Returns:\n    int: The result of (2^n) % p.\n    \n    Raises:\n    ValueError: If any of the inputs are invalid (e.g., p <= 0).\n    \n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    # Validate inputs\n    if not isinstance(n, int) or not isinstance(p, int):\n        raise TypeError(\"Both n and p must be integers.\")\n    if p <= 0:\n        raise ValueError(\"The modulus p must be a positive integer.\")\n    \n    # Using modular exponentiation for efficiency\n    result = pow(2, n, p)\n    \n    return result\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n    \n    Args:\n        x (int): The first integer to add.\n        y (int): The second integer to add.\n        \n    Returns:\n        int: The result of adding x and y.\n        \n    Raises:\n        TypeError: If either `x` or `y` is not an integer.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    \n    # Type checking for both inputs\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Both arguments must be integers\")\n    \n    # Addition operation\n    result = x + y\n    \n    return result\n\n# Unit testing using the provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move at the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Error handling for invalid inputs\n    if not isinstance(n, int):\n        raise TypeError(f\"Expected an integer, but got {type(n).__name__}\")\n    if n < 0:\n        raise ValueError(\"The number of cars cannot be negative.\")\n    \n    # Compute the number of collisions\n    return n * n\n\n# Example usage\nprint(car_race_collision(3))  # Output should be 9"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Ensure input types are correct\n    if not isinstance(s0, str) or not isinstance(s1, str):\n        raise ValueError(\"Both arguments must be strings.\")\n    \n    # Use set to compare if both strings contain the same characters\n    return set(s0) == set(s1)\n\n# Unit test example\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Validate input type\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n\n    # A string is a palindrome if it reads the same backwards as forwards\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Checks if every opening bracket in the string has a corresponding closing bracket.\n    \n    :param brackets: A string containing only \"<\" and \">\"\n    :return: True if the bracketing is correct, False otherwise\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Input validation: check if input is a string and contains only valid characters\n    if not isinstance(brackets, str) or any(char not in \"<>\" for char in brackets):\n        raise ValueError(\"Input must be a string containing only '<' and '>'\")\n\n    # Initial count of unclosed opening brackets\n    open_count = 0\n    \n    # Traverse through each character in the string\n    for char in brackets:\n        if char == \"<\":\n            open_count += 1  # Increment count for an opening bracket\n        elif char == \">\":\n            open_count -= 1  # Decrement count for a closing bracket\n        \n        # If count goes negative, there's a closing bracket without a matching opening bracket\n        if open_count < 0:\n            return False\n    \n    # All opening brackets should have a corresponding closing bracket\n    return open_count == 0\n\n# Example test cases to illustrate usage (these should ideally be in a separate test file)\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Base cases\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first four elements of the sequence\n    fib4_sequence = [0, 0, 2, 0]\n    \n    # Compute fib4 from the 4th element to the nth element\n    for i in range(4, n + 1):\n        next_value = fib4_sequence[-1] + fib4_sequence[-2] + fib4_sequence[-3] + fib4_sequence[-4]\n        fib4_sequence.append(next_value)\n    \n    return fib4_sequence[n]\n\n# Example usage:\n# print(fib4(5))\n# print(fib4(6))\n# print(fib4(7))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    Parameters:\n    l (list): List of integers to check.\n    t (int): Threshold value.\n\n    Returns:\n    bool: True if all numbers in the list l are below the threshold t, False otherwise.\n\n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # Validate input types\n    if not isinstance(l, list) or not all(isinstance(item, (int, float)) for item in l):\n        raise ValueError(\"The first argument must be a list of numbers (integers/floats).\")\n    if not isinstance(t, (int, float)):\n        raise ValueError(\"The second argument must be a number (integer/float).\")\n\n    # Check if all elements are below the threshold\n    for element in l:\n        if element >= t:\n            return False\n    return True\n\n# Test cases to verify the implementation\nif __name__ == \"__main__\":\n    assert below_threshold([1, 2, 4, 10], 100) == True, \"Test case 1 failed\"\n    assert below_threshold([1, 20, 4, 10], 5) == False, \"Test case 2 failed\"\n    assert below_threshold([], 5) == True, \"Test case 3 failed\"  # An empty list should return True\n    assert below_threshold([-1, -2, -3], 0) == True, \"Test case 4 failed\"  # List with negative numbers\n    assert below_threshold([1, 2, 3, 4.5, 6.7], 7) == True, \"Test case 5 failed\"  # List with mixed integers and floats\n    assert below_threshold([1, 2, 3, 4.5, 6.7], 4) == False, \"Test case 6 failed\"  # Mixed integers and floats with a failing case\n\n    print(\"All test cases pass\")"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    \n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        list: New list with each element incremented by 1.\n    \n    Raises:\n        TypeError: If the input list contains non-integer elements.\n    \n    Examples:\n        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Check that all items in the list are integers\n    if not all(isinstance(x, int) for x in l):\n        raise TypeError(\"All elements of the list must be integers\")\n    \n    # Increment each element by 1 and return the new list\n    return [x + 1 for x in l]\n\n# Example usage:\n# print(incr_list([1, 2, 3]))  # Should print: [2, 3, 4]\n# print(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Should print: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    vowels = \"aeiouAEIOU\"\n    result = ''.join(char for char in text if char not in vowels)\n    return result"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Handle invalid inputs\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        raise TypeError(\"Both arguments must be lists\")\n    \n    # Use set intersection to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    \n    # Convert to sorted list before returning\n    return sorted(common_elements)"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    Returns None if the list is empty.\n    Raises TypeError if the input is not a list or contains non-numeric values.\n    \n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([1])\n    1\n    >>> median([])\n    None\n    >>> median([3, 'a', 2])\n    Traceback (most recent call last):\n    ...\n    TypeError: All elements in the list must be numeric\n    \"\"\"\n\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if len(l) == 0:\n        return None\n    \n    # Ensure all elements are numeric\n    if not all(isinstance(x, (int, float)) for x in l):\n        raise TypeError(\"All elements in the list must be numeric\")\n    \n    # Sort the list in non-decreasing order\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate the median\n    mid = n // 2\n\n    if n % 2 == 1:\n        # If length of list is odd, return the middle element\n        return sorted_list[mid]\n    else:\n        # If length of list is even, return the average of the two middle elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    Assumes input string only contains lowercase alphabetic characters (a-z).\n    \"\"\"\n    # Verify that input is a string and only contains lowercase alphabetic characters\n    if not isinstance(s, str) or not all(ch.isalpha() and ch.islower() for ch in s):\n        raise ValueError(\"Input must be a string containing only lowercase alphabetic characters.\")\n    \n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    Assumes input string only contains lowercase alphabetic characters (a-z).\n    \"\"\"\n    # Verify that input is a string and only contains lowercase alphabetic characters\n    if not isinstance(s, str) or not all(ch.isalpha() and ch.islower() for ch in s):\n        raise ValueError(\"Input must be a string containing only lowercase alphabetic characters.\")\n    \n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n# Example usage:\nencoded = encode_shift(\"hello\")\nprint(f\"Encoded: {encoded}\")  # Output: \"mjqqt\"\ndecoded = decode_shift(encoded)\nprint(f\"Decoded: {decoded}\")  # Output: \"hello\""}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    \n    Args:\n        n (int): The upper limit of the range to sum.\n        \n    Returns:\n        int: The sum of numbers from 1 to n or raises an appropriate exception if input is invalid.\n        \n    Examples:\n        >>> sum_to_n(30)\n        465\n        >>> sum_to_n(100)\n        5050\n        >>> sum_to_n(5)\n        15\n        >>> sum_to_n(10)\n        55\n        >>> sum_to_n(1)\n        1\n    \"\"\"\n    \n    # Error handling for invalid inputs\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer greater than or equal to 1.\")\n    \n    # Using the arithmetic series sum formula: sum = n * (n + 1) // 2\n    return n * (n + 1) // 2\n\n# Test cases based on the docstring\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n        l (list): List of elements to check for monotonicity.\n    \n    Returns:\n        bool: True if elements are monotonic, otherwise False.\n    \n    Raises:\n        TypeError: If input is not a list or contains non-numeric types.\n    \n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n\n    # Input validation\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(i, (int, float)) for i in l):\n        raise TypeError(\"All elements in the list must be numeric (int or float)\")\n    \n    # Edge cases: empty list or a single element list\n    if len(l) <= 1:\n        return True\n\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    return increasing or decreasing\n\n# Examples to test the function\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    Fib(0) = 0\n    Fib(1) = 1\n    Fib(n) = Fib(n-1) + Fib(n-2) for n > 1\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    # Using iterative method to avoid deep recursion\n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    \n    return curr\n\n# Examples to test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    \n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # Handle base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    # Use a list to store computed values for efficient calculation\n    fibfib_sequence = [0, 0, 1]\n\n    for i in range(3, n + 1):\n        next_value = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\n        fibfib_sequence.append(next_value)\n\n    return fibfib_sequence[n]"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    Args:\n        x (int): The integer whose digits are to be circular shifted.\n        shift (int): The amount by which to shift the digits to the right.\n    \n    Returns:\n        str: The circularly shifted result as a string.\n        \n    Raises:\n        ValueError: If 'x' is not an integer or 'shift' is not a non-negative integer.\n        \n    Examples:\n        >>> circular_shift(12, 1)\n        \"21\"\n        >>> circular_shift(12, 2)\n        \"12\"\n    \"\"\"\n    # Validate input\n    if not isinstance(x, int) or not isinstance(shift, int):\n        raise ValueError(\"Both x and shift must be integers\")\n    if shift < 0:\n        raise ValueError(\"Shift must be a non-negative integer\")\n    \n    # Convert x to string to work with the digits\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift >= length:\n        # If shift is greater than or equal to the number of digits, return the reversed digits\n        return x_str[::-1]\n    \n    # Perform circular shift\n    shift = shift % length  # Ensure shift is within the bounds of the number of digits\n    circular_shifted = x_str[-shift:] + x_str[:-shift]\n    \n    return circular_shifted\n\n# Example usage\nprint(circular_shift(12, 1))  # Should output \"21\"\nprint(circular_shift(12, 2))  # Should output \"12\""}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if not isinstance(xs, list):\n        raise TypeError('Input must be a list')\n    \n    if len(xs) < 2:\n        return []\n\n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        derivative_coeffs.append(i * xs[i])\n\n    return derivative_coeffs\n\n# Example usage\nprint(derivative([3, 1, 2, 4, 5]))  # Should print: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # Should print: [2, 6]"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n\n    if not isinstance(s, str) or not isinstance(n, int) or n < 0:\n        raise ValueError(\"Invalid input: s must be a string and n must be a non-negative integer\")\n\n    try:\n        # Extract numbers using regular expressions\n        numbers = re.findall(r'\\d+', s)\n\n        if len(numbers) < 2:\n            raise ValueError(\"Invalid input string format\")\n\n        # Convert extracted numbers to integers\n        apples = int(numbers[0])\n        oranges = int(numbers[1])\n\n        if apples < 0 or oranges < 0:\n            raise ValueError(\"Invalid fruit count in the string\")\n\n        # Calculate the number of mangoes\n        mangoes = n - apples - oranges\n\n        if mangoes < 0:\n            raise ValueError(\"Total number of fruits in the basket cannot be less than the sum of apples and oranges\")\n        \n        return mangoes\n\n    except (IndexError, ValueError) as e:\n        raise ValueError(f\"Invalid input: {e}\")\n"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exists, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Ensure the input is a non-empty list\n    if not isinstance(lst, list) or len(lst) == 0:\n        raise ValueError(\"Input must be a non-empty list of positive integers\")\n\n    # Ensure all elements are positive integers\n    if not all(isinstance(x, int) and x > 0 for x in lst):\n        raise ValueError(\"All elements in the list must be positive integers\")\n\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n\n    # Initialize the result as -1\n    result = -1\n\n    # Iterate through the frequency dictionary\n    for number, count in frequency.items():\n        if count >= number and number > result:\n            result = number\n\n    return result\n\n# Example usage:\n# print(search([4, 1, 2, 2, 3, 1]))  # Output: 2\n# print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\n# print(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" \n    brackets is a string of \"(\" and \")\".\n    Return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # Early return for invalid types\n    if not isinstance(brackets, str):\n        raise ValueError(\"Input must be a string of '(' and ')' only.\")\n    \n    # Balance counter to keep track of open and close brackets\n    balance = 0\n    \n    for char in brackets:\n        if char not in ('(', ')'):\n            raise ValueError(\"Input must be a string of '(' and ')' only.\")\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If at any point balance is negative, there is an unmatched closing bracket\n        if balance < 0:\n            return False\n    \n    # If balance is zero, all opening brackets have matching closing brackets\n    return balance == 0"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    if s == \"\":\n        return 0\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    # Convert the string to lowercase to handle case insensitivity\n    s = s.lower()\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n            \n    return count\n\n# Unit tests to validate the implementation\nif __name__ == \"__main__\":\n    assert vowels_count(\"abcde\") == 2\n    assert vowels_count(\"ACEDY\") == 3\n    assert vowels_count(\"y\") == 1\n    assert vowels_count(\"sky\") == 1\n    assert vowels_count(\"rhythm\") == 1\n    assert vowels_count(\"syzygy\") == 1\n    assert vowels_count(\"sYzYgy\") == 1\n    assert vowels_count(\"AEIOU\") == 5\n    assert vowels_count(\"bcdfg\") == 0\n    assert vowels_count(\"\") == 0\n    try:\n        vowels_count(12345)\n    except TypeError as e:\n        assert str(e) == \"Input must be a string\"\n    \n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if not isinstance(n, int) or n <= 1:\n        raise ValueError(\"Input must be an integer greater than 1.\")\n    \n    def is_prime(x: int) -> bool:\n        \"\"\"Return True if x is a prime number, else False.\"\"\"\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Start with the smallest prime factor\n    factor = 2\n    # Divide n by smallest factor, then proceed to next primes until n becomes 1\n    while n > 1:\n        if n % factor == 0:\n            while n % factor == 0:\n                n //= factor\n            largest_factor = factor\n        factor += 1\n        # No need to check beyond the square root of the original n\n        if factor * factor > n and n > 1:\n            largest_factor = n\n            break\n    \n    return largest_factor"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n\n    # Check if input types are as expected\n    if not isinstance(q, list) or not isinstance(w, (int, float)):\n        raise TypeError(\"q should be a list and w should be a number (int or float).\")\n    \n    # Check if all elements in the list q are numbers\n    if not all(isinstance(item, (int, float)) for item in q):\n        raise ValueError(\"All elements of the list q should be numbers (int or float).\")\n    \n    # Check if the list q is palindromic\n    if q != q[::-1]:\n        return False\n\n    # Check if the sum of elements is less than or equal to the maximum weight\n    if sum(q) > w:\n        return False\n\n    return True"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n\n    The plucked node should be returned in a list [smallest_value, its index].\n    If there are no even values or the given array is empty, return [].\n    \n    :param arr: list of non-negative integers\n    :return: list with the smallest even value and its index, or [] if no even values found\n    \"\"\"\n\n    # Basic input validation\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list\")\n    \n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n\n    for index, value in enumerate(arr):\n        if not isinstance(value, int) or value < 0:\n            raise ValueError(\"All elements in the array must be non-negative integers\")\n        \n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index_of_smallest_even = index\n\n    if index_of_smallest_even == -1:\n        return []\n\n    return [smallest_even, index_of_smallest_even]"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    if a == 0:\n        return True\n\n    # Compute the cube root of the absolute value of a\n    cube_root = abs(a) ** (1 / 3.0)\n\n    # Check if there is an integer whose cube is the input a\n    lower_bound = int(cube_root)\n    upper_bound = lower_bound + 1\n\n    if lower_bound ** 3 == abs(a) or upper_bound ** 3 == abs(a):\n        return True\n\n    return False"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string\")\n    \n    sum_upper_ascii = 0\n    for char in s:\n        if char.isupper():\n            sum_upper_ascii += ord(char)\n    \n    return sum_upper_ascii\n\n# Example unit tests\nif __name__ == \"__main__\":\n    # Running provided examples\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n    # Edge cases\n    assert digitSum(\"ZZZZ\") == 360  # All upper case ASCII sums (90 + 90 + 90 + 90)\n    assert digitSum(\"aaaa\") == 0  # No upper case letters\n    assert digitSum(\"1234\") == 0  # Numeric input\n    assert digitSum(\"!@#$%^&*()_+|\") == 0  # Special character input\n    \n    # Performance case\n    assert digitSum(\"A\" * 10**6) == 65 * 10**6  # Large input of repeated 'A' characters\n    \n    print(\"All tests passed.\")\n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # Validate inputs are lists of strings\n    if not (isinstance(lst1, list) and isinstance(lst2, list)):\n        raise ValueError(\"Both inputs must be lists.\")\n    \n    if not all(isinstance(i, str) for i in lst1):\n        raise ValueError(\"All elements of the first list must be strings.\")\n    \n    if not all(isinstance(i, str) for i in lst2):\n        raise ValueError(\"All elements of the second list must be strings.\")\n    \n    # Calculate the total number of chars for both lists\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare total number of chars and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n\n# Example usage\nprint(total_match([], []))                              # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))       # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))    # \u279e ['4']"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Verify that input arguments are numbers (int or float)\n    if not all(isinstance(side, (int, float)) for side in (a, b, c)):\n        raise ValueError(\"Sides must be of type int or float\")\n\n    # Check for positive lengths\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n\n    # Check whether the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Using Heron's formula to calculate the area of a triangle\n    # s is the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using the formula: sqrt(s * (s - a) * (s - b) * (s - c))\n    try:\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    except ValueError as e:\n        # This handles potential math domain errors if the input is invalid\n        return -1\n\n    # Round the area to 2 decimal places\n    return round(area, 2)\n\n# Examples usage:\n# print(triangle_area(3, 4, 5))  # should return 6.00\n# print(triangle_area(1, 2, 10))  # should return -1"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if not isinstance(a, int) or a <= 0 or a >= 100:\n        return False\n    \n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Generate a list of all primes less than 100\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    \n    # Check combinations of three primes to see if their product equals 'a'\n    from itertools import combinations\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n    \n    return False\n\n# Example usage and test cases\nprint(is_multiply_prime(30))  # Expected output: True\nprint(is_multiply_prime(100)) # Expected output: False\nprint(is_multiply_prime(0))   # Expected output: False\nprint(is_multiply_prime(1))   # Expected output: False\nprint(is_multiply_prime(2))   # Expected output: False\nprint(is_multiply_prime(60))  # Expected output: False"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    \"\"\"\n    Returns true if a number x is a simple power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \n    Args:\n        x (int): The number to check.\n        n (int): The base number.\n        \n    Returns:\n        bool: True if x is a simple power of n, otherwise False.\n    \"\"\"\n    # Edge cases\n    if x <= 0 or n <= 1:\n        return False if not (x == 1 and n > 0) else True\n    \n    # Continuously divide x by n if x is divisible by n\n    while x % n == 0:\n        x //= n\n    \n    # If x is reduced to 1, then it's a simple power of n\n    return x == 1\n\n# Test cases\nprint(is_simple_power(1, 4)) # True\nprint(is_simple_power(2, 2)) # True\nprint(is_simple_power(8, 2)) # True\nprint(is_simple_power(3, 2)) # False\nprint(is_simple_power(3, 1)) # False\nprint(is_simple_power(5, 3)) # False"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    :param a: Base length of the triangle (must be a positive number)\n    :param h: Height of the triangle (must be a positive number)\n    :return: Area of the triangle\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \n    >>> triangle_area(0, 3)\n    Traceback (most recent call last):\n    ValueError: Base and height must be positive numbers.\n    \n    >>> triangle_area(5, -3)\n    Traceback (most recent call last):\n    ValueError: Base and height must be positive numbers.\n    \n    >>> triangle_area(\"5\", 3)\n    Traceback (most recent call last):\n    TypeError: Base and height must be numbers.\n    \n    >>> triangle_area(5, [3])\n    Traceback (most recent call last):\n    TypeError: Base and height must be numbers.\n    \"\"\"\n    \n    # Validate the inputs are numbers\n    if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        raise TypeError(\"Base and height must be numbers.\")\n    \n    # Validate the inputs are positive numbers\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n    \n    # Calculate the area\n    area = 0.5 * a * h\n    \n    return area\n\n# Sample usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not isinstance(lst, list):\n        raise TypeError(\"The input must be a list of integers\")\n    \n    # Input validation: ensure all elements are integers\n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"All elements in the list must be integers\")\n    \n    # Sort the list to facilitate access to minimum and maximum elements\n    sorted_lst = sorted(lst)\n    \n    result = []\n    while sorted_lst:\n        # Append the smallest element\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            # Append the largest element\n            result.append(sorted_lst.pop(-1))\n    \n    return result\n\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    if not isinstance(N, int):\n        raise ValueError(\"Input must be an integer\")\n\n    if not (0 <= N <= 10000):\n        raise ValueError(\"Input must be between 0 and 10000 inclusive\")\n\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_of_digits)[2:]\n\n# Test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"\nprint(solve(0))     # Output: \"0\"\nprint(solve(9999))  # Output: \"1001\""}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    \n    # Error handling for invalid inputs\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"Input should be a list of integers.\")\n    \n    n = len(arr)\n    if n == 0:\n        return 0\n\n    min_changes = 0\n    \n    # Iterate from both ends towards the center\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            min_changes += 1\n            \n    return min_changes\n\n# Example usage:\n# print(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))\n# print(smallest_change([1, 2, 3, 4, 3, 2, 2]))\n# print(smallest_change([1, 2, 3, 2, 1]))"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Converts a decimal integer to a binary string with 'db' at both ends.\n\n    Args:\n        decimal (int): The number in decimal form to convert.\n\n    Returns:\n        str: The binary representation of the decimal number, prefixed and suffixed with 'db'.\n\n    Examples:\n        decimal_to_binary(15)   # returns \"db1111db\"\n        decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    if not isinstance(decimal, int):\n        raise ValueError(\"Input must be an integer.\")\n    \n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    # Converting decimal to binary string\n    binary_str = bin(decimal)[2:]  # bin() returns a string starting with '0b', so we need to strip '0b'\n    \n    # Adding the 'db' prefix and suffix\n    result = f\"db{binary_str}db\"\n    \n    return result\n\n# Example usage:\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters are arranged in\n    ascending order based on ASCII value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Validate input type\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Split the input string into parts\n    parts = s.split(' ')\n    \n    # Function to sort each word's characters in ascending order by ASCII value\n    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    # Apply the sort_word function to each part and keep track of original spaces\n    sorted_parts = [sort_word(part) for part in parts]\n    \n    # Join the sorted parts back into a single string with spaces\n    result = ' '.join(sorted_parts)\n    \n    return result\n\n# Example Usage\n# print(anti_shuffle('Hi'))  # Output: 'Hi'\n# print(anti_shuffle('hello'))  # Output: 'ehllo'\n# print(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs to a list of letter grades based on the given scale.\n    \n    Args:\n        grades (list of float): List of GPAs.\n\n    Returns:\n        list of str: List of letter grades corresponding to the GPAs.\n        \n    Example:\n        numerical_letter_grade([4.0, 3.0, 1.7, 2.0, 3.5]) ==> ['A+', 'B', 'C-', 'C+', 'B+']\n    \"\"\"\n    \n    # Define the GPA to letter grade mapping\n    gpa_to_letter = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n    \n    # Check if input is a list\n    if not isinstance(grades, list):\n        raise ValueError(\"Input should be a list of GPAs.\")\n    \n    # Check if all elements are numbers\n    for grade in grades:\n        if not isinstance(grade, (int, float)):\n            raise TypeError(\"All elements in the list must be of type int or float.\")\n        if grade < 0.0 or grade > 4.0:\n            raise ValueError(\"All GPA values should be in the range 0.0 to 4.0.\")\n    \n    # Define the function to convert a single GPA to a letter grade\n    def gpa_to_letter_grade(gpa):\n        for threshold, letter_grade in gpa_to_letter:\n            if gpa >= threshold:\n                return letter_grade\n        return 'E'  # Should not reach here due to the range check\n    \n    # Convert all GPAs in the list\n    return [gpa_to_letter_grade(gpa) for gpa in grades]"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if the input is a string and has length of at least 3\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    if len(s) < 3:\n        return False\n\n    # Iterate through the string to check every 3 consecutive characters\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n\n# Example usage:\n# is_happy(\"abcd\") => True\n# is_happy(\"aabb\") => False"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # Check if the input list has fewer than 2 unique elements\n    if len(lst) < 2:\n        return None\n    \n    # Use a set to filter out duplicates, then sort the unique elements\n    unique_elements = sorted(set(lst))\n\n    # If there are less than 2 unique elements, return None\n    if len(unique_elements) < 2:\n        return None\n    \n    # Return the second smallest element\n    return unique_elements[1]\n\n# Example usage for testing:\nprint(next_smallest([1, 2, 3, 4, 5]))  # Expected: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Expected: 2\nprint(next_smallest([]))  # Expected: None\nprint(next_smallest([1, 1]))  # Expected: None\nprint(next_smallest([1, 2, 2, 3, 3]))  # Expected: 2"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Parameters:\n    lst (list of int): A non-empty list of integers.\n    \n    Returns:\n    int: The sum of even elements that are at odd indices.\n    \n    Raises:\n    ValueError: If the input list is empty.\n    TypeError: If the input is not a list or contains non-integer elements.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of integers.\")\n    if not lst:\n        raise ValueError(\"Input list must be non-empty.\")\n    \n    for element in lst:\n        if not isinstance(element, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n    \n    sum_even_elements_at_odd_indices = 0\n    \n    for idx in range(1, len(lst), 2):  # Start from the first odd index, and use step of 2\n        if lst[idx] % 2 == 0:\n            sum_even_elements_at_odd_indices += lst[idx]\n    \n    return sum_even_elements_at_odd_indices\n\n# Example usage:\n# print(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    # Check if inputs are valid\n    if not isinstance(lst, list) or not all(isinstance(row, list) for row in lst):\n        raise TypeError(\"lst must be a list of lists\")\n    if not isinstance(x, int):\n        raise TypeError(\"x must be an integer\")\n    \n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate through the matrix to find occurrences of x\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort coordinates first by rows in ascending order, then by columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Example usage:\n# print(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)) \n# Output should be: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digits by taking the remainder when divided by 10\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Example test cases to verify the implementation:\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))    # should return 72\nprint(multiply(2020, 1851))# should return 0\nprint(multiply(14,-15))    # should return 20"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # If n is 1, the only numbers considered are 1 to 9,\n    # all which are counted except for the cases when 1 appears\n    if n == 1:\n        return 1  # Only the single number '1' is counted once\n\n    total_ends_with_1 = 9 * 10**(n - 2)  # Ending with '1' (excluding '1' at the start)\n    total_starts_with_1 = 10**(n - 1)  # Starting with '1'\n    overlap_starts_and_ends_with_1 = 1\n    total_count = total_starts_with_1 + total_ends_with_1 - overlap_starts_and_ends_with_1\n\n    return total_count"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the input string\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n    \n    return prime_count\n\n# Examples for quick testing\nprint(hex_key(\"AB\"))        # Output: 1\nprint(hex_key(\"1077E\"))     # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))      # Output: 2"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if the given number is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_check = int(n ** 0.5) + 1\n        for i in range(3, max_check, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Ensure the input is a string\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n    \n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    \n    # Helper function to shift character\n    def shift_char(c, shift_amount):\n        shifted_ord = ord(c) + shift_amount\n        if shifted_ord > ord('z'):\n            shifted_ord -= 26\n        return chr(shifted_ord)\n\n    # Validate the input to ensure it is a string of lowercase alphabetic characters\n    if not isinstance(s, str) or not s.isalpha() or not s.islower():\n        raise ValueError(\"Input must be a string of lowercase alphabetic characters\")\n    \n    shift_amount = 2 * 2  # Calculate the shift amount once as it is constant\n    encrypted_string = ''.join(shift_char(char, shift_amount) for char in s)\n    \n    return encrypted_string\n\n# Example usage (uncomment to test):\n# print(encrypt('hi'))          # Should return 'lm'\n# print(encrypt('asdfghjkl'))   # Should return 'ewhjklnop'\n# print(encrypt('gf'))          # Should return 'kj'\n# print(encrypt('et'))          # Should return 'ix'"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Validate input to ensure it is a string\n    if not isinstance(s, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    # Define the set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize the counter for uppercase vowels at even indices\n    count = 0\n    \n    # Iterate over the string, considering only even indices\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    return count\n\n# Example usages:\nprint(count_upper('aBCdEf'))  # should return 1\nprint(count_upper('abcdefg'))  # should return 0\nprint(count_upper('dBBE'))  # should return 0"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    # Validate input\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n\n    # Initialize the list with the first level\n    pile = [n]\n\n    # Determine the increment: 2 if n is even, 2 if n is odd (since both odd and even next numbers differ by 2)\n    increment = 2\n    \n    # Fill the rest of the pile\n    for i in range(1, n):\n        n += increment\n        pile.append(n)\n    \n    return pile"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    if not isinstance(array, list):\n        raise TypeError(\"Input should be of type list\")\n    \n    if not all(isinstance(x, int) and x >= 0 for x in array):\n        raise ValueError(\"All elements in the array should be non-negative integers\")\n    \n    # Handle edge cases\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    \n    # Calculate the sum of first and last element to decide sorting order\n    sum_first_last = array[0] + array[-1]\n    \n    # Sort array in ascending order if sum is odd, otherwise descending order\n    sorted_array = sorted(array)\n    if sum_first_last % 2 == 0:\n        sorted_array.reverse()\n    \n    return sorted_array\n\n# Testing the function with the provided examples\nprint(sort_array([]))  # Output: []\nprint(sort_array([5]))  # Output: [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # Output: [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Replace comma with space, then split by spaces\n    words = s.replace(\",\", \" \").split()\n    \n    return words\n\n# Example usage (for demonstration):\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure inputs are positive numbers\n    if not (isinstance(x, (int, float)) and isinstance(y, (int, float))):\n        raise TypeError(\"Inputs must be numbers.\")\n    if x <= 0 or y <= 0:\n        raise ValueError(\"Inputs must be positive numbers.\")\n\n    # Ensure that x and y are properly ordered\n    if x > y:\n        return -1\n\n    # Finding the largest even number within the range [x, y]\n    # Start from y and move backwards\n    even_num = int(y) if int(y) % 2 == 0 else int(y) - 1\n\n    while even_num >= int(x):\n        return even_num\n        even_num -= 2\n\n    return -1"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check if dictionary is empty\n    if not d:\n        return False\n    \n    # Flags to keep track of case consistency\n    all_lower = True\n    all_upper = True\n    \n    for key in d:\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            all_upper = False\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False\n\n    # Return True if all keys are either all lower case or all upper case\n    return all_lower or all_upper\n\n# Test cases (optional, only for internal verification, not part of the required function definition)\nassert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) == True\nassert check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) == False\nassert check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) == False\nassert check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False\nassert check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True\nassert check_dict_case({}) == False\nassert check_dict_case({\"lower\": \"case\", \"keys\": \"only\"}) == True\nassert check_dict_case({\"UPPER\": \"CASE\", \"KEYS\": \"ONLY\"}) == True\nassert check_dict_case({\"Mixed\": \"Case\", \"Keys\": \"Here\"}) == False\nassert check_dict_case({\"mIxEd\": \"case\", \"kEyS\": \"here\"}) == False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the English alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    if not isinstance(message, str):\n        raise TypeError(\"The input message must be a string\")\n    \n    def shift_vowel(c):\n        vowels = 'aeiou'\n        if c in vowels:\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif c in vowels.upper():\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n    \n    result = []\n    for char in message:\n        if char.isalpha():\n            shifted_char = shift_vowel(char)\n            result.append(shifted_char.swapcase())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n\n# Test cases to verify the implementation\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'\nassert encode('Python') == 'pYTHQN'\nassert encode('HELLO') == 'JHNNQ'\nassert encode('aeiou') == 'CGKQW'\nassert encode('AEIOU') == 'cgkqw'"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Validate input\n    if not all(isinstance(i, int) and i > 0 for i in x):\n        raise ValueError(\"All elements in the list must be positive integers.\")\n    \n    # Define a function to check if a number has any even digits\n    def has_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n\n    # Filter out numbers with even digits\n    no_even_digits_list = [num for num in x if not has_even_digit(num)]\n\n    # Return the sorted list\n    return sorted(no_even_digits_list)\n\n# Example usage and tests\nif __name__ == \"__main__\":\n    print(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\n    print(unique_digits([152, 323, 1422, 10]))  # Output: []\n\n# Note: Additional unit tests should be written separately for thorough testing."}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    try:\n        num = float(value)  # Convert input to a float\n    except ValueError:\n        raise ValueError(f\"Invalid input: '{value}' is not a number\")\n\n    # Use math module for consistent rounding away from zero\n    import math\n\n    # Check if the value is equidistant from two integers\n    if num > 0:\n        return math.floor(num + 0.5)  # Round away from zero\n    if num < 0:\n        return math.ceil(num - 0.5)  # Round away from zero\n\n    return int(num)  # For cases where num is already an integer\n\n# Example usage for verification\nif __name__ == \"__main__\":\n    print(closest_integer(\"10\"))    # Should print 10\n    print(closest_integer(\"15.3\"))  # Should print 15\n    print(closest_integer(\"14.5\"))  # Should print 15\n    print(closest_integer(\"-14.5\"))  # Should print -15"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Define the mapping from numbers to their word equivalents\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter the list to include only numbers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Map each number in the reversed array to its corresponding name\n    result = [num_to_name[num] for num in reversed_arr]\n\n    return result\n\n# Example usage:\n# print(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# print(by_length([]))  # []\n# print(by_length([1, -1, 55]))  # ['One']"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Return True if the given number is prime, else False.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of the given number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is None:\n        raise ValueError(\"No prime number found in the list.\")\n\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    if not isinstance(test, str):\n        raise ValueError(\"Input must be a string\")\n\n    if not test:\n        return {}\n\n    letter_counts = {}\n    max_count = 0\n\n    # Split the string into individual letters\n    letters = test.split()\n\n    for letter in letters:\n        if len(letter) != 1 or not letter.islower():\n            raise ValueError(\"All elements must be single lowercase letters\")\n\n        # Count occurrences of each letter\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n        \n        # Update the max count\n        if letter_counts[letter] > max_count:\n            max_count = letter_counts[letter]\n\n    # Filter the letters with max count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return result"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == n:  # stop early if we already have 'n' primes\n                break\n    return primes\n\n# Example usage:\nprint(count_up_to(5))    # Output: [2, 3]\nprint(count_up_to(11))   # Output: [2, 3, 5, 7]\nprint(count_up_to(0))    # Output: []\nprint(count_up_to(20))   # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))    # Output: []\nprint(count_up_to(18))   # Output: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    # Validate inputs\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    if n <= 0 or m <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if n > m:\n        return -1\n\n    # Calculate the average\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total_sum / count\n\n    # Round the average\n    rounded_average = round(average)\n\n    # Convert to binary\n    binary_representation = bin(rounded_average)\n\n    return binary_representation\n\n# Testing the function with example cases\nprint(rounded_avg(1, 5))  # Expected output: \"0b11\"\nprint(rounded_avg(7, 5))  # Expected output: -1\nprint(rounded_avg(10, 20)) # Expected output: \"0b1111\"\nprint(rounded_avg(20, 33)) # Expected output: \"0b11010\""}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Check for empty array input\n    if not arr:\n        return True\n    \n    n = len(arr)\n\n    # Find the index where the array would split for a sorted sequence\n    split_index = -1\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            if split_index != -1:\n                # If we have already found one split point, another one means it's impossible\n                return False\n            split_index = i\n\n    # If there was no split, the array is already sorted\n    if split_index == -1:\n        return True\n    \n    # Check if the split array makes a complete sorted array\n    left_part = arr[split_index:]\n    right_part = arr[:split_index]\n    sorted_arr = left_part + right_part\n    return sorted_arr == sorted(arr)\n\n# The following statements are for testing the example cases in the docstring\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Expected output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Expected output: False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements between them \n    to make lst1 a list of only even numbers. There is no limit on the number of exchanged \n    elements between lst1 and lst2. If it is possible to exchange elements between the lst1 \n    and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\".\n    \n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    \n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    if not isinstance(lst1, list) or not isinstance(lst2, list):\n        raise TypeError(\"Both lst1 and lst2 must be lists.\")\n    \n    for lst in [lst1, lst2]:\n        for x in lst:\n            if not isinstance(x, (int, float)) or isinstance(x, bool):\n                raise TypeError(\"Both lists must contain only numbers.\")\n    \n    # Check how many odd numbers are in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    if odd_count_lst1 == 0:\n        return \"YES\"  # lst1 is already all even numbers\n    \n    # Check if lst2 has enough even numbers to swap with odd numbers in lst1\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # \"NO\""}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    This function takes an array of integers and returns the count of elements \n    for which the sum of digits is greater than 0. If a number is negative, \n    its first signed digit will be negative.\n\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        # Convert the number to string handling the negative sign\n        num_str = str(num)\n        # Handle the first digit separately if it's negative\n        if num_str[0] == '-':\n            digit_sum = -int(num_str[1])\n            num_str = num_str[2:]\n        else:\n            digit_sum = int(num_str[0])\n            num_str = num_str[1:]\n\n        # Add the rest of the digits\n        for char in num_str:\n            digit_sum += int(char)\n        \n        return digit_sum\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input should be a list of integers\")\n    \n    count = 0\n    for number in arr:\n        if not isinstance(number, int):\n            raise ValueError(\"All items in the array should be integers\")\n        \n        if sum_of_digits(number) > 0:\n            count += 1\n\n    return count\n\n# Unit tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    \"\"\"\n    Task:\n    We are given two strings s and c. You have to delete all the characters in s that are equal to any character in c,\n    then check if the resultant string is a palindrome.\n    \n    A string is called a palindrome if it reads the same backward as forward.\n    \n    Args:\n    s (str): The original string.\n    c (str): The string containing characters to be deleted from 's'.\n    \n    Returns:\n    tuple: A tuple containing the resultant string and a boolean indicating if the resultant string is a palindrome.\n    \n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    \n    # Check for type errors in the input.\n    if not isinstance(s, str) or not isinstance(c, str):\n        raise ValueError(\"Both inputs must be strings\")\n    \n    # Create a set of characters to delete for faster lookup.\n    chars_to_delete = set(c)\n    \n    # Delete characters from 's' that are in 'c'.\n    resulting_string = ''.join(char for char in s if char not in chars_to_delete)\n    \n    # Check if the resulting string is a palindrome.\n    is_palindrome = resulting_string == resulting_string[::-1]\n    \n    return (resulting_string, is_palindrome)\n"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    if not isinstance(n, int) or n < 1 or n > 1000:\n        raise ValueError(\"n must be an integer between 1 and 1000, inclusive.\")\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n\n# Example test cases\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, bucket_capacity):\n    import math\n    \n    def validate_input():\n        \"\"\"\n        Validate the input grid and bucket capacity.\n        \"\"\"\n        if not isinstance(grid, list) or not grid:\n            raise ValueError(\"Grid must be a non-empty list\")\n        for row in grid:\n            if not isinstance(row, list) or not all(isinstance(cell, int) and cell in (0, 1) for cell in row):\n                raise ValueError(\"Each row in the grid must be a list of integers (0 or 1)\")\n        if not isinstance(bucket_capacity, int) or bucket_capacity <= 0:\n            raise ValueError(\"Bucket capacity must be a positive integer\")\n\n    # Validate inputs\n    validate_input()\n    \n    total_water_units = sum(sum(row) for row in grid)  # Total number of water units in the grid\n    if total_water_units == 0:\n        return 0\n\n    # Calculate the number of bucket lowers required\n    lowers_required = math.ceil(total_water_units / bucket_capacity)\n    \n    return lowers_required\n\n# Example usage:\ngrid1 = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\nbucket_capacity1 = 1\nprint(max_fill(grid1, bucket_capacity1))  # Output: 6\n\ngrid2 = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\nbucket_capacity2 = 2\nprint(max_fill(grid2, bucket_capacity2))  # Output: 5\n\ngrid3 = [[0, 0, 0], [0, 0, 0]]\nbucket_capacity3 = 5\nprint(max_fill(grid3, bucket_capacity3))  # Output: 0"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    if not isinstance(word, str):\n        raise TypeError(\"Input must be a string.\")\n    \n    if len(word) < 3:\n        return \"\"\n    \n    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    vowel_positions = [i for i, char in enumerate(word) if char in vowels]\n    \n    if not vowel_positions:\n        return \"\"\n    \n    for i in range(len(vowel_positions) - 1, -1, -1):\n        pos = vowel_positions[i]\n        if 0 < pos < len(word) - 1 and word[pos - 1] in consonants and word[pos + 1] in consonants:\n            return word[pos]\n    \n    return \"\"\n\n# Example unit tests to verify the function\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"basket\") == \"e\"\n    assert get_closest_vowel(\"acde\") == \"\"\n    assert get_closest_vowel(\"BcdefG\") == \"\"\n\ntest_get_closest_vowel()"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Check if the input is a valid list\n    if not isinstance(nums, list):\n        raise ValueError(\"Input must be a list of integers.\")\n    \n    # Check if the list is empty\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n    \n    # Initialize variables to store the minimum sum found so far and the current sub-array sum\n    current_sum = float('inf')\n    min_sum = float('inf')\n    \n    for num in nums:\n        # Check if the element is an integer\n        if not isinstance(num, int):\n            raise ValueError(\"All elements in the input list must be integers.\")\n        \n        # Update the current sum: either extend the sub-array or start a new sub-array at the current number\n        current_sum = min(current_sum + num, num)\n        \n        # Update the minimum sum found so far\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Example usage:\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Should return 1\nprint(minSubArraySum([-1, -2, -3]))  # Should return -6"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Validate inputs\n    if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"arr must be a list of integers\")\n    if not isinstance(k, int) or k < 1 or k > len(arr):\n        raise ValueError(\"k must be an integer between 1 and the length of arr\")\n\n    # Initialize the sum\n    total_sum = 0\n\n    # Iterate over the first k elements\n    for i in range(min(k, len(arr))):\n        if -99 <= arr[i] <= 99:  # Check if the element has at most two digits\n            total_sum += arr[i]\n\n    return total_sum"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    if not isinstance(s, str) or not isinstance(n, int) or n < 0:\n        raise ValueError('Invalid input: s should be a string and n should be a non-negative integer.')\n\n    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    selected_words = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            selected_words.append(word)\n\n    return selected_words\n\n\n# Testing the function with given examples\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))  # ==> []\nprint(select_words(\"Hello world\", 4))  # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))  # ==> [\"Uncle\"]\n\n# Additional edge cases\nprint(select_words(\"\", 2))  # ==> []\nprint(select_words(\"silent\", 3))  # ==> [\"silent\"]\nprint(select_words(\"upperCASE\", 6))  # ==> [\"upperCASE\"]\nprint(select_words(\"s\", 0))  # ==> []\nprint(select_words(\"only vowels\", 0))  # ==> [\"only\"]"}
{"task_id": "HumanEval/106", "completion": "from math import factorial\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n\n    return result\n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if not isinstance(arr, list) or not isinstance(k, int):\n        raise TypeError(\"arr must be a list and k must be an integer\")\n    \n    if k < 0 or k > len(arr):\n        raise ValueError(\"k must be a non-negative integer within the length of the arr\")\n\n    if k == 0:\n        return []\n\n    # Using a heap to find the k largest elements efficiently\n    import heapq\n\n    # Find the k largest elements in the array\n    largest_elements = heapq.nlargest(k, arr)\n\n    # Sort the result since the output requires a sorted order\n    largest_elements.sort()\n\n    return largest_elements"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all the odd elements that are in even positions.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    # Check if the input is a list of integers\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list\")\n\n    if not all(isinstance(x, int) for x in lst):\n        raise ValueError(\"All elements in the list should be integers\")\n\n    # Initialize the sum\n    sum_odd_even_positions = 0\n\n    # Iterate over the list, considering only even positions (0-based index)\n    for index in range(0, len(lst), 2):\n        element = lst[index]\n        # Check if the element at the even position is odd\n        if element % 2 != 0:\n            sum_odd_even_positions += element\n\n    return sum_odd_even_positions\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # 12\nprint(solution([3, 3, 3, 3, 3]))  # 9\nprint(solution([30, 13, 24, 321]))  # 0\nprint(solution([1, 2, 3, 4, 5]))  # 9\nprint(solution([2]))  # 0"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    odd_numbers = set()\n\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n\n    odd_numbers.add(1)\n\n    return sorted(odd_numbers)\n\n# Unit Tests (These should be in a separate test file in practice)\nif __name__ == \"__main__\":\n    assert get_odd_collatz(5) == [1, 5], \"Test case 1 failed\"\n    assert get_odd_collatz(1) == [1], \"Test case 2 failed\"\n    assert get_odd_collatz(7) == [1, 3, 5, 7], \"Test case 3 failed\"\n    assert get_odd_collatz(10) == [1, 5], \"Test case 4 failed\"\n    \n    try:\n        get_odd_collatz(-5)\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive integer\"\n        \n    try:\n        get_odd_collatz(0)\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive integer\"\n        \n    try:\n        get_odd_collatz(\"abc\")\n    except ValueError as e:\n        assert str(e) == \"Input must be a positive integer\"\n    \n    print(\"All tests passed.\")"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n            sum_of_magnitudes += num\n        elif num < 0:\n            sign = -1\n            sum_of_magnitudes += abs(num)\n        else:  # num == 0\n            return 0\n\n        product_of_signs *= sign\n\n    return product_of_signs * sum_of_magnitudes\n\n\n# Testing the implementation with provided examples\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))         # Output: 0\nprint(prod_signs([]))             # Output: None"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    \n    if not isinstance(lst, list) or not all(isinstance(s, str) and s.isdigit() for s in lst):\n        raise ValueError(\"Input must be a list of strings, where each string consists of only digits.\")\n    \n    result = []\n    template = \"the number of odd elements {n}n the str{n}ng {n} of the {n}nput.\"\n    \n    for num_str in lst:\n        # Count the number of odd digits in the string\n        odd_count = sum(1 for char in num_str if int(char) % 2 != 0)\n        # Replace all occurrences of 'i' with the count of odd digits\n        result.append(template.format(n=odd_count))\n    \n    return result"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    if not isinstance(S, str):\n        raise ValueError(\"Input should be a string\")\n    \n    # Define the sentence delimiters\n    sentence_delimiters = {'.', '?', '!'}\n\n    # Split the input string into sentences\n    sentences = []\n    current_sentence = []\n    for char in S:\n        if char in sentence_delimiters:\n            if current_sentence:  # Avoid adding empty sentences\n                # Add the sentence to the list, stripping leading/trailing spaces\n                sentences.append(''.join(current_sentence).strip())\n                current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:  # Add the last accumulated sentence if there's no trailing delimiter\n        sentences.append(''.join(current_sentence).strip())\n\n    # Count sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I \"))\n\n    return boredom_count"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text,\n    you should split on commas ','; if no commas exist, you should return the number of lower-case letters\n    with an odd order in the alphabet. ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") \u279e 3\n    '''\n    \n    if not isinstance(txt, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    \n    def is_odd_order(char):\n        return (ord(char) - ord('a')) % 2 == 1\n    \n    odd_order_count = sum(1 for char in txt if char.islower() and is_odd_order(char))\n    \n    return odd_order_count"}
{"task_id": "HumanEval/127", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Determine whether the length of intersection of two intervals is a prime number.\n    \"\"\"\n    # Input Handling\n    if (not isinstance(interval1, tuple) or len(interval1) != 2 or \n        not all(isinstance(i, int) for i in interval1)):\n        raise ValueError(\"interval1 must be a tuple of two integers\")\n\n    if (not isinstance(interval2, tuple) or len(interval2) != 2 or \n        not all(isinstance(i, int) for i in interval2)):\n        raise ValueError(\"interval2 must be a tuple of two integers\")\n\n    # Unpack intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end1 or start2 > end2:\n        raise ValueError(\"In each interval, the start must be less or equal to the end\")\n\n    # Determine the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start > intersection_end:\n        return \"NO\"\n\n    # Length of intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage:\n# print(intersection((1, 2), (2, 3)))  # expected output: \"NO\"\n# print(intersection((-1, 1), (0, 4)))  # expected output: \"NO\"\n# print(intersection((-3, -1), (-5, 5)))  # expected output: \"YES\""}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples:\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    if any(not isinstance(x, int) or x < 0 for x in lst):\n        raise ValueError(\"All elements in the list must be non-negative integers\")\n    \n    if len(lst) < 2:\n        return True\n    \n    previous_val = lst[0]\n    duplicate_count = 1\n    \n    for current_val in lst[1:]:\n        if current_val < previous_val:\n            return False\n        if current_val == previous_val:\n            duplicate_count += 1\n            if duplicate_count > 2:\n                return False\n        else:\n            duplicate_count = 1\n        previous_val = current_val\n    \n    return True\n\n# Example usage\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # Should return True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # Should return False\nprint(is_sorted([1, 3, 2, 4, 5]))    # Should return False\nprint(is_sorted([1, 2, 3, 4, 5]))    # Should return True"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Validate input type and values\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers\")\n    \n    if not all(isinstance(x, int) and x >= 0 for x in arr):\n        raise ValueError(\"All elements in the array must be non-negative integers\")\n    \n    # Function to count the number of ones in the binary representation of a number\n    def count_ones(num):\n        return bin(num).count('1')\n    \n    # Sort primarily by the number of ones in the binary representation\n    # In case of a tie, sort by the numeric value\n    sorted_arr = sorted(arr, key=lambda x: (count_ones(x), x))\n    \n    return sorted_arr\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    assert sort_array([0, 1, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert sort_array([10, 14, 3, 7, 8]) == [8, 3, 10, 7, 14]\n    assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert sort_array([5, 9, 2, 6, 1]) == [1, 2, 6, 5, 9]\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    import re\n    \n    if not date:\n        return False\n\n    # Check if the date format is mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Check valid month range\n    if month < 1 or month > 12:\n        return False\n\n    # Dictionary to store maximum days in each month (considering February as 29 days initially)\n    max_days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, \n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    # Check valid day range for the month\n    if day < 1 or day > max_days_in_month.get(month, 31):\n        return False\n\n    # Additional check for February to account for leap years\n    if month == 2:\n        # Leap year check: A year is a leap year if it is divisible by 4,\n        # but not divisible by 100, except when it is divisible by 400\n        is_leap_year = year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n        if not is_leap_year and day > 28:\n            return False\n\n    return True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (ceiling) first.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    \n    total_sum = 0\n    for num in lst:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"All elements in the list must be integers or floats.\")\n        \n        ceil_num = math.ceil(num)\n        total_sum += ceil_num ** 2\n    \n    return total_sum\n\n# Examples\nprint(sum_squares([1,2,3]))  # Output: 14\nprint(sum_squares([1,4,9]))  # Output: 98\nprint(sum_squares([1,3,5,7]))  # Output: 84\nprint(sum_squares([1.4,4.2,0]))  # Output: 29\nprint(sum_squares([-2.4,1,1]))  # Output: 6"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    # Ensure the input is valid and contains exactly two strings\n    if not isinstance(lst, list) or len(lst) != 2 or not all(isinstance(s, str) for s in lst):\n        raise ValueError(\"Input must be a list of exactly two strings.\")\n    \n    s1, s2 = lst\n    \n    # Count the balance of parentheses for each string\n    def count_balance(s):\n        balance = 0\n        min_balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            # Track the minimum balance to check valid prefix\n            min_balance = min(min_balance, balance)\n        return balance, min_balance\n    \n    balance1, min_balance1 = count_balance(s1)\n    balance2, min_balance2 = count_balance(s2)\n    \n    # Check if any concatenation of s1 and s2 or s2 and s1 results in a balanced parentheses string\n    # Combine s1 + s2\n    if min_balance1 >= 0 and min_balance1 + balance2 >= 0 and balance1 + balance2 == 0:\n        return 'Yes'\n    \n    # Combine s2 + s1\n    if min_balance2 >= 0 and min_balance2 + balance1 >= 0 and balance2 + balance1 == 0:\n        return 'Yes'\n    \n    return 'No'"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0.\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    \n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer greater than zero.\")\n    \n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= math.factorial(i)\n    \n    return special_fact\n\n# Example usage:\n# result = special_factorial(4)\n# print(result)  # Output: 288"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    product = 1\n    odd_digit_found = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            odd_digit_found = True\n        n //= 10\n    \n    return product if odd_digit_found else 0\n\n# Example usage:\n# print(digits(1))  # Output: 1\n# print(digits(4))  # Output: 0\n# print(digits(235))  # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    # Validate input type\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string.\")\n    \n    stack = []\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:  # If the stack is not empty after popping an element, it means there is nesting\n                    return True\n            else:\n                return False\n    \n    # After processing all characters, check if there was any genuine nesting detected\n    return False\n\n# Example usage:\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Validate input\n    if not isinstance(txt, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Trim any trailing spaces from the input\n    txt = txt.rstrip()\n    \n    # Check if the string becomes empty after stripping spaces\n    if not txt:\n        return False\n\n    # Check the last character\n    last_char = txt[-1]\n\n    # If the last character is not alphabetical, return False\n    if not last_char.isalpha():\n        return False\n\n    # Check if the last character is a part of a word\n    # It should be immediately preceded by a space to qualify as not part of a word\n    if len(txt) > 1 and txt[-2] != ' ':\n        return False\n\n    return True\n\n# Sample tests for verification\nprint(check_if_last_char_is_a_letter(\"apple pie\"))    # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))    # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))   # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))               # \u279e False\nprint(check_if_last_char_is_a_letter(\"a\"))            # \u279e True\nprint(check_if_last_char_is_a_letter(\" a\"))           # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple\"))        # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple \"))       # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"All elements in the array must be integers or floats.\")\n\n    if len(arr) < 2:\n        return -1\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n\n    return -1\n\n# Example usage\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    if not isinstance(text, str):\n        raise ValueError(\"Input must be a string\")\n\n    result = []\n    i = 0\n    n = len(text)\n\n    while i < n:\n        # Count consecutive spaces\n        space_count = 0\n        while i < n and text[i] == ' ':\n            space_count += 1\n            i += 1\n        \n        # If more than two consecutive spaces\n        if space_count > 2:\n            result.append('-')\n        # If one or two spaces\n        elif space_count > 0:\n            result.extend(['_'] * space_count)\n        # If the current character is not a space\n        if i < n and text[i] != ' ':\n            result.append(text[i])\n            i += 1\n\n    return ''.join(result)\n\n# Test cases\nprint(fix_spaces(\"Example\"))         # Should return: \"Example\"\nprint(fix_spaces(\"Example 1\"))       # Should return: \"Example_1\"\nprint(fix_spaces(\" Example 2\"))      # Should return: \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))    # Should return: \"_Example-3\""}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\nfrom collections import deque\n\ndef minPath(grid, k):\n    import heapq\n    \n    # Validate input\n    N = len(grid)\n    if any(len(row) != N for row in grid) or N < 2 or k <= 0:\n        raise ValueError(\"Invalid grid or k value\")\n\n    # Directions for moving up, down, left, and right\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Function to check if a given position is within grid bounds\n    def in_bounds(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    # Use a min-heap (priority queue) to store (current_path, x, y) tuples\n    heap = []\n\n    # Initialize the heap with all starting positions\n    for i in range(N):\n        for j in range(N):\n            heappush(heap, ([grid[i][j]], i, j))\n    \n    # BFS with priority queue\n    while heap:\n        path, x, y = heappop(heap)\n        \n        # If we reached the desired path length, return the path\n        if len(path) == k:\n            return path\n        \n        # Explore all 4 possible directions\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if in_bounds(nx, ny):\n                new_path = list(path)\n                new_path.append(grid[nx][ny])\n                heappush(heap, (new_path, nx, ny))\n\n# Test cases as per the examples in the docstring\nif __name__ == \"__main__\":\n    print(minPath([[1,2,3],[4,5,6],[7,8,9]], 3))  # Output: [1, 2, 1]\n    print(minPath([[5,9,3],[4,1,6],[7,8,2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    max_negative = None\n    min_positive = None\n\n    for num in lst:\n        if isinstance(num, int):  # Ensure the list consists of integers\n            if num < 0:\n                if max_negative is None or num > max_negative:\n                    max_negative = num\n            elif num > 0:\n                if min_positive is None or num < min_positive:\n                    min_positive = num\n        else:\n            raise ValueError(\"The list must contain only integers\")\n\n    return (max_negative, min_positive)\n\n# Unit test\nassert largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nassert largest_smallest_integers([]) == (None, None)\nassert largest_smallest_integers([0]) == (None, None)\nassert largest_smallest_integers([-1, -2, -3, -4]) == (-1, None)\nassert largest_smallest_integers([-1, -2, -3, 0, 4, 1, 2]) == (-1, 1)"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    # Check if input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    # A cache to store the precomputed tribonacci values\n    cache = {}\n    \n    # Define the recursive function with memoization\n    def tribonacci(k):\n        if k == 1:\n            return 3\n        elif k == 0:\n            return 1  # According to the examples, let's assume tri(0) = 1\n        elif k in cache:\n            return cache[k]\n        \n        if k % 2 == 0:  # If k is even\n            result = 1 + k / 2\n        else:          # If k is odd\n            result = tribonacci(k - 1) + tribonacci(k - 2) + tribonacci(k + 1)\n        \n        cache[k] = result\n        return result\n    \n    # Generate the sequence for the first n+1 numbers\n    tribonacci_sequence = []\n    for i in range(n + 1):\n        tribonacci_sequence.append(int(tribonacci(i)))\n        \n    return tribonacci_sequence"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Parameters:\n    n (int): The number to evaluate\n    \n    Returns:\n    bool: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise\n    \n    Examples:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    \n    # Validate input to ensure it's an integer and a positive number\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n    \n    # A number can be written as the sum of 4 positive even numbers if it is even\n    # and its value is at least 8 (since the smallest sum of four positive even numbers is 2+2+2+2=8)\n    return n >= 8 and n % 2 == 0\n\n# Examples to demonstrate the function's usage (these would usually be part of unit tests)\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    def convert_to_float(value):\n        \"\"\"Convert input to float if it's a string with commas or periods.\"\"\"\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                return float(value)\n            except ValueError:\n                raise ValueError(f\"Invalid string format for a real number: '{value}'\")\n        elif isinstance(value, (int, float)):\n            return float(value)\n        else:\n            raise TypeError(f\"Unsupported type {type(value)}. Supported types are str, int, and float.\")\n    \n    try:\n        a_converted = convert_to_float(a)\n        b_converted = convert_to_float(b)\n    except (TypeError, ValueError) as e:\n        raise e\n    \n    if a_converted == b_converted:\n        return None\n    \n    if a_converted > b_converted:\n        return a\n    else:\n        return b\n\n# Example test cases\nprint(compare_one(1, 2.5))         # \u279e 2.5\nprint(compare_one(1, \"2,3\"))       # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))     # \u279e \"6\"\nprint(compare_one(\"1\", 1))         # \u279e None"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    # Validate input\n    if not isinstance(lst, list):\n        raise ValueError(\"Input should be a list\")\n    for item in lst:\n        if not isinstance(item, int):\n            raise ValueError(\"All elements in the list should be integers\")\n    \n    total_sum = 0\n\n    for index, value in enumerate(lst):\n        # Apply the rules based on the index\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n\n    return total_sum"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n\n    # Validate input\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list of strings\")\n    \n    if not all(isinstance(s, str) for s in lst):\n        raise TypeError(\"All elements in the list must be strings\")\n\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list primarily by length and secondarily by alphabetical order\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_list\n\n# You can test the function using the assert statements provided in the docstring:\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n    \n    # Check the number of dots in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the base name and the extension\n    base_name, extension = file_name.split('.')\n    \n    # Check if the base name is non-empty and starts with a letter\n    if not base_name or not base_name[0].isalpha():\n        return 'No'\n\n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Example usage:\nprint(file_name_check(\"example.txt\"))  # 'Yes'\nprint(file_name_check(\"1example.dll\"))  # 'No'\nprint(file_name_check(\"e.xample.exe\"))  # 'No'\nprint(file_name_check(\"examplee.xe\"))   # 'No'\nprint(file_name_check(\"exa3mple.txt\"))  # 'Yes'\nprint(file_name_check(\"exa4mpl5e2.exe\")) # 'Yes'\nprint(file_name_check(\"examp123e.exe\")) # 'No'"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Parse the fraction strings to Fraction objects\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    \n    # Calculate the product of the two fractions\n    product = fraction_x * fraction_n\n    \n    # Check if the product is a whole number\n    return product.denominator == 1\n\n# Examples for testing\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \n    :param n: Integer to be checked for primality\n    :return: Boolean, True if n is a prime number, otherwise False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Returns a string that contains the words from the original sentence,\n    whose lengths are prime numbers, maintaining the order of words.\n    \n    :param sentence: String representing a sentence\n    :return: String with words whose lengths are prime numbers\n    \"\"\"\n    if not isinstance(sentence, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Splitting the sentence into words\n    words = sentence.split()\n    \n    # Filtering words whose lengths are prime\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    # Joining the filtered words into a single string with a space in between\n    return ' '.join(prime_length_words)\n\n# Example usage\nsentence1 = \"This is a test\"\nsentence2 = \"lets go for swimming\"\n\nprint(words_in_sentence(sentence1))  # Output: \"is\"\nprint(words_in_sentence(sentence2))  # Output: \"go for\""}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Helper function to determine if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    Args:\n        n (int): The number to test for primality.\n        x (Any): The value to return if n is prime.\n        y (Any): The value to return if n is not prime.\n\n    Returns:\n        Any: x if n is prime, otherwise y.\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n should be a non-negative integer\")\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Example function calls for testing\nprint(x_or_y(7, 34, 12))  # Outputs: 34\nprint(x_or_y(15, 8, 5))   # Outputs: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n    \n    total = 0\n    for num in lst:\n        # Check if the number is an integer and is non-negative\n        if isinstance(num, int) and num >= 0:\n            # Check if the number is odd\n            if num % 2 != 0:\n                total += num ** 2\n    \n    return total\n\n# Example unit tests to verify the function\nassert double_the_difference([1, 3, 2, 0]) == 10\nassert double_the_difference([-1, -2, 0]) == 0\nassert double_the_difference([9, -2]) == 81\nassert double_the_difference([0]) == 0\nassert double_the_difference([]) == 0\n\nprint(\"All tests passed.\")"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    if not isinstance(nums, list):  # Ensure input is a list\n        raise TypeError('Input must be a list')\n    \n    odd_digits = {'1', '3', '5', '7', '9'}  # Set of odd digits\n    count = 0\n\n    for num in nums:\n        try:\n            abs_num = abs(num)  # Work with positive representation to handle negative numbers\n            num_str = str(abs_num)\n\n            if abs_num > 10 and num_str[0] in odd_digits and num_str[-1] in odd_digits:\n                count += 1\n        except ValueError:  # Catch potential errors from invalid number conversions\n            continue\n\n    return count\n\n# Example Usage:\n# print(specialFilter([15, -73, 14, -15]))  # Outputs: 1\n# print(specialFilter([33, -2, -3, 45, 21, 109]))  # Outputs: 2"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Helper function to sum digits of a number\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Validate the input to ensure it's a list of integers\n    if not isinstance(nums, list):\n        raise TypeError(\"Input should be a list\")\n    if not all(isinstance(i, int) for i in nums):\n        raise ValueError(\"All elements in the list should be integers\")\n    \n    # Perform sorting based on digit sum and index\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Generate the array `a`\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Count residues modulo 3\n    count_mod = [0, 0, 0]\n    for value in a:\n        count_mod[value % 3] += 1\n\n    # Calculate the number of valid triples\n    # Case 1: All three elements have the same residue mod 3\n    triples_count = (count_mod[0] * (count_mod[0] - 1) * (count_mod[0] - 2)) // 6\n    triples_count += (count_mod[1] * (count_mod[1] - 1) * (count_mod[1] - 2)) // 6\n    triples_count += (count_mod[2] * (count_mod[2] - 1) * (count_mod[2] - 2)) // 6\n\n    # Case 2: All three elements have different residues mod 3\n    triples_count += count_mod[0] * count_mod[1] * count_mod[2]\n\n    return triples_count"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    \n    # Validate input types\n    if not isinstance(class_name, str):\n        raise TypeError(\"class_name must be a string\")\n    if not all(isinstance(ext, str) for ext in extensions):\n        raise TypeError(\"extensions must be a list of strings\")\n    \n    # Initialize tracking variables\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for ext in extensions:\n        CAP = sum(1 for char in ext if char.isupper())\n        SM = sum(1 for char in ext if char.islower())\n        strength = CAP - SM\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n        # If the strengths are equal, the first one in the list remains strongest\n    \n    if strongest_extension is None:\n        raise ValueError(\"No valid extensions were provided\")\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Ensure that the input is an integer\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n\n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    # Edge case for input 0\n    if num == 0:\n        return (1, 0)  # 0 is an even digit\n\n    # Loop through each digit and count evens and odds\n    while num > 0:\n        digit = num % 10  # Get the last digit\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10  # Remove the last digit\n\n    return (even_count, odd_count)\n\n# Example usage:\n# result = even_odd_count(-12)\n# print(result)  # Output: (1, 1)\n\n# result = even_odd_count(123)\n# print(result)  # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n    if number < 1 or number > 1000:\n        raise ValueError(\"Input must be a positive integer between 1 and 1000.\")\n\n    # Define the Roman numeral map for units, tens, hundreds and thousands\n    roman_numeral_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), \n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), \n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    result = []\n    \n    for value, numeral in roman_numeral_map:\n        while number >= value:\n            number -= value\n            result.append(numeral)\n    \n    return ''.join(result).lower()\n\n# Examples for testing\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples:\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n\n    # List of planets in order from closest to farthest from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if the given planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of the two planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Get the range of planets in between the given ones\n    if index1 < index2:\n        # planet1 is closer to the Sun than planet2\n        in_between = planets[index1 + 1:index2]\n    else:\n        # planet2 is closer to the Sun than planet1\n        in_between = planets[index2 + 1:index1]\n    \n    return tuple(in_between)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    if text == \"\":\n        return None\n\n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n\n    # Update the hash object with the bytes of the text\n    md5_hash.update(text.encode('utf-8'))\n\n    # Return the hexadecimal digest of the hash\n    return md5_hash.hexdigest()\n\n# Example for testing\nif __name__ == \"__main__\":\n    print(string_to_md5('Hello world'))  # Expected: '3e25960a79dbc69b674cd4ec67a72c62'\n    print(string_to_md5(''))  # Expected: None\n    try:\n        string_to_md5(12345)\n    except TypeError as e:\n        print(e)  # Expected: Input must be a string"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    You should return an array of [total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        The number of carrots that you have eaten.\n    @need : integer\n        The number of carrots that you need to eat.\n    @remaining : integer\n        The number of remaining carrots that exist in stock.\n    \n    Constraints:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Validate inputs\n    if not (isinstance(number, int) and isinstance(need, int) and isinstance(remaining, int)):\n        raise ValueError(\"All inputs must be integers\")\n\n    if not (0 <= number <= 1000):\n        raise ValueError(\"Number of eaten carrots must be between 0 and 1000 inclusive\")\n    \n    if not (0 <= need <= 1000):\n        raise ValueError(\"The need of carrots must be between 0 and 1000 inclusive\")\n    \n    if not (0 <= remaining <= 1000):\n        raise ValueError(\"The remaining carrots must be between 0 and 1000 inclusive\")\n\n    # Calculate the actual number of carrots eaten and remaining after the meal\n    if need <= remaining:\n        total_eaten = number + need\n        carrots_left = remaining - need\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n    \n    return [total_eaten, carrots_left]\n\n# Example test cases\nprint(eat(5, 6, 10)) # [11, 4]\nprint(eat(4, 8, 9))  # [12, 1]\nprint(eat(1, 10, 10))# [11, 0]\nprint(eat(2, 11, 5)) # [7, 0]"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    \n    # Validate input\n    if not isinstance(words, list) or not all(isinstance(word, str) for word in words):\n        raise ValueError(\"Input should be a list of strings.\")\n    \n    # Initialize variables for tracking max unique characters and the result word\n    max_unique_chars = 0\n    result_word = None\n\n    for word in words:\n        unique_chars = len(set(word))  # Count unique characters in the word\n        \n        # Check if this word has more unique characters or equivalent but lexicographically smaller\n        if (unique_chars > max_unique_chars or\n            (unique_chars == max_unique_chars and (result_word is None or word < result_word))):\n            max_unique_chars = unique_chars\n            result_word = word\n    \n    return result_word\n\n# Example usage:\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Validate inputs: all sides should be positive numbers\n    if not all(isinstance(side, (int, float)) and side > 0 for side in (a, b, c)):\n        raise ValueError(\"All sides should be positive numbers\")\n\n    # Sort the sides to ensure a <= b <= c, where 'c' would be the hypotenuse\n    sides = sorted([a, b, c])\n\n    # Using Pythagorean theorem: a^2 + b^2 = c^2 to check for right-angled triangle\n    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-9 \n\n# Example usages:\n# print(right_angle_triangle(3, 4, 5))  # Expected: True\n# print(right_angle_triangle(1, 2, 3))  # Expected: False"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations \n    is a substring in the first word.\n    \n    Examples:\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n    # Input validation\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise ValueError(\"Both arguments must be strings\")\n\n    if len(b) == 0 or len(a) == 0:\n        return False\n\n    # Check for all rotations of b in a\n    b_rotations = b + b  # This concatenation will include all rotations of b\n    for i in range(len(b)):\n        rotation = b_rotations[i:i + len(b)]\n        if rotation in a:\n            return True\n\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))   # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))   # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise TypeError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    \n    # Determine the inclusive range limits\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Generate and filter even digits within the range\n    even_digits = [i for i in range(start, end + 1) if i % 2 == 0 and 0 <= i <= 9]\n    \n    return even_digits\n\n# Example usage:\n# print(generate_integers(2, 8)) => [2, 4, 6, 8]\n# print(generate_integers(8, 2)) => [2, 4, 6, 8]\n# print(generate_integers(10, 14)) => []"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    if not isinstance(operator, list) or not isinstance(operand, list):\n        raise TypeError(\"Both operator and operand should be lists.\")\n        \n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list should be equal to the length of operand list minus one.\")\n        \n    if len(operator) < 1 or len(operand) < 2:\n        raise ValueError(\"Operator list must have at least one operator and operand list must have at least two operands.\")\n    \n    for op in operand:\n        if not isinstance(op, int) or op < 0:\n            raise ValueError(\"All elements in the operand list should be non-negative integers.\")\n    \n    valid_operators = {'+', '-', '*', '//', '**'}\n    for opr in operator:\n        if opr not in valid_operators:\n            raise ValueError(f\"Invalid operator: {opr}. Valid operators are {valid_operators}\")\n    \n    # Start building and evaluating the expression\n    expression = str(operand[0])\n    \n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i + 1]}\"\n    \n    try:\n        # Evaluate the constructed expression\n        result = eval(expression)\n    except ZeroDivisionError:\n        raise ZeroDivisionError(\"Division by zero encountered in the expression.\")\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred while evaluating the expression: {e}\")\n    \n    return result\n    \n# Example usage:\n# operator = ['+', '*', '-']\n# operand = [2, 3, 4, 5]\n# print(do_algebra(operator, operand))  # Output: 9"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    Parameters:\n    game (list): A list of integers representing the actual scores.\n    guess (list): A list of integers representing the guessed scores.\n    \n    Returns:\n    list: A list of integers representing the differences between actual and guessed scores.\n    \n    Raises:\n    ValueError: If the input lists are not of equal length.\n    TypeError: If the inputs are not lists of integers.\n    \n    example:\n    compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # Ensure both inputs are lists.\n    if not isinstance(game, list) or not isinstance(guess, list):\n        raise TypeError(\"Both game and guess should be lists.\")\n\n    # Ensure both lists contain only integers.\n    if not all(isinstance(x, int) for x in game) or not all(isinstance(x, int) for x in guess):\n        raise TypeError(\"Both lists must contain only integers.\")\n\n    # Ensure both lists are of the same length.\n    if len(game) != len(guess):\n        raise ValueError(\"The length of game and guess lists must be equal.\")\n    \n    differences = [abs(g - s) for g, s in zip(game, guess)]\n    return differences\n\n# Example usage and basic test cases\nif __name__ == \"__main__\":\n    results1 = compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n    results2 = compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n    print(results1)  # Output: [0, 0, 0, 0, 3, 3]\n    print(results2)  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Check if the string contains any letter\n    contains_letter = any(c.isalpha() for c in s)\n    \n    if contains_letter:\n        # Change the case of each letter\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # Reverse the entire string\n        result = s[::-1]\n    \n    return result"}
