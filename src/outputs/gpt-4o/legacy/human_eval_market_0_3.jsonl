{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and\n    a product of all the integers in a list. Empty sum should be equal to 0\n    and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Initialize sum and product variables for the result\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate through the list to compute the sum and product\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n        \n    # Return the sum and product as a tuple\n    return total_sum, total_product"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0  # Initial balance is zero\n    for op in operations:\n        balance += op  # Update balance with each operation\n        if balance < 0:\n            return True  # Return True if balance goes below zero\n    return False  # If never below zero, return False\n\n# Testing the function with the examples given\nprint(below_zero([1, 2, 3]))  # Expected output: False\nprint(below_zero([1, 2, -4, 5]))  # Expected output: True"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None  # Return None if the input list is empty\n    \n    # Initialize the longest string to the first element of the list\n    longest_string = strings[0]\n    \n    # Iterate over the remaining elements in the list\n    for s in strings[1:]:\n        # Update the longest_string if the current string is longer\n        if len(s) > len(longest_string):\n            longest_string = s\n    \n    return longest_string\n\n# Test cases\nprint(longest([]))  # Should return None\nprint(longest(['a', 'b', 'c']))  # Should return 'a'\nprint(longest(['a', 'bb', 'ccc']))  # Should return 'ccc'"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring.\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Use list comprehension to filter strings containing the substring\n    return [s for s in strings if substring in s]\n\n# Optional: if you want to include additional test cases to check the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n\n    # Step 1: Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n\n    # Step 2: Calculate the absolute differences from the mean\n    absolute_differences = [abs(x - mean_value) for x in numbers]\n\n    # Step 3: Calculate the mean of the absolute differences (MAD)\n    mad_value = sum(absolute_differences) / len(numbers)\n\n    return mad_value\n\n# Example usage and test case\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Expected output: 1.0"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []  # if the input list is empty, return an empty list\n    \n    max_value = numbers[0]  # initialize the first element as the max value\n    result = [max_value]  # list to store the rolling max values\n    \n    for num in numbers[1:]:\n        if num > max_value:\n            max_value = num  # update the max value if current number is greater\n        result.append(max_value)  # append the current max value to the result list\n    \n    return result\n\n# Example usage:\n# rolling_max([1, 2, 3, 2, 3, 4, 2]) -> [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # Edge case: if the input list is empty or has only one element, no interspersing is needed\n    if len(numbers) <= 1:\n        return numbers\n\n    # Initialize the result list with the first element of the input list\n    result = [numbers[0]]\n\n    # Traverse the input list from the second element onwards\n    for i in range(1, len(numbers)):\n        result.append(delimiter)  # Add the delimiter before each element\n        result.append(numbers[i])  # Add the current element\n\n    return result\n\n# Testing the function\nprint(intersperse([], 4))  # Output: []\nprint(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]\nprint(intersperse([1], 4))  # Output: [1]\nprint(intersperse([1, 2], 4))  # Output: [1, 4, 2]"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" \n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(7.25)\n    0.25\n    >>> truncate_number(4.0)\n    0.0\n    >>> truncate_number(0.99)\n    0.99\n    \"\"\"\n\n    # Ensure that input is treated as a float.\n    number = float(number)\n\n    # Extract the integer part using the `int` function.\n    integer_part = int(number)\n\n    # Calculate the decimal part by subtracting the integer part from the original number.\n    decimal_part = number - integer_part\n\n    return decimal_part"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Assuming that both a and b are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    result = []\n    \n    # Perform XOR operation for each pair of corresponding characters from a and b\n    for char_a, char_b in zip(a, b):\n        # XOR operation: 1 if chars are different, 0 if they are the same\n        xor_result = '1' if char_a != char_b else '0'\n        result.append(xor_result)\n    \n    # Join list to form the resultant string\n    return ''.join(result)"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" \n    Input to this function is a string containing multiple groups of nested parentheses. \n    Your goal is to separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize variables\n    groups = []    # To store the list of balanced parenthesis groups\n    stack = []     # To help in determining balanced groups\n    current_group = []  # To collect characters for the current group\n    \n    for char in paren_string:\n        current_group.append(char)  # Add the character to the current group\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n        \n        # If the stack is empty, the current_group is a balanced group\n        if not stack:\n            groups.append(''.join(current_group))\n            current_group = []  # Reset current group for next set of parenthesis\n    \n    return groups\n\n# Test cases in the docstring\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Should output ['()', '(())', '(()())']"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Edge case for an empty string\n    if not string:\n        return ''\n    \n    # Iterate from the end of the string towards the beginning\n    for i in range(len(string)):\n        # Check if the substring from current position to end is a palindrome\n        if is_palindrome(string[i:]):\n            # If it is, take the prefix before this palindromic suffix and reverse it\n            # Append the reversed prefix to the original string to form the palindrome\n            return string + string[:i][::-1]\n    \n    # If no palindrome suffix is found, which theoretically won't happen since a single character is a palindrome by itself\n    # This line is just a fail-safe, the for loop should handle all valid cases.\n    return string + string[::-1]\n\n# Example test cases\nprint(make_palindrome(''))       # Output: ''\nprint(make_palindrome('cat'))    # Output: 'catac'\nprint(make_palindrome('cata'))   # Output: 'catac'"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Create a list of numbers from 0 to n (inclusive)\n    numbers = range(n + 1)\n    \n    # Convert each number to a string and join them with a space\n    return ' '.join(map(str, numbers))\n\n# Example Tests\n# print(string_sequence(0))  # '0'\n# print(string_sequence(5))  # '0 1 2 3 4 5'"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # Initialize an empty list to store the prefixes\n    prefixes = []\n    \n    # Iterate over the range from 1 to the length of the string + 1\n    # This ensures we include the entire string as the last prefix\n    for i in range(1, len(string) + 1):\n        # Append the substring from the start to the current index to the list\n        prefixes.append(string[:i])\n    \n    return prefixes\n\n# Example usage:\n# print(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    # The Python built-in function len() computes and returns the length of a given string.\n    return len(string)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    \n    # Ensure a and b are non-negative, GCD of a number and 0 is the number itself.\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n\n    # Use the Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n\n# Test cases to verify the implementation\nprint(greatest_common_divisor(3, 5))  # Expected: 1\nprint(greatest_common_divisor(25, 15))  # Expected: 5\nprint(greatest_common_divisor(0, 10))  # Expected: 10\nprint(greatest_common_divisor(-25, 100))  # Expected: 25"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the input string by spaces to get individual groups of parentheses\n    groups = paren_string.split()\n    \n    # Function to calculate the maximum depth of nesting for a single group of parentheses\n    def max_depth(paren_group: str) -> int:\n        current_depth = 0\n        max_depth_seen = 0\n        \n        for char in paren_group:\n            if char == '(':\n                current_depth += 1  # Increase depth for an opening parenthesis\n                max_depth_seen = max(max_depth_seen, current_depth)  # Update the max depth seen so far\n            elif char == ')':\n                current_depth -= 1  # Decrease depth for a closing parenthesis\n                \n                # If current_depth goes negative, it means there are unmatched parentheses\n                if current_depth < 0:\n                    return -1\n        \n        # If current_depth is not back to zero, it means there are unmatched parentheses\n        if current_depth != 0:\n            return -1\n        \n        return max_depth_seen\n    \n    # Calculate the max depth for each group of parentheses\n    result = [max_depth(group) for group in groups]\n    \n    return result\n\n# Example usage\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # First, sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the sorted list and check adjacent pairs\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    # If no such pair is found, return False\n    return False\n\n# Example Usage and test output\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Expected Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Expected Output: True"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n <= 1:\n        # Edge case: if n is 1 or less, the function should not have valid outputs since there are no positive divisors < n\n        raise ValueError(\"n must be greater than 1\")\n    \n    # We start checking from the largest possible number smaller than n, which is n//2\n    # We go downward till we find a divisor.\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n\n# Example use:\nprint(largest_divisor(15)) # Expected output 5"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    # Using the join method to concatenate the strings. This is efficient because\n    # it joins all the strings in one single operation, which is better than \n    # repeatedly concatenating strings in a loop, avoiding the creation of multiple\n    # intermediate strings.\n    return ''.join(strings)\n\n# Example Usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" \n    Given a string, find out how many distinct characters (regardless of case) it consists of.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ignore case differences\n    lower_case_string = string.lower()\n    \n    # Create a set to hold distinct characters\n    distinct_characters = set(lower_case_string)\n    \n    # The number of distinct characters is the size of the set\n    return len(distinct_characters)"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # Using list comprehension to filter out only integers from the input list.\n    return [value for value in values if isinstance(value, int)]\n\n# Test cases to verify the implementation\nprint(filter_integers(['a', 3.14, 5]))  # Expected output: [5]\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))  # Expected output: [1, 2, 3]\nprint(filter_integers([4, '5', 6.0, 7, True, 'hello', 8]))  # Expected: [4, 7, 8]\nprint(filter_integers([]))  # Expected: []\nprint(filter_integers(['string', None, False, 0, 42]))  # Expected: [0, 42]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" \n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Edge cases: If the main string or the substring is empty, return 0\n    if len(string) == 0 or len(substring) == 0:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    # The following loop will find all overlapping substrings\n    while start <= len(string) - len(substring):\n        # Try to find the substring from the current start position\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            # Move the start position to the next position after the first matched character\n            start = pos + 1\n        else:\n            break\n    \n    return count\n\n# You can run the doctests to verify\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" \n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Using a list comprehension to iterate over each character in the string.\n    # Check if the character is uppercase or lowercase and flip its case accordingly.\n    flipped_string = ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    \n    return flipped_string\n\n# Testing the function with different cases:\nprint(flip_case(\"Hello\"))  # Should print \"hELLO\"\nprint(flip_case(\"WORLD\"))  # Should print \"world\"\nprint(flip_case(\"gOODBYE\"))  # Should print \"Goodbye\""}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Edge case: Check if the input list has fewer than two elements (given the problem guarantees it won't  happen)\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    # Edge case: Check if all numbers are the same, which would result in max_value == min_value\n    if max_value == min_value:\n        # If all elements are the same, return a list of zeros\n        return [0.0] * len(numbers)\n    \n    range_value = max_value - min_value\n    \n    # Apply the linear transformation: (x - min_value) / range_value\n    rescaled_numbers = [(x - min_value) / range_value for x in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    # Using list comprehension to filter strings that start with the given prefix\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Split the music string into individual notes based on spaces\n    notes = music_string.split()\n    \n    # Define a mapping for note types to their corresponding beat lengths\n    note_mapping = {\n        'o': 4,  # whole note\n        'o|': 2,  # half note\n        '.|': 1   # quarter note\n    }\n    \n    # Parse each note into its corresponding beat length\n    beats = []\n    for note in notes:\n        if note in note_mapping:\n            beats.append(note_mapping[note])\n        else:\n            raise ValueError(f\"Unknown note symbol: {note}\")\n\n    return beats\n\n# Testing the function with a provided example\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# Expected output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Start with the smallest prime number\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n# Example usage\n# print(factorize(8))  # Expected: [2, 2, 2]\n# print(factorize(25))  # Expected: [5, 5]\n# print(factorize(70))  # Expected: [2, 5, 7]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    # Using list comprehension to filter out non-positive numbers\n    return [x for x in l if x > 0]\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(get_positive([-1, 2, -4, 5, 6]))  # should return [2, 5, 6]\n    print(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # should return [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Edge case: If the length of numbers is less than 2, raise an error (though problem statement guarantees at least two elements)\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n\n    # Sort the numbers first so we can efficiently find the closest pair by scanning linearly\n    sorted_numbers = sorted(numbers)\n\n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    closest_pair = None\n\n    # Iterate through the sorted list and find the minimal difference between consecutive elements\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_pair\n\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    \n    # Handle edge case where list is empty\n    if not l:\n        return None  # or could raise an Exception depending on requirements\n    \n    # Initialize maximum element with the first element of the list\n    max_elem = l[0]\n    \n    # Iterate through the list starting from the second element\n    for elem in l[1:]:\n        # Update max_elem if current element is greater\n        if elem > max_elem:\n            max_elem = elem\n    \n    return max_elem"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Check for edge cases\n    if n <= 1:\n        return False\n    if n == 2:  # 2 is the smallest prime number\n        return True\n    if n % 2 == 0:  # Eliminate all even numbers greater than 2\n        return False\n\n    # Only test for odd divisors from 3 up to the square root of n\n    max_divisor = int(n**0.5) + 1\n    for i in range(3, max_divisor, 2):\n        if n % i == 0:\n            return False\n        \n    return True"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(l)\n    \n    # Convert the set back to a list and sort it\n    sorted_unique_elements = sorted(unique_elements)\n    \n    # Return the sorted list of unique elements\n    return sorted_unique_elements\n\n# Testing the function with the provided example\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Dictionary to keep track of the frequency of each element\n    count = {}\n    \n    # First pass: count the occurrences of each element\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Second pass: collect elements that occur only once\n    result = []\n    for num in numbers:\n        if count[num] == 1:\n            result.append(num)\n    \n    return result\n\n# Example usage:\n# print(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Using a list comprehension to iterate through each element in the list\n    # and increment it by 1.\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the cycle: the last character of the group should be moved to the front\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"The input should be a positive integer.\")\n    \n    def is_prime(num: int) -> bool:\n        \"\"\"Check if a number is a prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Fibonacci sequence generator\n    def fibonacci_generator():\n        \"\"\"Generate Fibonacci numbers.\"\"\"\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n    \n    # Set up the Fibonacci generator and track prime Fibonacci numbers\n    fib_gen = fibonacci_generator()\n    count = 0\n    prime_fib_number = None\n    \n    while count < n:\n        fib_number = next(fib_gen)\n        if is_prime(fib_number):\n            count += 1\n            prime_fib_number = fib_number\n    \n    return prime_fib_number\n\n# Example use case\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:  # Check if the number is divisible by 11 or 13.\n            count += str(i).count('7')  # Count the occurrences of '7' in the number and add it to the count.\n    return count\n\n# Testing the function with provided test cases\nprint(fizz_buzz(50))  # Expected output: 0\nprint(fizz_buzz(78))  # Expected output: 2\nprint(fizz_buzz(79))  # Expected output: 3"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    \n    # Edge case: the base must be greater than 1 and less than 10\n    if base <= 1 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive\")\n    \n    # Edge case: if x is 0, return '0'\n    if x == 0:\n        return '0'\n    \n    digits = []\n    \n    # Perform the division and store remainders\n    while x:\n        digits.append(str(x % base))  # Store remainder as string\n        x //= base  # Update x to the quotient\n    \n    # Digits are in reverse order, reverse them to form the correct number\n    digits.reverse()\n    \n    # Join list into a single string and return\n    return ''.join(digits)\n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Create a set to track the elements we have seen so far\n    seen = set()\n\n    # Iterate through each element in the list\n    for num in l:\n        # Check if the negative of the current element exists in the set\n        if -num in seen:\n            return True\n        # Add the current element to the set\n        seen.add(num)\n    \n    # If no pairs sum to zero, return False\n    return False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    # Use Horner's method for efficient polynomial evaluation\n    result = 0\n    for coeff in reversed(xs):\n        result = result * x + coeff\n    return result\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non-zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0 or xs[-1] == 0:\n        raise ValueError(\"xs must have an even number of coefficients with a non-zero highest degree coefficient\")\n\n    def derivative(xs):\n        \"\"\"\n        Computes the derivative of the polynomial with coefficients xs.\n        \"\"\"\n        return [i * coeff for i, coeff in enumerate(xs)][1:]\n\n    def newton_raphson(xs, x0, tol=1e-7, max_iter=1000):\n        \"\"\"\n        Finds a root of the polynomial using Newton-Raphson method.\n        \"\"\"\n        for _ in range(max_iter):\n            y = poly(xs, x0)\n            if abs(y) < tol:\n                return x0\n            dy = poly(derivative(xs), x0)\n            if dy == 0:\n                raise RuntimeError(\"Derivative is zero. No solution found.\")\n            x0 = x0 - y / dy\n        raise RuntimeError(\"Exceeded maximum iterations. No solution found.\")\n\n    # Initial guess can be zero, but for robustness, use the mean value of the coefficients' indices\n    initial_guess = sum(range(len(xs))) / len(xs)\n    return newton_raphson(xs, initial_guess)\n\n# Test Cases\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    \n    # A string is considered a palindrome if it reads the same forwards and backwards.\n    # We check this by comparing the string to its reverse.\n    return text == text[::-1]\n\n# Testing with the provided examples\nprint(is_palindrome(''))  # True\nprint(is_palindrome('aba'))  # True\nprint(is_palindrome('aaaaa'))  # True\nprint(is_palindrome('zbcd'))  # False"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # The area A of a triangle can be found using the formula: A = (1/2) * base * height\n    # Here, 'a' is the length of the base, and 'h' is the height\n    \n    # Calculate the area\n    area = 0.5 * a * h\n    \n    return area\n\n# Test cases to validate the implementation\nassert triangle_area(5, 3) == 7.5  # Example provided in the docstring\nassert triangle_area(10, 5) == 25.0  # Area should be 25.0\nassert triangle_area(0, 10) == 0.0  # Base length is 0, so area should be 0.0\nassert triangle_area(7, 0) == 0.0  # Height is 0, so area should be 0.0"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Each car from the left-to-right group collides with each car from the right-to-left group.\n    return n * n\n\n# Sample output - you would replace '<your answer>' with the actual function call and result\nresult = car_race_collision(4)\nprint(result)"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract elements at indices divisible by three\n    elements_to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort these elements\n    elements_to_sort.sort()\n    \n    # Initialize an iterator to replace elements in the original list\n    it = iter(elements_to_sort)\n    \n    # Create a new list replacing elements at every index divisible by three\n    sorted_list = [next(it) if i % 3 == 0 else l[i] for i in range(len(l))]\n    \n    return sorted_list\n\n# Test cases to verify the solution\nprint(sort_third([1, 2, 3]))        # Expected: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Expected: [2, 6, 3, 4, 8, 9, 5]\nprint(sort_third([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))  # Expected: [0, 8, 7, 3, 5, 4, 6, 2, 1, 9]"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n# Explanation:\n# The function add takes two integer parameters, x and y.\n# It returns the sum of these two integers.\n# The examples in the docstring demonstrate how the function can be called and the expected output."}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    \n    # Iterate through each number in the list\n    for number in l:\n        # Check if the current number is greater than or equal to the threshold\n        if number >= t:\n            return False\n    \n    # If all numbers are below the threshold, return True\n    return True"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    # Array to store values of fib4 sequence\n    fib4_seq = [0, 0, 2, 0]\n\n    # Calculate the nth term iteratively\n    for i in range(4, n + 1):\n        next_value = fib4_seq[-1] + fib4_seq[-2] + fib4_seq[-3] + fib4_seq[-4]\n        fib4_seq.append(next_value)\n        # Keep the list only with the last 4 elements to save space\n        fib4_seq.pop(0)\n        \n    # Since the loop goes until n+1, the last element of our adjusted list is our answer\n    return fib4_seq[-1]\n\n# Example uses to validate the function\nprint(fib4(5))  # Expected output: 4\nprint(fib4(6))  # Expected output: 8\nprint(fib4(7))  # Expected output: 14"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Use a list comprehension to filter out the vowels and join the result to form the final string\n    return ''.join([char for char in text if char not in vowels])\n\n# Examples to test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_to_int = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of number words\n    words = numbers.split()\n    \n    # Convert each word to its corresponding integer value\n    int_values = [num_to_int[word] for word in words]\n    \n    # Sort the list of integers\n    sorted_int_values = sorted(int_values)\n    \n    # Convert the sorted integers back to their respective words\n    sorted_words = [list(num_to_int.keys())[list(num_to_int.values()).index(val)] for val in sorted_int_values]\n    \n    # Join the list of sorted words back into a space-delimited string\n    return ' '.join(sorted_words)\n\n# Test case\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Handle the edge case of an empty list\n    if not l:\n        raise ValueError(\"The list is empty, cannot compute median\")\n    \n    # Sort the list\n    sorted_list = sorted(l)\n    \n    # Find the length of the list\n    n = len(sorted_list)\n    \n    # Check if the number of elements is odd\n    if n % 2 == 1:\n        # Odd length, return the middle element\n        median_value = sorted_list[n // 2]\n    else:\n        # Even length, return the average of the two middle elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        median_value = (mid1 + mid2) / 2\n    \n    return median_value\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    # Base cases\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Initialize the first two Fibonacci numbers\n    a, b = 0, 1\n\n    # Iterate through to find the n-th Fibonacci number\n    for _ in range(2, n + 1):\n        a, b = b, a + b  # Update a and b to the next two Fibonacci numbers\n\n    return b  # The n-th Fibonacci number"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n    \n# Example usage:\n# encoded = encode_shift(\"hello\")\n# print(encoded)  # Output should be \"mjqqt\"\n# decoded = decode_shift(encoded)\n# print(decoded)  # Output should be \"hello\""}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Initialize a counter for tracking the balance of opening and closing brackets.\n    balance = 0\n    \n    # Traverse each character in the input string.\n    for char in brackets:\n        if char == '<':\n            # Increment the balance for an opening bracket.\n            balance += 1\n        elif char == '>':\n            # Decrement the balance for a closing bracket.\n            balance -= 1\n        \n        # If balance goes negative, return False as it indicates unmatched closing bracket.\n        if balance < 0:\n            return False\n            \n    # If balance is 0, all brackets are matched; otherwise, they are not.\n    return balance == 0"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract the values at the even indices\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the values at the even indices\n    sorted_even_values = sorted(even_indices_values)\n    \n    # Create a copy of the original list to modify\n    result = l[:]\n    \n    # Replace the values at the even indices with the sorted values\n    for i, v in zip(range(0, len(l), 2), sorted_even_values):\n        result[i] = v\n    \n    # Return the resulting list\n    return result"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Convert both lists to sets to quickly find unique elements and for faster intersection operation\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets to get common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements to a sorted list and return\n    return sorted(common_elements)\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" \n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if len(xs) == 0:\n        return []\n    \n    # The derivative of a constant is 0, and it is removed from the resulting list\n    if len(xs) == 1:\n        return []\n    \n    # Initialize the result list for the derivative coefficients\n    derivative_coeffs = []\n    \n    # Compute the derivative coefficients\n    for i in range(1, len(xs)):\n        # The derivative coefficient for x^i is i*xs[i]\n        derivative_coeffs.append(i * xs[i])\n    \n    return derivative_coeffs\n\n# Examples:\nprint(derivative([3, 1, 2, 4, 5]))  # Output should be [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # Output should be [2, 6]\nprint(derivative([5]))              # Output should be []\nprint(derivative([]))               # Output should be []"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Convert both strings to sets to get unique characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Compare the sets\n    return set_s0 == set_s1"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n    \n    # Sort the list to use the two-pointer technique\n    l.sort()\n    \n    for i in range(n - 2):\n        # Avoid duplicates, skip the same element to ensure all elements are distinct\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        left, right = 0 if i != 0 else 1, n - 1\n        \n        while left < right:\n            if left == i:\n                left += 1\n                continue\n            if right == i:\n                right -= 1\n                continue\n            \n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))       # False\nprint(correct_bracketing(\"()\"))      # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))    # False"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n    # Step 1: Remove the smallest prime factor (2) repeatedly\n    largest_prime = -1\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # Step 2: Check for other prime factors starting from 3\n    factor = 3\n    max_possible = int(n**0.5) + 1  # Up to the square root of the number\n    while factor <= max_possible:\n        while n % factor == 0:\n            largest_prime = factor\n            n //= factor\n            max_possible = int(n**0.5) + 1  # Update since n has changed\n        factor += 2  # Only check odd numbers now\n\n    # Step 3: If n is still >1, it must be prime itself and larger than any earlier factors\n    if n > 1:\n        largest_prime = n\n\n    return largest_prime\n\n# Example usages:\nprint(largest_prime_factor(13195))  # Expected output: 29\nprint(largest_prime_factor(2048))   # Expected output: 2"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n    l (list): A list of elements to check.\n\n    Returns:\n    bool: True if the list is monotonic, False otherwise.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    \n    # Edge case: a list with 1 or 0 elements is considered monotonic\n    if len(l) <= 1:\n        return True\n\n    # Initialize flags for increasing and decreasing\n    increasing = decreasing = True\n\n    # Iterate over the list elements comparing each with the next\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n\n    # The list is monotonic if either increasing or decreasing flag is True\n    return increasing or decreasing"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    # Variable to store the cumulative sum of ASCII values of uppercase letters\n    upper_case_sum = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value to the cumulative sum\n            upper_case_sum += ord(char)\n    \n    return upper_case_sum\n\n# Testing the function with given examples\nprint(digitSum(\"\"))          # Expected output: 0\nprint(digitSum(\"abAB\"))      # Expected output: 131\nprint(digitSum(\"abcCd\"))     # Expected output: 67\nprint(digitSum(\"helloE\"))    # Expected output: 69\nprint(digitSum(\"woArBld\"))   # Expected output: 131\nprint(digitSum(\"aAaaaXa\"))   # Expected output: 153"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    # Using the formula for the sum of the first n natural numbers\n    return n * (n + 1) // 2\n\n# Sample automated tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    def power_mod(x, y, m):\n        if y == 0:\n            return 1\n        half = power_mod(x, y // 2, m)\n        half = (half * half) % m\n        if y % 2 == 0:\n            return half\n        else:\n            return (half * x) % m\n\n    return power_mod(2, n, p)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # Convert the integer to a string to easily manipulate the digits.\n    x_str = str(x)\n    \n    # Find the number of digits in the integer x.\n    num_digits = len(x_str)\n    \n    # If the shift is greater than the number of digits, return the reversed string.\n    if shift > num_digits:\n        return x_str[::-1]\n    \n    # Calculate the effective shift using modulus to handle cases when shift >= num_digits.\n    effective_shift = shift % num_digits\n    \n    # Perform the circular shift by slicing the string.\n    # Move the last 'effective_shift' characters to the front.\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    \n    return shifted_str\n\n# Test cases to validate the function\nif __name__ == \"__main__\":\n    print(circular_shift(12, 1))  # Output should be \"21\"\n    print(circular_shift(12, 2))  # Output should be \"12\"\n    print(circular_shift(12345, 3))  # Output should be \"34512\"\n    print(circular_shift(12345, 8))  # Output should be \"54321\" because 8 > 5\n    print(circular_shift(987654321, 1))  # Output should be \"198765432\""}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the given sides can form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n# Example test cases\nprint(triangle_area(3, 4, 5))  # Expected: 6.00\nprint(triangle_area(1, 2, 10))  # Expected: -1"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize variables for the first three values\n    a, b, c = 0, 0, 1\n    \n    # Iterate from 3 to n and compute the next fibfib value\n    for _ in range(3, n + 1):\n        d = a + b + c\n        a, b, c = b, c, d\n    \n    return c\n\n# Examples to test the function\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Defining a set of vowels for easy lookup.\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    # Ensure lower case comparison and count vowels\n    count = sum(1 for char in s.lower() if char in vowels)\n\n    # Handle 'y' as a vowel only when it is the last character of the string.\n    if s and s[-1].lower() == 'y':\n        count += 1\n\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"Yummy\"))  # 2\nprint(vowels_count(\"your\"))    # 2\nprint(vowels_count(\"sky\"))     # 2\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"\"))        # 0"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    # Step 1: Create a frequency dictionary to count occurrences of each integer in the list.\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n            \n    # Step 2: Initialize a variable to hold the result\n    result = -1\n    \n    # Step 3: Iterate over the frequency dictionary to find the greatest integer\n    # that satisfies the condition: frequency >= integer value itself\n    for num, count in frequency.items():\n        if count >= num:\n            result = max(result, num)\n            \n    # Step 4: Return the result (will be -1 if no such integer found)\n    return result\n\n# Example usage:\n# print(search([4, 1, 2, 2, 3, 1]))  # Output: 2\n# print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\n# print(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:  # If list is empty, return it immediately\n        return []\n\n    # Sort the list so we can easily fetch minimum and maximum values\n    lst.sort()\n\n    # Two pointers approach to fetch min and max alternatively\n    left = 0\n    right = len(lst) - 1\n    result = []\n\n    # We use left for the minimum and right for the maximum\n    while left <= right:\n        if left <= right:\n            result.append(lst[left])\n            left += 1\n        if left <= right:\n            result.append(lst[right])\n            right -= 1\n\n    return result"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    import re\n    \n    # regex to extract apples and oranges counts from the string\n    numbers = re.findall(r'\\d+', s)\n    \n    # convert the list of numbers from strings to integers\n    apples_count = int(numbers[0])\n    oranges_count = int(numbers[1])\n    \n    # Total fruits - (apples + oranges) = mango fruits\n    mango_count = n - (apples_count + oranges_count)\n    \n    return mango_count\n\n# Example usage:\n# print(fruit_distribution(\"5 apples and 6 oranges\", 19)) # Output: 8\n# print(fruit_distribution(\"0 apples and 1 oranges\",3))   # Output: 2\n# print(fruit_distribution(\"2 apples and 3 oranges\", 100))# Output: 95\n# print(fruit_distribution(\"100 apples and 1 oranges\",120))# Output: 19"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list q is a palindrome by comparing it to its reverse\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of the elements in q\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to the maximum possible weight w\n    if total_weight > w:\n        return False\n    \n    # If both conditions are satisfied, return True\n    return True"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Edge case: If n is 1, it can only generate 1^k, which can only match with x=1\n    if n == 1:\n        return x == 1\n    \n    # Edge case: x = 1, any number to the power of 0 is 1\n    if x == 1:\n        return True\n    \n    # Main loop: check if x is a power of n\n    power = n\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    \n    return False\n\n# Test Cases to verify the solution\nassert is_simple_power(1, 4) == True\nassert is_simple_power(2, 2) == True\nassert is_simple_power(8, 2) == True\nassert is_simple_power(3, 2) == False\nassert is_simple_power(3, 1) == False\nassert is_simple_power(5, 3) == False"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum(len(string) for string in lst1)\n    \n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum(len(string) for string in lst2)\n    \n    # Compare the total number of characters of both lists\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Examples for testing the function\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True  # 0 is the cube of 0\n    \n    # Calculate the cube root of the absolute value of `a`\n    cube_root = round(abs(a) ** (1/3))\n    \n    # Check if either the positive or negative version of the cube root cubed equals `a`\n    return cube_root ** 3 == abs(a) or (-cube_root) ** 3 == abs(a)\n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n        lst (list of int): The input list of integers.\n\n    Returns:\n        int: The sum of the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over the list, checking odd indices\n    for i in range(1, len(lst), 2):\n        # Check if the element at the odd index is even\n        if lst[i] % 2 == 0:\n            # Add the even element to the total sum\n            total_sum += lst[i]\n    \n    # Return the total sum\n    return total_sum\n\n# Examples to demonstrate the function\nprint(add([4, 2, 6, 7]))  # Output: 2\nprint(add([1, 10, 3, 8, 5, 6, 7, 4]))  # Output: 18 (10 + 8)\nprint(add([2, 4, 6, 8, 10]))  # Output: 12 (4 + 8)"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    # Define a helper function to determine if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Generate a list of all prime numbers less than 100 (to avoid recalculating)\n    primes = [n for n in range(2, 100) if is_prime(n)]\n\n    # Check combinations of three primes and see if they multiply to `a`\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n                    \n    return False\n\n# Test cases\nprint(is_multiply_prime(30))  # True: 2 * 3 * 5\nprint(is_multiply_prime(60))  # True: 2 * 3 * 5\nprint(is_multiply_prime(91))  # False: 7 * 13 (only two primes)\nprint(is_multiply_prime(100)) # False: out of valid range"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    # Initialize change count to 0.\n    changes = 0\n    # Use two pointers to compare elements from both ends of the array.\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            # If the elements at both pointers are not the same, increment the change count.\n            changes += 1\n        # Move the pointers towards the center.\n        left += 1\n        right -= 1\n        \n    return changes\n\n# Example tests:\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Expected Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Expected Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Expected Output: 0"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Set of hexadecimal digits that are prime numbers\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a count for prime hexadecimal digits\n    prime_count = 0\n    \n    # Iterate through each character in the string `num`\n    for digit in num:\n        # If the digit is in our set of prime hex digits, increment the count\n        if digit in prime_hex_digits:\n            prime_count += 1\n    \n    # Return the total count of prime hex digits\n    return prime_count"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # If the length of the string is less than 3, it cannot be happy\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of three consecutive characters\n    for i in range(len(s) - 2):\n        # Extract three consecutive characters\n        triplet = s[i:i+3]\n        # Check if all three characters are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If no triplets are non-distinct, then the string is happy\n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    # This dictionary will map GPA thresholds to the letter grades\n    gpa_to_letter = {\n        4.0: 'A+',\n        3.7: 'A', \n        3.3: 'A-', \n        3.0: 'B+', \n        2.7: 'B', \n        2.3: 'B-', \n        2.0: 'C+', \n        1.7: 'C',\n        1.3: 'C-', \n        1.0: 'D+',\n        0.7: 'D', \n        0.0: 'D-',\n    }\n\n    # This will store the resulting letter grades\n    letter_grades = []\n\n    # Iterate over each GPA\n    for gpa in grades:\n        # Find the appropriate letter grade by comparing in descending order\n        for threshold in sorted(gpa_to_letter.keys(), reverse=True):\n            if gpa >= threshold:\n                letter_grades.append(gpa_to_letter[threshold])\n                break\n\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])) \n# Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        # For single digit, the numbers are 1 through 9. Only 1 counts.\n        return 1\n\n    # Calculate 10^(n-1)\n    pow_10_n_1 = 10 ** (n - 1)\n    # Calculate 10^(n-2)\n    pow_10_n_2 = 10 ** (n - 2)\n\n    # Count of numbers starting with 1 plus count ending with 1 minus double count\n    return pow_10_n_1 + 8 * pow_10_n_2"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index].\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Initialize variables to track the smallest even value and its index\n    min_even_value = float('inf')\n    min_even_index = -1\n\n    # Iterate through the array to find the smallest even value\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:  # Check if the number is even\n            if val < min_even_value:\n                min_even_value = val\n                min_even_index = idx\n\n    # If no even number was found, return an empty list\n    if min_even_index == -1:\n        return []\n\n    # Otherwise, return the smallest even value and its index\n    return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    # Check if the input is 0 which should return \"db0db\"\n    if decimal == 0:\n        return \"db0db\"\n    \n    # Convert the decimal number to its binary representation using bin() and strip the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    \n    # Concatenate the 'db' prefix and suffix to the binary string\n    return f\"db{binary_str}db\"\n\n# Examples\nprint(decimal_to_binary(15))  # Expected: \"db1111db\"\nprint(decimal_to_binary(32))  # Expected: \"db100000db\"\nprint(decimal_to_binary(0))   # Expected: \"db0db\""}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Parameters:\n        N (int): The integer whose digits' sum needs to be converted to binary.\n                 Constraints: 0 \u2264 N \u2264 10000.\n    \n    Returns:\n        str: The binary representation of the sum of the digits of N.\n    \n    Example:\n        For N = 1000, the sum of digits will be 1, the output should be \"1\".\n        For N = 150, the sum of digits will be 6, the output should be \"110\".\n        For N = 147, the sum of digits will be 12, the output should be \"1100\".\n    \"\"\"\n    # Special case where N is 0\n    if N == 0:\n        return \"0\"\n    \n    # Step 1: Extract digits and calculate their sum\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Step 2: Convert the sum to its binary representation\n    binary_result = bin(digit_sum).replace(\"0b\", \"\")\n    \n    return binary_result\n\n# Example usages for validation\nprint(solve(1000))  # Output should be \"1\"\nprint(solve(150))   # Output should be \"110\"\nprint(solve(147))   # Output should be \"1100\""}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # If the array is empty or has only one element, return it as is\n    if len(array) == 0 or len(array) == 1:\n        return array\n    \n    # Calculate the sum of the first and last element in the array\n    sum_first_last = array[0] + array[-1]\n\n    # If the sum is odd, sort the array in ascending order\n    if sum_first_last % 2 != 0:\n        return sorted(array)\n    # If the sum is even, sort the array in descending order\n    else:\n        return sorted(array, reverse=True)\n\n# Sample Usage\n# print(sort_array([])) -> []\n# print(sort_array([5])) -> [5]\n# print(sort_array([2, 4, 3, 0, 1, 5])) -> [0, 1, 2, 3, 4, 5]\n# print(sort_array([2, 4, 3, 0, 1, 5, 6])) -> [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/86", "completion": "import re\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # This regular expression will match words and spaces separately\n    tokens = re.findall(r'\\S+|\\s+', s)\n\n    # Sort the characters in each word, keep spaces as they are\n    sorted_tokens = [\n        ''.join(sorted(token)) if not token.isspace() else token\n        for token in tokens\n    ]\n\n    # Join the sorted tokens back into a single string\n    return ''.join(sorted_tokens)\n\n# Example usages for verification\nprint(anti_shuffle('Hi'))  # Should return 'Hi'\nprint(anti_shuffle('hello'))  # Should return 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Should return 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # List to store the coordinates of elements matching x\n    coordinates = []\n    \n    # Iterate through each row in lst\n    for row_idx, row in enumerate(lst):\n        # Find all positions of x in the current row\n        for col_idx, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort coordinates: sort by row in ascending order,\n    # and within each row, sort by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Example usage\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    # If the list has fewer than 2 unique elements, return None.\n    if len(set(lst)) < 2:\n        return None\n    \n    # Initialize two variables to track the smallest and second smallest unique elements.\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    # Iterate through each element in the list.\n    for num in lst:\n        if num < smallest:\n            # Update second smallest before smallest\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            # Update the second smallest only if the current number is bigger than smallest\n            # but smaller than the second smallest.\n            second_smallest = num\n    \n    # If second smallest has been updated from its initial value, return it.\n    if second_smallest < float('inf'):\n        return second_smallest\n    else:\n        return None\n\n# Example usage:\n# Should return: 2\nprint(next_smallest([1, 2, 3, 4, 5]))\n# Should return: 2\nprint(next_smallest([5, 1, 4, 3, 2]))\n# Should return: None\nprint(next_smallest([]))\n# Should return: None\nprint(next_smallest([1, 1]))"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    # Define a dictionary to map vowels to the letter 2 places ahead\n    vowel_mapping = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to store the result\n    encoded_message = []\n\n    # Iterate over each character in the message\n    for char in message:\n        # Swap case of the current character\n        char = char.swapcase()\n        \n        # Replace the character if it is a vowel as per the mapping\n        if char in vowel_mapping:\n            encoded_message.append(vowel_mapping[char])\n        else:\n            encoded_message.append(char)\n    \n    # Join the list to form the final encoded string\n    return ''.join(encoded_message)\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if a number n is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Get the length of the string\n    length = len(string)\n    \n    # Check if the length is prime\n    return is_prime(length)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define a set of uppercase vowels for quick lookup\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize a counter to keep track of uppercase vowels at even indices\n    count = 0\n    \n    # Iterate over the string with indices\n    for i in range(0, len(s), 2):\n        # Check if the character at the current even index is an uppercase vowel\n        if s[i] in uppercase_vowels:\n            count += 1\n            \n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # Should return 1\nprint(count_upper('abcdefg')) # Should return 0\nprint(count_upper('dBBE'))    # Should return 0"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    # Result variable initialization\n    result = []\n\n    # Iterate over each character in the input string\n    for char in s:\n        # Compute the new character by adding 4 to the ASCII value\n        new_char = ord(char) + 4\n        \n        # Check if the new character goes past 'z'\n        if new_char > ord('z'):\n            # Wrap around by subtracting 26\n            new_char -= 26\n\n        # Append the new character to the result\n        result.append(chr(new_char))\n\n    # Join the list of characters into a single string and return\n    return ''.join(result)\n\n# Example test cases\nprint(encrypt('hi'))         # Outputs: 'lm'\nprint(encrypt('asdfghjkl'))  # Outputs: 'ewhjklnop'\nprint(encrypt('gf'))         # Outputs: 'kj'\nprint(encrypt('et'))         # Outputs: 'ix'"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x is less than or equal to y to make the calculations easier\n    if x > y:\n        return -1\n    \n    # Start from the upper bound y and move downwards to find the largest even number\n    for number in range(y, x - 1, -1):\n        if number % 2 == 0:\n            return number\n    \n    # If no even number is found in the range\n    return -1"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the input string into sentences based on delimiters '.', '?', '!'\n    sentences = []\n    start = 0\n    for i, char in enumerate(S):\n        if char in '.?!':\n            sentence = S[start:i].strip()\n            if sentence:\n                sentences.append(sentence)\n            start = i + 1\n    # Check if there's a sentence after the last punctuation\n    if start < len(S):\n        last_sentence = S[start:].strip()\n        if last_sentence:\n            sentences.append(last_sentence)\n    \n    # Count the number of sentences that start with 'I'\n    boredom_count = 0\n    for sentence in sentences:\n        # Strip leading spaces and check if the first word is 'I'\n        if sentence.split()[0] == 'I':\n            boredom_count += 1\n    \n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Expected output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Expected output: 1\nprint(is_bored(\"I am happy. Are you? Yes! I am very happy.\"))  # Expected output: 2\nprint(is_bored(\"I. I? I!\"))  # Expected output: 3"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \"\"\"\n    if not dictionary:\n        # Return False if dictionary is empty\n        return False\n    \n    all_lower = True\n    all_upper = True\n    \n    for key in dictionary.keys():\n        if not isinstance(key, str):\n            # Immediately return False if a key is not a string\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n        \n        # Early exit if both conditions are False (i.e., mixed case found)\n        if not all_lower and not all_upper:\n            return False\n    \n    # Return True if either all keys are lowercase or all keys are uppercase\n    return all_lower or all_upper\n\n# Example usages:\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))  # True\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))  # False\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))  # False\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))  # False\nprint(check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}))  # True"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all the inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check the sum conditions\n    return (x == y + z) or (y == x + z) or (z == x + y)\n\n# Test cases\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1)) # \u279e True\nprint(any_int(3.6, -2.2, 2)) # \u279e False"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    \n    # Replace commas with spaces to ensure uniform delimiter\n    s = s.replace(',', ' ')\n    \n    # Split the string by spaces and filter out any empty results due to consecutive spaces or leading/trailing spaces\n    words = s.split()\n    \n    return words\n\n# Example usage and testing\nprint(words_string(\"Hi, my name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"  Leading and trailing spaces,  should  be handled. \"))  # Output: [\"Leading\", \"and\", \"trailing\", \"spaces\", \"should\", \"be\", \"handled\"]\nprint(words_string(\"Mixed separation,spaces,and commas\"))  # Output: [\"Mixed\", \"separation\", \"spaces\", \"and\", \"commas\"]"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the input string to a float\n    num = float(value)\n    \n    # Extract the integer part and the fractional part of the number\n    integer_part = int(num)\n    fractional_part = abs(num - integer_part)\n    \n    # Logic to determine rounding away from zero for .5 fractional part\n    if fractional_part == 0.5:\n        if num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n    else:\n        # Regular rounding\n        return round(num)\n\n# Example usage and testing the function\nif __name__ == \"__main__\":\n    print(closest_integer(\"10\"))     # Expected output: 10\n    print(closest_integer(\"15.3\"))   # Expected output: 15\n    print(closest_integer(\"14.5\"))   # Expected output: 15\n    print(closest_integer(\"-14.5\"))  # Expected output: -15\n    print(closest_integer(\"0.5\"))    # Expected output: 1\n    print(closest_integer(\"-0.5\"))   # Expected output: -1"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    # Define a set of even digits for quick lookup\n    even_digits = {'0', '2', '4', '6', '8'}\n    \n    # Filter the list to include only numbers with no even digits\n    result = []\n    for num in x:\n        num_str = str(num)  # Convert the number to a string to iterate over digits\n        if all(digit not in even_digits for digit in num_str):\n            result.append(num)\n    \n    # Return the sorted result list\n    return sorted(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\n    print(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    # Initialize the list with the first level containing n stones\n    pile = [n]\n\n    # Determine the increment based on whether n is odd or even\n    increment = 2 if n % 2 == 0 else 2\n\n    # Loop to generate the remaining levels, we need (n-1) more levels\n    for i in range(1, n):\n        # Append the next level's number of stones by adding the increment to the last element\n        pile.append(pile[i-1] + increment)\n    \n    return pile\n\n# Examples for testing:\nprint(make_a_pile(3))  # Expected output: [3, 5, 7]\nprint(make_a_pile(4))  # Expected output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    # Helper function to check if a number is a palindrome\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Test examples to verify the correctness\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Check if n is greater than m, if so return -1\n    if n > m:\n        return -1\n    \n    # Calculate number of terms in the range\n    num_terms = m - n + 1\n    \n    # Calculate the sum of the integers from n to m (inclusive)\n    sum_of_terms = (m * (m + 1) // 2) - ((n - 1) * n // 2)\n    \n    # Calculate the average\n    avg = sum_of_terms / num_terms\n    \n    # Round average to the nearest integer\n    rounded_avg = round(avg)\n    \n    # Convert rounded average to binary\n    return bin(rounded_avg)\n\n# Example outputs for verification\nprint(rounded_avg(1, 5))  # Output should be \"0b11\"\nprint(rounded_avg(7, 5))  # Output should be -1\nprint(rounded_avg(10, 20))  # Output should be \"0b1111\"\nprint(rounded_avg(20, 33))  # Output should be \"0b11010\""}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digit of each number. The unit digit of a number can be\n    # found by taking modulo 10 of the number. For instance, the unit digit of 148\n    # is 8 and the unit digit of 412 is 2.\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Return the product of the unit digits.\n    return unit_digit_a * unit_digit_b\n\n# Test the examples provided in the docstring\nassert multiply(148, 412) == 16\nassert multiply(19, 28) == 72\nassert multiply(2020, 1851) == 0\nassert multiply(14, -15) == 20"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Dictionary to map numbers to their corresponding names\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter the array to keep only the numbers between 1 and 9 inclusive\n    filtered_numbers = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered numbers\n    sorted_numbers = sorted(filtered_numbers)\n    \n    # Reverse the sorted list\n    reversed_numbers = sorted_numbers[::-1]\n    \n    # Map the numbers to their corresponding names\n    result = [number_names[num] for num in reversed_numbers]\n    \n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize the current subarray sum to the first element,\n    # and the minimum subarray sum to the first element.\n    current_sum = nums[0]\n    min_sum = nums[0]\n    \n    # Iterate from the second element to the end of the list.\n    for num in nums[1:]:\n        # If the current subarray sum (previous sum + current element)\n        # is greater than the current element itself, start new subarray from current element.\n        current_sum = min(num, current_sum + num)\n        \n        # Update the minimum subarray sum if the current subarray sum is lower\n        # than the previously recorded minimum.\n        min_sum = min(min_sum, current_sum)\n    \n    # Return the minimum subarray sum found.\n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output should be 1\nprint(minSubArraySum([-1, -2, -3]))        # Output should be -6"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    if n < 2:\n        # If n is less than 2, there are no primes less than n.\n        return []\n    \n    # Create a boolean array \"sieve[0..n-1]\" and initialize all entries as True.\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False # 0 and 1 are not primes.\n    \n    p = 2\n    while p * p < n:\n        if sieve[p]:\n            # Updating all multiples of p to False indicating they are not primes.\n            for i in range(p * p, n, p):\n                sieve[i] = False\n        p += 1\n    \n    # Collecting all prime numbers less than n.\n    primes = [num for num, is_prime in enumerate(sieve) if is_prime]\n    return primes"}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Compute the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n\n    if max_prime == -1:\n        return 0  # No prime number found in the list\n\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(x):\n        # Helper function to calculate factorial\n        if x == 0 or x == 1:\n            return 1\n        product = 1\n        for i in range(2, x + 1):\n            product *= i\n        return product\n    \n    def sum_up_to(x):\n        # Helper function to calculate sum from 1 to x\n        return (x * (x + 1)) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to(i))\n    \n    return result\n\n# Example usage\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    def count_odds(s):\n        # Helper function to count the number of odd digit characters in a string\n        count = 0\n        for ch in s:\n            if int(ch) % 2 != 0:  # Check if the character is an odd digit\n                count += 1\n        return count\n\n    result = []\n    for s in lst:\n        odd_digits_count = count_odds(s)\n        # Replace all 'i' with the number of odd digits count\n        modified_string = f\"the number of odd elements {odd_digits_count}n the str{odd_digits_count}ng {odd_digits_count} of the {odd_digits_count}nput.\"\n        result.append(modified_string)\n\n    return result\n\n# Examples\nprint(odd_count(['1234567']))  # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', '11111111']))  # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    # Create a set of characters to be deleted for O(1) look-up time\n    delete_set = set(c)\n    \n    # Remove characters in delete_set from s\n    result = ''.join(ch for ch in s if ch not in delete_set)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Return the result and the palindrome check\n    return (result, is_palindrome)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Edge case for empty array\n    if not arr:\n        return True\n    \n    n = len(arr)\n    count_breaks = 0  # to count the number of out-of-order pairs\n\n    # Loop to count out-of-order pairs\n    for i in range(1, n):\n        if arr[i - 1] > arr[i]:\n            count_breaks += 1\n\n    # Also need to compare the last element with the first element\n    if arr[-1] > arr[0]:\n        count_breaks += 1\n\n    # If there is more than one out-of-order pair, it's not possible to sort it with shifts\n    return count_breaks <= 1\n\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False\nprint(move_one_ball([]))  # True\nprint(move_one_ball([1]))  # True\nprint(move_one_ball([4, 1, 2, 3]))  # True\nprint(move_one_ball([4, 3, 2, 1]))  # False\nprint(move_one_ball([4, 3, 5, 1, 2]))  # False"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    if not arr:\n        return arr\n    \n    # Helper function to count number of ones in binary representation\n    def count_ones(x):\n        return bin(x).count('1')\n    \n    # Sort primarily by number of ones in their binary representation and secondarily by the decimal value\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Test the function with the given examples\nprint(sort_array([1, 5, 2, 3, 4]))  # Expected: [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # Expected: [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # Expected: [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/108", "completion": "def digit_sum(n):\n    \"\"\"\n    Calculate the sum of the digits of a number, taking the sign into account.\n    For negative numbers, the first digit should be negative.\n    \"\"\"\n    # Convert number to string to access digits\n    n_str = str(n)\n    # Keep track of the total sum of digits\n    total = 0\n    # Flag to handle the first digit being negative\n    first_digit = True\n\n    for char in n_str:\n        if char == '-':\n            continue  # Skip the negative sign\n        if first_digit and n < 0:\n            total -= int(char)  # The first digit is negative\n        else:\n            total += int(char)  # Regular addition of digits\n        first_digit = False\n    \n    return total\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which have a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n\n    # Iterate through each number in the array\n    for num in arr:\n        if digit_sum(num) > 0:\n            count += 1\n\n    return count\n\n# Test cases to verify the solution\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Return empty dictionary if the input string is empty\n    if not letters:\n        return {}\n\n    # Initialize a dictionary to count the occurrences of each letter\n    letter_count = {}\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # Find the maximum count of any letter\n    max_count = max(letter_count.values())\n\n    # Create a result dictionary with letters having the maximum count\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    \n    return result\n\n# Test cases\n# Example test cases provided in the docstring\nprint(histogram('a b c'))          # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))        # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))      # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))      # {'b': 4}\nprint(histogram(''))               # {}"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Count the number of odd numbers in lst1 \n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # Check if the number of evens in lst2 is sufficient to replace the odds in lst1\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate over the list using enumerate to get both index and element\n    for idx, val in enumerate(lst):\n        # Check if the position is even (0-based indexing makes 0, 2, 4,...) \n        # and if the element is odd\n        if idx % 2 == 0 and val % 2 != 0:\n            # Add the value to the total sum\n            total_sum += val\n            \n    # Return the total sum of odd elements in even positions\n    return total_sum"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    # Create a set of vowels for quick checking\n    vowels = set('aeiouAEIOU')\n    \n    # Split the input string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is a consonant (not a vowel and is alphabetic)\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the consonant count matches n, append the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    # Return the final list of words\n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Reverse iterate from the second last character to the second character\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels:\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n    \n    return \"\"\n\n# Examples to test the function\nprint(get_closest_vowel(\"yogurt\"))  # Expected output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Expected output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Expected output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Expected output: \"\""}
{"task_id": "HumanEval/127", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Helper function to check primality of a number\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determines whether the length of intersection of two intervals is a prime number\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection range\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # If intersections do not exist\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Length of the intersection\n    intersection_length = intersection_end - intersection_start\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\""}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text,\n    you should split on commas ','. If no commas exist, you should return the number of lower-case letters\n    with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") \u279e 3\n    '''\n\n    # Case 1: Split on whitespace\n    if ' ' in txt:\n        return txt.split()\n\n    # Case 2: Split on commas\n    elif ',' in txt:\n        return txt.split(',')\n\n    # Case 3: Count lower-case letters with odd order in the alphabet\n    else:\n        odd_count = 0\n        # Iterate through each character in the string\n        for char in txt:\n            # Check if the character is a lower-case letter\n            if 'a' <= char <= 'z':\n                # Calculate the position in the alphabet (0-based index)\n                order = ord(char) - ord('a')\n                # Check if the position is odd\n                if order % 2 == 1:\n                    odd_count += 1\n        return odd_count\n\n# Examples to test the function\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # \u279e 3"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Edge case: if k is 0, return an empty list.\n    if k == 0:\n        return []\n\n    # Sort the array in descending order to get the maximum elements first.\n    sorted_arr = sorted(arr, reverse=True)\n\n    # Take the first k elements from the sorted array.\n    result = sorted_arr[:k]\n\n    # Sort the result in ascending order before returning.\n    return sorted(result)\n\n# Example usage:\n# print(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\n# print(maximum([4, -4, 4], 2))  # Output: [4, 4]\n# print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If the list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if not lst or len(lst) == 1:\n        return True\n\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:  # Not in ascending order\n            return False\n        if i > 1 and lst[i] == lst[i - 1] and lst[i - 1] == lst[i - 2]:  # More than 1 duplicate\n            return False\n    \n    return True"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    # Initialize the sum of magnitudes and product of signs\n    sum_of_magnitudes = 0\n    product_of_signs = 1\n\n    for number in arr:\n        sum_of_magnitudes += abs(number)\n        \n        if number == 0:\n            product_of_signs = 0\n            break  # No need to proceed further if a zero is found\n        \n        elif number < 0:\n            product_of_signs *= -1\n        \n        # Note that positive numbers have no effect on the product of signs\n\n    return sum_of_magnitudes * product_of_signs\n\n# Example usage\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))  # Output: -9\n    print(prod_signs([0, 1]))         # Output: 0\n    print(prod_signs([]))             # Output: None"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    import re\n    \n    # First check if the date is not empty\n    if not date:\n        return False\n\n    # Check if the date matches the correct format using regex\n    date_pattern = r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\\d{4})$'\n    if not re.match(date_pattern, date):\n        return False\n\n    # Split the date into components\n    month, day, year = map(int, date.split('-'))\n    \n    # Dictionary with max days for each month\n    month_max_days = {\n        1: 31, 2: 29, 3: 31, 4: 30,\n        5: 31, 6: 30, 7: 31, 8: 31,\n        9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check month validity\n    if month < 1 or month > 12:\n        return False\n\n    # Check day validity\n    if day < 1 or day > month_max_days[month]:\n        return False\n\n    return True\n\n# Examples\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # Add the element to the sum\n            total_sum += arr[i]\n    \n    # Return the final sum\n    return total_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    \n    total_water_units = 0\n    \n    # Count the total number of water units (number of 1's in the grid)\n    for row in grid:\n        total_water_units += sum(row)\n    \n    # If there are no water units, we don't need to use the bucket\n    if total_water_units == 0:\n        return 0\n    \n    # Calculate the number of bucket lowerings needed\n    num_lowerings = math.ceil(total_water_units / capacity)\n    \n    return num_lowerings\n\n# Test examples\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(s):\n        \"\"\"Helper function to check if a string of parentheses is balanced.\"\"\"\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n                \n            # If balance drops below 0, we have more closing than opening\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Extract the two strings from the list\n    str1, str2 = lst\n\n    # Check both possible concatenations\n    possible_1 = str1 + str2\n    possible_2 = str2 + str1\n\n    # Return 'Yes' if any concatenation results in a balanced string\n    if is_balanced(possible_1) or is_balanced(possible_2):\n        return 'Yes'\n    \n    return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))   # Output: 'Yes'\nprint(match_parens([')', ')']))     # Output: 'No'"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Initialize the product of odd digits to 1\n    product = 1\n    \n    # Initialize a flag to check the presence of odd digits\n    has_odd = False\n    \n    # Iterate through each digit of the number\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    # If no odd digit was found, return 0\n    if not has_odd:\n        return 0\n    \n    return product"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = set()\n    \n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.add(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n            \n    odd_numbers.add(1) # 1 is always the final value in the Collatz sequence\n    \n    return sorted(odd_numbers)\n\n# Example test\nprint(get_odd_collatz(5)) # Expected [1, 5]"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    '''\n    # Remove any trailing spaces to examine the last actual character\n    txt = txt.rstrip()\n\n    # Check if the string is empty after removing spaces\n    if not txt:\n        return False\n\n    # Check if the last character is an alphabetical character and not part of a word\n    if txt[-1].isalpha():\n        # Check the character before the last one to determine if it's a standalone letter\n        if len(txt) == 1 or txt[-2] == ' ':\n            return True\n\n    return False"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is the Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    # Create the result list initially with correct size all set to None\n    result = [None] * (n + 1)\n\n    # Special base cases\n    if n >= 0:\n        result[0] = 1  # By problem statement, tri(0) was implied to be 1\n    if n >= 1:\n        result[1] = 3\n\n    # Compute subsequent values\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result[i] = 1 + i // 2\n        else:\n            result[i] = result[i - 1] + result[i - 2] + result[i // 2]\n\n    return result\n\n# Example usage\nprint(tri(3))  # Output should be [1, 3, 2, 8]\nprint(tri(4))  # Output should include the fifth element in the sequence"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    # Apply the ceiling function to all elements in the list\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Compute the sum of the squares\n    result = sum(x**2 for x in rounded_lst)\n    \n    return result\n\n# Testing the function with provided examples\nprint(sum_squares([1, 2, 3]))         # Output should be 14\nprint(sum_squares([1, 4, 9]))         # Output should be 98\nprint(sum_squares([1, 3, 5, 7]))      # Output should be 84\nprint(sum_squares([1.4, 4.2, 0]))     # Output should be 29\nprint(sum_squares([-2.4, 1, 1]))      # Output should be 6"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    def convert_to_float(val):\n        \"\"\" Convert a string with , or . as decimal point to a float \"\"\"\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    \n    # Convert both a and b to float for comparison\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    # Compare the float values\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b\n\n\n# Testing the function with given examples\nprint(compare_one(1, 2.5)) # \u279e 2.5\nprint(compare_one(1, \"2,3\")) # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\")) # \u279e \"6\"\nprint(compare_one(\"1\", 1)) # \u279e None"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                # Check if we were previously nested\n                if stack:\n                    return True\n            else:\n                # If stack is empty and we encounter a closing bracket, \n                # it means there's no matching opening bracket, so no need to check further.\n                continue\n                \n    return False\n\n# Sample Test Cases\nprint(is_nested('[[]]'))  # True\nprint(is_nested('[]]]]]]][[[[[]'))  # False\nprint(is_nested('[][]'))  # False\nprint(is_nested('[]'))  # False\nprint(is_nested('[[][]]'))  # True\nprint(is_nested('[[]][['))  # True"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n    \n    # Check if there is exactly one dot in the filename\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    # Check if the extension is one of the valid extensions\n    valid_extensions = ['txt', 'exe', 'dll']\n    if parts[1] not in valid_extensions:\n        return 'No'\n\n    # Check if the part before the dot is not empty and starts with a letter\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n    \n    # Count the number of digits in the entire filename\n    digit_count = sum(char.isdigit() for char in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Examples of usage:\n# print(file_name_check(\"example.txt\")) # => 'Yes'\n# print(file_name_check(\"1example.dll\")) # => 'No'"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if the number n is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words whose length is a prime number\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Return the filtered words joined by a space\n    return \" \".join(prime_length_words)\n\n# Examples to check the function\nprint(words_in_sentence(\"This is a test\"))          # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))    # Output: \"go for\""}
{"task_id": "HumanEval/129", "completion": "import heapq\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n\n    # Initialize the priority queue\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n\n    while pq:\n        value, x, y, path = heapq.heappop(pq)\n        \n        # If the path length is k, return the path\n        if len(path) == k:\n            return path\n        \n        # Explore the 4 possible directions\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (new_path[-1], nx, ny, new_path))\n"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result\n\n# Example usage:\nprint(special_factorial(4))  # Output should be 288"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    # Initialize variables to keep track of the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through each number in the list\n    for number in lst:\n        # Check if the number is negative\n        if number < 0:\n            # Update largest_negative if it is None or the number is greater than current largest_negative\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        # Check if the number is positive\n        elif number > 0:\n            # Update smallest_positive if it is None or the number is smaller than current smallest_positive\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    # Return the result as a tuple\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(n):\n        \"\"\"Helper function to calculate the sum of digits of an integer.\"\"\"\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Original indices tracking to handle same sum's original order importance\n    indexed_nums = enumerate(nums)\n    \n    # Sorting by digit sum as primary key and by original index as secondary key\n    sorted_nums = sorted(indexed_nums, key=lambda x: (digit_sum(x[1]), x[0]))\n    \n    # Extracting and returning the sorted numbers\n    return [num for index, num in sorted_nums]\n\n# Example usage and verification by provided examples\nprint(order_by_points([1, 11, -1, -11, -12]))  # Expected: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Expected: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    def is_odd_digit(digit):\n        \"\"\"Helper function to check if a digit is odd.\"\"\"\n        return digit in {1, 3, 5, 7, 9}\n    \n    def get_first_last_digits(n):\n        \"\"\"Helper function to return the first and last digits of a number.\"\"\"\n        n = abs(n)  # Work with the absolute value to ignore negatives\n        s = str(n)\n        return int(s[0]), int(s[-1])\n    \n    count = 0\n\n    for num in nums:\n        if num > 10:\n            first_digit, last_digit = get_first_last_digits(num)\n            if is_odd_digit(first_digit) and is_odd_digit(last_digit):\n                count += 1\n\n    return count\n\n# Example Usages:\n# print(specialFilter([15, -73, 14, -15])) # Expected output: 1\n# print(specialFilter([33, -2, -3, 45, 21, 109])) # Expected output: 2"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # If n is less than 8, it is not possible to represent it as the sum of four positive even numbers\n    if n < 8:\n        return False\n    \n    # If n is not even, it cannot be the sum of even numbers\n    if n % 2 != 0:\n        return False\n    \n    # All numbers greater than or equal to 8 and even can be represented as the sum of four positive even numbers\n    return True"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representations of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    \n    # Helper function to convert a fraction string to a tuple of integers (numerator, denominator)\n    def parse_fraction(fraction):\n        num, denom = fraction.split('/')\n        return int(num), int(denom)\n    \n    # Parsing both fractions x and n\n    num_x, denom_x = parse_fraction(x)\n    num_n, denom_n = parse_fraction(n)\n    \n    # Performing the multiplication of the two fractions\n    # (num_x / denom_x) * (num_n / denom_n) = (num_x * num_n) / (denom_x * denom_n)\n    result_num = num_x * num_n\n    result_denom = denom_x * denom_n\n    \n    # Check if the result is a whole number\n    return result_num % result_denom == 0\n\n# Examples to verify the implementation\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total = 0  # Initialize total sum\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2  # Square the entry if index is multiple of 3\n        elif i % 4 == 0:\n            total += lst[i] ** 3  # Cube the entry if index is multiple of 4 but not 3\n        else:\n            total += lst[i]  # Leave the entry unchanged otherwise\n    \n    return total  # Return the total sum\n\n# Example usages:\n# print(sum_squares([1,2,3]))  # Output should be 6\n# print(sum_squares([]))  # Output should be 0\n# print(sum_squares([-1,-5,2,-1,-5]))  # Output should be -126"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Initialize the result index as -1\n    result_index = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, arr.length):\n        # If the current element is less than or equal to the previous one\n        if arr[i] < arr[i - 1]:\n            # Update the result index to the current index\n            result_index = i\n    \n    # Return the result index, which will be -1 if no such index is found\n    return result_index"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # List of planets in order of proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indexes of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2 for easier slicing\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Get the planets between the two indexes\n    result = planets[index1 + 1:index2]\n    \n    return tuple(result)\n\n# Example usage\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Accepts a list of strings, deletes the strings that have odd lengths from it,\n    and returns the resulting list in sorted order. Sorting is done primarily by length\n    of the strings (ascending), and secondarily by alphabetical order for strings of the\n    same length. Duplicate strings are not removed.\n    \n    Args:\n    - lst (List[str]): A list of strings.\n    \n    Returns:\n    - List[str]: A list of strings in sorted order.\n    \n    Example:\n    >>> sorted_list_sum([\"aa\", \"a\", \"aaa\"])\n    [\"aa\"]\n    \n    >>> sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])\n    [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort primarily by length and secondarily alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n\n# Test cases to validate the implementation\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # Should return [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # Should return [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n    \n    # Use regular expressions to replace more than 2 consecutive spaces with \"-\"\n    text = re.sub(r'\\s{3,}', '-', text)\n    \n    # Replace all remaining spaces with underscores\n    text = text.replace(' ', '_')\n    \n    return text\n\n# Example usage (for testing purposes)\nprint(fix_spaces(\"Example\"))          # Should return \"Example\"\nprint(fix_spaces(\"Example 1\"))        # Should return \"Example_1\"\nprint(fix_spaces(\" Example 2\"))       # Should return \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))     # Should return \"_Example-3\""}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Create a list to hold the results\n    result = []\n\n    # Iterate through both lists using zip to pair each element\n    for score, guess in zip(game, guess):\n        # If the guess is correct, append 0\n        if score == guess:\n            result.append(0)\n        # Otherwise append the absolute difference\n        else:\n            result.append(abs(score - guess))\n    \n    return result\n\n# Examples\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Expected: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Expected: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string to easily iterate over each digit\n    str_num = str(abs(num))  # We use abs() to handle negative numbers\n    \n    even_count = 0\n    odd_count = 0\n    \n    for char in str_num:\n        digit = int(char)\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_count(-12))  # Output: (1, 1)\n# print(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # List of tuples with roman numeral and its corresponding integer value\n    val_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n\n    # String to hold the resulting roman numeral\n    result = \"\"\n\n    # Traverse through the tuples in the list\n    for (value, roman) in val_map:\n        # While the number is greater than or equal to the value,\n        # subtract the value from the number and add the roman numeral\n        # to the result.\n        while number >= value:\n            result += roman\n            number -= value\n\n    # Return the result in lowercase, as required\n    return result.lower()\n\n# Test cases to verify the implementation\nprint(int_to_mini_roman(19))   # Expected 'xix'\nprint(int_to_mini_roman(152))  # Expected 'clii'\nprint(int_to_mini_roman(426))  # Expected 'cdxxvi'\nprint(int_to_mini_roman(1000)) # Expected 'm'"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Initialize a variable to keep the sum of squares of odd numbers\n    total = 0\n    \n    # Iterate through each item in the list\n    for num in lst:\n        # Check if the number is an integer, positive, and odd\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            # Add the square of the number to the total\n            total += num ** 2\n    \n    # Return the result\n    return total"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # First, sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Destructure the sorted sides into variables\n    x, y, z = sides\n    \n    # Check if the two smaller sides squared sum to the largest side squared (Pythagorean theorem)\n    return x*x + y*y == z*z\n\n# Examples\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        # Calculate the number of uppercase and lowercase letters\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        # Return the strength as CAP - SM\n        return CAP - SM\n    \n    # Initialize variables to track the strongest extension and its strength\n    strongest_extension = None\n    max_strength = None\n    \n    # Iterate over each extension to find the strongest one\n    for ext in extensions:\n        strength = extension_strength(ext)\n        # Update if we find stronger extension or compare lexicographically if strengths are the same\n        if max_strength is None or strength > max_strength or (strength == max_strength and extentions.index(ext) < extentions.index(strongest_extension)):\n            strongest_extension = ext\n            max_strength = strength\n    \n    # Return the class name concatenated with the strongest extension\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example Usage:\n# print(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # 'Slices.SErviNGSliCes'\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # 'my_class.AA'"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    \n    # Initialize variables to track the word with the max unique characters\n    max_unique_count = 0\n    result_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)  # Use a set to get unique characters\n        unique_count = len(unique_chars)\n        \n        # Compare the number of unique characters and the lexicographical order\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < result_word):\n            max_unique_count = unique_count\n            result_word = word\n    \n    return result_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # \"aaaaaaa\""}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operator and operand lists\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n        else:\n            raise ValueError(f\"Unknown operator: {op}\")\n    \n    return result\n\n# Example usage:\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nprint(do_algebra(operator, operand))  # Output should be 2 + 3 * 4 - 5 = 9"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations\n    is a substring in the first word.\n\n    Examples:\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # If b is already a substring of a, we can return True immediately\n    if b in a:\n        return True\n\n    # Rotate b and check if any rotation is a substring of a\n    for i in range(1, len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    # If no rotation of b is found in a, return False\n    return False"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    # Create an md5 hash object.\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the text.\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Get the hexadecimal digest of the hash.\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vice versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulting string.\n    Examples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Check if there are any alphabetic characters in the string\n    has_letters = any(c.isalpha() for c in s)\n\n    if not has_letters:\n        # If no alphabetic characters, reverse the string\n        return s[::-1]\n\n    # Initialize result list to accumulate modified characters\n    result = []\n\n    for char in s:\n        if char.isalpha():\n            # Reverse the case of alphabetic characters\n            result.append(char.lower() if char.isupper() else char.upper())\n        else:\n            # Keep non-alphabetic characters as is\n            result.append(char)\n\n    return ''.join(result)\n\n# Testing the function\nprint(solve(\"1234\"))  # expected \"4321\"\nprint(solve(\"ab\"))    # expected \"AB\"\nprint(solve(\"#a@C\"))  # expected \"#A@c\""}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Define the possible even digits\n    even_digits = [2, 4, 6, 8]\n\n    # Handle the case where a and b might be in reverse order\n    low = min(a, b)\n    high = max(a, b)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the even digits\n    for digit in even_digits:\n        if low <= digit <= high:\n            result.append(digit)\n\n    return result\n\n# Examples:\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    import math\n    \n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize counts for remainders when divided by 3\n    counts = [0, 0, 0]\n    \n    # Count how many elements of each remainder there are\n    for value in a:\n        remainder = value % 3\n        counts[remainder] += 1\n    \n    # Calculate number of valid triples\n    count_0, count_1, count_2 = counts\n    \n    # Combination counts\n    c_0 = math.comb(count_0, 3) if count_0 >= 3 else 0  # Triples of remainder 0\n    c_1 = math.comb(count_1, 3) if count_1 >= 3 else 0  # Triples of remainder 1\n    c_2 = math.comb(count_2, 3) if count_2 >= 3 else 0  # Triples of remainder 2\n    \n    # Mixed count where sum is divisible by 3: 0 + 1 + 2\n    mix_count = count_0 * count_1 * count_2\n    \n    return c_0 + c_1 + c_2 + mix_count\n\n# Example test cases\nprint(get_max_triples(5))  # Output: 1\nprint(get_max_triples(10)) # Output: (depends on the calculations) "}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the total number of carrots that need to be eaten to satisfy the need\n    total_needed = number + need\n    \n    # Determine if there are enough remaining carrots to meet the need\n    if remaining >= need:\n        # There are enough carrots to meet the need\n        return [total_needed, remaining - need]\n    else:\n        # There are not enough carrots to meet the need\n        return [number + remaining, 0]\n\n# Test cases to validate the function \n# - (5 + 6 <= 10), enough carrots available, thus result should be [11, 4]\nprint(eat(5, 6, 10))  \n\n# - (4 + 8 <= 9), enough carrots available, thus result should be [12, 1]\nprint(eat(4, 8, 9))  \n\n# - (1 + 10 <= 10), exactly enough carrots, thus result should be [11, 0]\nprint(eat(1, 10, 10))  \n\n# - Need more carrots than available; thus, result should be [previously eaten + all remaining, 0]\nprint(eat(2, 11, 5))  # Expected [7, 0]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True  # 2 is the only even prime number\n    if num % 2 == 0:\n        return False  # Other even numbers are not prime\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Examples\nprint(x_or_y(7, 34, 12))  # Expected output: 34\nprint(x_or_y(15, 8, 5))  # Expected output: 5\n"}
