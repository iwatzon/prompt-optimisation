{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" \n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    :param operations: List of integers representing deposit (positive) and withdrawal (negative) operations.\n    :return: True if at any point the balance falls below zero, False otherwise.\n    \n    >>> below_zero([1, 2, 3])\n    False\n    \n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    # Initialize the balance to zero\n    balance = 0\n    \n    # Iterate through the list of operations\n    for operation in operations:\n        # Modify the balance according to the operation\n        balance += operation\n        \n        # Check if the balance falls below zero\n        if balance < 0:\n            return True\n    \n    # If the balance never falls below zero, return False\n    return False"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    :param numbers: List of integers to compute the sum and product.\n    :return: A tuple containing the sum and product of the integers in the list.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Base cases: if the list is empty, return (0, 1)\n    if not numbers:\n        return 0, 1\n\n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n\n    # Iterate over the list to compute sum and product\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n\n    return total_sum, total_product\n\n# Zero represents least amount of sum additions and 1 represents the multiplicative identity\n# If we have no elements in the array sum = 0 and product = 1\n# Complexity in terms of both time and space is O(n) as we have to go through all the elements once\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    def extract_groups(paren_string: str) -> List[str]:\n        \"\"\"\n        Extracts separate groups of balanced parentheses from the input string, ignoring spaces.\n        \n        :param paren_string: Input string containing groups of balanced parentheses.\n        :return: List of strings, each representing a separate group of balanced parentheses.\n        \"\"\"\n        # Removing all spaces from the input string\n        filtered_string = paren_string.replace(' ', '')\n        \n        groups = []  # List to store the result groups\n        current_group = []  # List to store characters of the current group\n        balance = 0  # Variable to track the balance of parentheses\n        \n        # Loop through each character in the filtered string\n        for char in filtered_string:\n            current_group.append(char)\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n\n            # If balance drops to zero, it means we have a complete balanced group\n            if balance == 0:\n                groups.append(''.join(current_group))  # Add the current group to the list\n                current_group = []  # Reset current group for the next set of parentheses\n        \n        return groups\n    \n    return extract_groups(paren_string)"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    :param numbers: List of floating point numbers.\n    :return: The mean absolute deviation of the input numbers.\n    \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    # Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute deviation from the mean\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    \n    # Calculate the mean of the absolute deviations\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad\n\n# Example usage:\n# print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\"Test if the given string is a palindrome\"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    \n    Algorithm:\n    - Find the longest postfix of the supplied string that is a palindrome.\n    - Append to the end of the string the reverse of the string prefix that comes\n      before the palindromic suffix.\n    \n    :param string: The input string.\n    :return: The shortest palindrome starting with the input string.\n    \n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    \n    def longest_palindromic_suffix(s: str) -> str:\n        \"\"\"Helper function to find the longest palindromic suffix of a given string.\"\"\"\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                return s[i:]\n        return \"\"\n    \n    # Find the longest palindromic suffix\n    suffix = longest_palindromic_suffix(string)\n    \n    # Get the prefix that needs to be mirrored and appended\n    prefix = string[:-len(suffix)]\n    reversed_prefix = prefix[::-1]\n    \n    # Create the palindrome\n    return string + reversed_prefix\n\n# Example use cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor of two integers a and b using the Euclidean algorithm.\n    \n    :param a: First integer\n    :param b: Second integer\n    :return: Greatest common divisor of a and b\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(0, 5)\n    5\n    >>> greatest_common_divisor(25, 0)\n    25\n    >>> greatest_common_divisor(-25, 15)\n    5\n    >>> greatest_common_divisor(25, -15)\n    5\n    \"\"\"\n\n    # Handle negative inputs by taking absolute values\n    a, b = abs(a), abs(b)\n\n    # If a or b is zero, return the non-zero value (or 0 if both are zero)\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    # Use Euclidean algorithm to find the greatest common divisor\n    while b != 0:\n        a, b = b, a % b\n    \n    return a\n\n# Examples to illustrate functionality\nprint(greatest_common_divisor(3, 5))  # Output: 1\nprint(greatest_common_divisor(25, 15))  # Output: 5\nprint(greatest_common_divisor(0, 5))  # Output: 5\nprint(greatest_common_divisor(25, 0))  # Output: 25\nprint(greatest_common_divisor(-25, 15))  # Output: 5\nprint(greatest_common_divisor(25, -15))  # Output: 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" \n    Return list of all prefixes from shortest to longest of the input string.\n\n    :param string: Input string to generate prefixes from.\n    :return: List of all prefixes from shortest to longest.\n    \n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # Ensure the input is a string\n    if not isinstance(string, str):\n        raise ValueError(\"Input must be a string\")\n    \n    # List to store the prefixes\n    prefixes = []\n    \n    # Generate prefixes from the input string\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    :param n: Non-negative integer upto which the sequence is generated.\n    :return: A space-delimited string of numbers from 0 to n.\n    \n    >>> string_sequence(0)\n    '0'\n\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    \n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    \n    # Generate the sequence of numbers from 0 to n as strings\n    numbers = [str(i) for i in range(n + 1)]\n    \n    # Join the list of strings with a space delimiter\n    result = \" \".join(numbers)\n    \n    return result"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Function to determine the maximum nesting level of parentheses in a single group\n    def max_nesting_level(parens: str) -> int:\n        current_level = 0\n        max_level = 0\n        for char in parens:\n            if char == '(':\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    # Split the input string by spaces to get different groups of parentheses\n    paren_groups = paren_string.split()\n    \n    # Calculate the maximum nesting level for each group and return the results as a list\n    return [max_nesting_level(group) for group in paren_groups]\n\n# Testing the function with the given example\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Expected output: [2, 3, 1, 3]\n\n# Providing additional unittests within the docstring\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" \n    Check if in given list of numbers, any two numbers are closer to each other than \n    a given threshold.\n    \n    :param numbers: List of floating-point numbers to check.\n    :param threshold: Floating-point threshold value to compare distances.\n    :return: True if any two numbers are closer than the given threshold, False otherwise.\n    \n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Early return if there are fewer than 2 numbers\n    if len(numbers) < 2:\n        return False\n\n    # Sort the list of numbers to ensure we can compare only neighboring elements\n    numbers.sort()\n\n    # Iterate through the sorted list and check adjacent pairs\n    for i in range(1, len(numbers)):\n        # Calculate distance between consecutive elements\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    \n    # If no pair is found within the threshold, return False\n    return False"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" \n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`.\n    \n    This function handles various edge cases such as empty lists and lists with single elements \n    directly in the main logic. The approach used is straightforward iteration for simplicity \n    and clarity, which is efficient given the nature of the problem.\n    \n    :param numbers: List of integers to be interspersed with the delimiter.\n    :param delimiter: The integer to be inserted between every two consecutive elements.\n    :return: A new list with the delimiter interspersed between elements.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    \n    # Check if the list is empty or has only one element, return it directly\n    if not numbers or len(numbers) == 1:\n        return numbers\n    \n    # Create a new list to store the result\n    interspersed_list = []\n    \n    # Iterate through the numbers list, adding elements and delimiter in between\n    for i in range(len(numbers)):\n        interspersed_list.append(numbers[i])\n        # Add the delimiter if it's not the last element\n        if i < len(numbers) - 1:\n            interspersed_list.append(delimiter)\n    \n    return interspersed_list\n\n# Additional example usage for clarity\nif __name__ == \"__main__\":\n    # Test cases\n    print(intersperse([], 4))  # expected output: []\n    print(intersperse([1, 2, 3], 4))  # expected output: [1, 4, 2, 4, 3]\n    print(intersperse([1], 4))  # expected output: [1]\n    print(intersperse([1, 2], 4))  # expected output: [1, 4, 2]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain the given substring.\n    \n    :param strings: List of strings to be filtered.\n    :param substring: Substring to look for within the list elements.\n    :return: List of strings that contain the substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Validate input parameters\n    if not isinstance(strings, list) or not isinstance(substring, str):\n        raise ValueError(\"Invalid input: 'strings' must be a list and 'substring' must be a string.\")\n    \n    # Filter the strings that contain the substring\n    filtered_strings = [string for string in strings if substring in string]\n    \n    return filtered_strings"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    :param a: First binary string.\n    :param b: Second binary string.\n    :return: Result of XOR operation as a binary string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    \n    # Check if the input strings are of the same length.\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Use a list comprehension to perform XOR operation on each bit and join them into a string.\n    result = ''.join('1' if charA != charB else '0' for charA, charB in zip(a, b))\n    \n    return result\n\n\n# Example usage and test case\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    \n    # Sample usage\n    a = '010'\n    b = '110'\n    print(string_xor(a, b))  # Output: '100'"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" \n    Given a positive floating point number, it can be decomposed into an integer \n    part (largest integer smaller than given number) and decimals (leftover part always \n    smaller than 1).\n\n    Return the decimal part of the number.\n    \n    :param number: A positive floating point number.\n    :return: The decimal part of the number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(4.99)\n    0.99\n    >>> truncate_number(0.123)\n    0.123\n    >>> truncate_number(10.0)\n    0.0\n    >>> truncate_number(5.555)\n    0.555\n    \"\"\"\n    # Ensure the input is a positive floating point number.\n    if number < 0:\n        raise ValueError(\"Input must be a positive floating point number.\")\n    \n    # Extracting the integer part\n    integer_part = int(number)\n    \n    # Subtracting the integer part from the original number to get the decimal part\n    decimal_part = number - integer_part\n    \n    return decimal_part\n\n# Print example for better visualization purpose\nif __name__ == \"__main__\":\n    test_cases = [3.5, 4.99, 0.123, 10.0, 5.555]\n    for number in test_cases:\n        print(f\"truncate_number({number}) = {truncate_number(number)}\")"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    :param strings: A list of strings.\n    :return: The longest string in the list, or None if the list is empty.\n    \n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    # Initialize the longest string with the first string in the list\n    longest_string = strings[0]\n    \n    # Iterate through each string in the list, starting from the second element\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Create a dictionary to map note symbols to their respective beat durations\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split input music_string by spaces to get individual note symbols\n    notes = music_string.split()\n    \n    # Convert each note symbol to its corresponding beat duration using the dictionary\n    beats = [note_to_beats[note] for note in notes]\n\n    # Return the list of beat durations\n    return beats\n\n\n# Example usage and testing the function\nif __name__ == \"__main__\":\n    print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n    # Output should be: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \n    :param string: Input string to check for distinct characters.\n    :return: Number of distinct characters in the input string, case insensitive.\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lower case to make the comparison case insensitive\n    string = string.lower()\n    \n    # Use a set to store distinct characters as sets inherently handle uniqueness\n    distinct_characters = set(string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)\n\n# Example calls for verification\nprint(count_distinct_characters('xyzXYZ'))  # Expected output: 3\nprint(count_distinct_characters('Jerry'))    # Expected output: 4"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two), select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    :param numbers: List of float numbers.\n    :return: Tuple containing the two closest numbers in order (smaller, larger).\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    # Sort the numbers to simplify the problem of finding closest elements\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize the smallest difference with a large value\n    smallest_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n\n    # Iterate through the sorted list and find the closest pair\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (sorted_numbers[i - 1], sorted_numbers[i])\n    \n    return closest_pair"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n# Mapping from number words to their corresponding digits\nnumber_word_to_digit = {\n    'zero': 0, 'one': 1, 'two': 2, 'three': 3, \n    'four': 4, 'five': 5, 'six': 6, 'seven': 7, \n    'eight': 8, 'nine': 9\n}\n\n# Mapping from digits to their corresponding number words\ndigit_to_number_word = {v: k for k, v in number_word_to_digit.items()}\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', \n    'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    try:\n        # Split the input string into individual number words\n        number_words = numbers.split()\n        \n        # Convert each number word to its corresponding digit\n        digits = [number_word_to_digit[word] for word in number_words]\n        \n        # Sort the digits\n        sorted_digits = sorted(digits)\n        \n        # Convert the sorted digits back to number words\n        sorted_number_words = [digit_to_number_word[digit] for digit in sorted_digits]\n        \n        # Join the sorted number words back into a single string\n        return ' '.join(sorted_number_words)\n    \n    except KeyError as e:\n        # Handle the case where an invalid number word is provided\n        raise ValueError(f\"Invalid number word provided: {e}\")\n\n    except Exception as e:\n        # Handle any other unforeseen errors\n        raise ValueError(f\"An error occurred: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    examples = [\n        \"three one five\",\n        \"eight zero seven six\",\n        \"four two four\",\n        \"nine two one\"\n    ]\n    for example in examples:\n        print(f\"Original: {example} -> Sorted: {sort_numbers(example)}\")"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any Python values only for integers.\n\n    :param values: List containing any Python values.\n    :return: List containing only integer values from the input list.\n    \n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    \n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # Initialize an empty list to store filtered integers\n    filtered_integers = []\n    \n    # Iterate over each value in the input list\n    for value in values:\n        # Check if the current value is an integer\n        if isinstance(value, int):\n            # Add the integer to the filtered integers list\n            filtered_integers.append(value)\n    \n    # Return the list containing only integers\n    return filtered_integers\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    # Example test case scenarios to validate the function\n    print(filter_integers(['a', 3.14, 5]))       # Output: [5]\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    :param numbers: List of integers to process.\n    :return: List of rolling maximum elements.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    \n    if not numbers:\n        return []  # Return an empty list if the input list is empty\n    \n    rolling_max_list = []  # List to store the rolling maximums\n    current_max = float('-inf')  # Initialize the current maximum to negative infinity\n    \n    for num in numbers:\n        # Update the current maximum\n        if num > current_max:\n            current_max = num\n        # Append the current maximum to the rolling maximum list\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n\n# Examples for testing\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]\nprint(rolling_max([5, 4, 3, 2, 1]))        # Output: [5, 5, 5, 5, 5]\nprint(rolling_max([1, 3, 1, 5, 1, 7]))     # Output: [1, 3, 3, 5, 5, 7]\nprint(rolling_max([]))                     # Output: []"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    :param numbers: List of floating-point numbers to be rescaled.\n    :return: List of rescaled floating-point numbers.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numbers\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        raise ValueError(\"All numbers in the list are the same; cannot rescale to the unit interval\")\n\n    range_val = max_val - min_val\n\n    return [(num - min_val) / range_val for num in numbers]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" \n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    :param string: The input string to flip its case.\n    :return: A new string with flipped case characters.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    \n    >>> flip_case('Python3.8')\n    'pYTHON3.8'\n    \n    >>> flip_case('')\n    ''\n    \"\"\"\n    \n    # Using a list comprehension to iterate through each character in the string.\n    # If the character is lowercase, convert to uppercase and vice-versa.\n    flipped_string = ''.join(\n        char.upper() if char.islower() else char.lower() for char in string\n    )\n    \n    return flipped_string\n\n# Example usage\nprint(flip_case(\"Hello\"))  # Output: 'hELLO'\nprint(flip_case(\"Python3.8\"))  # Output: 'pYTHON3.8'\nprint(flip_case(\"\"))  # Output: ''"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    :param numbers: List of integers.\n    :return: List of integers with duplicates removed.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    def count_occurrences(numbers: List[int]) -> dict:\n        \"\"\"\n        Count occurrences of each integer in the list.\n        \n        :param numbers: List of integers.\n        :return: Dictionary of integers and their counts.\n        \"\"\"\n        occurrences = {}\n        for number in numbers:\n            if number in occurrences:\n                occurrences[number] += 1\n            else:\n                occurrences[number] = 1\n        return occurrences\n    \n    occurrences = count_occurrences(numbers)  # Get the count of each number\n    result = [number for number in numbers if occurrences[number] == 1]  # Filter numbers appearing once\n    \n    return result\n\n\n# Performance considerations:\n# - This solution runs in two passes: one to count occurrences and one to filter the list.\n# - The space complexity is O(n) for the occurrences dictionary and result list.\n# - The solution is efficient for moderate-sized lists, but if scalability for very large lists is needed,\n#   consider more sophisticated data structures or multi-threading (if applicable).\n\n# Trade-offs:\n# - This approach ensures we preserve the original order of the elements.\n# - Simplicity and readability are prioritized over the absolute minimal time complexity.\n\n# Example usage and tests:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \n    :param n: The number to find the largest divisor for.\n    :return: The largest divisor of n that is smaller than n.\n    \n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(49)\n    7\n    >>> largest_divisor(100)\n    50\n    \"\"\"\n    \n    # Validate the input, n should be a positive integer greater than 1\n    if n <= 1:\n        raise ValueError(\"Input must be a positive integer greater than 1\")\n    \n    # Start from the largest possible divisor, which is n // 2\n    for i in range(n // 2, 0, -1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            return i\n\n    # Since n > 1, there will always be a valid divisor before reaching this line\n    raise RuntimeError(\"Unexpected logic error\")\n\n# Example usage and Performance consideration:\n# The function iterates from n//2 to 1 checking for divisors. In the worst-case scenario\n# for prime numbers, it's O(n/2) checks, which is linear in time complexity.\n# This is efficient and should be performant for moderately large values of n.\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    :param strings: A list of strings to be filtered.\n    :param prefix: The prefix string to filter the list by.\n    :return: A list of strings that start with the given prefix.\n\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    # Create a result list to hold strings starting with the given prefix\n    result = []\n\n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the current string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the result list\n            result.append(string)\n    \n    # Return the filtered list\n    return result"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" \n    Concatenate list of strings into a single string\n    \n    :param strings: List of strings to concatenate\n    :return: The concatenated single string\n    \n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    # Early return for empty list to avoid unnecessary operations\n    if not strings:\n        return ''\n    \n    # Using ''.join() for efficient string concatenation\n    return ''.join(strings)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(concatenate(['Hello', ' ', 'world', '!']))  # Output: \"Hello world!\""}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. \n    Count overlapping cases.\n    \n    :param string: The original string to search within.\n    :param substring: The substring to search for.\n    :return: The count of overlapping occurrences of the substring in the string.\n    \n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    \n    # Edge case: If the substring is empty, we should return 0\n    if not substring:\n        return 0\n\n    # Initialize counter and start position\n    count = 0\n    start = 0\n\n    # Loop through the string and search for the substring\n    while True:\n        # Find the substring in the string starting at the 'start' position\n        pos = string.find(substring, start)\n        \n        # If substring not found, break out of the loop\n        if pos == -1:\n            break\n        \n        # Found an occurrence, increment the counter\n        count += 1\n        \n        # Move start to the next position to allow overlapping cases\n        start = pos + 1\n    \n    return count\n\n# Let's test the function with the provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" \n    Return length of given string.\n    \n    This function calculates the length of the given string without using \n    any built-in functions to count the characters. This ensures that the \n    function demonstrates the logic required to count each character.\n\n    :param string: The input string whose length is to be calculated.\n    :return: The length of the input string.\n    \n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n\n    # Initialize a counter for the length\n    length = 0\n    \n    # Iterate through each character in the string and count\n    for _ in string:\n        length += 1\n        \n    return length"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" \n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed the number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    :param n: The integer to factorize.\n    :return: A list of prime factors of `n`.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    \n    def smallest_prime_factor(m: int) -> int:\n        \"\"\"\n        Find the smallest prime factor of a given number.\n\n        :param m: The number to factorize.\n        :return: The smallest prime factor of `m`.\n        \"\"\"\n        if m % 2 == 0:\n            return 2\n        for i in range(3, int(m**0.5) + 1, 2):\n            if m % i == 0:\n                return i\n        return m\n\n    factors = []\n    while n > 1:\n        # Find the smallest prime factor\n        prime_factor = smallest_prime_factor(n)\n        factors.append(prime_factor)\n        # Divide n by the prime factor\n        n //= prime_factor\n    \n    return factors"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    :param n: Upper limit (exclusive), integers less than this value are considered.\n    :return: Count of digit 7 appearances in integers divisible by 11 or 13.\n    \n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    \n    def is_divisible_by_11_or_13(num: int) -> bool:\n        \"\"\"\n        Check if the number is divisible by 11 or 13.\n        \n        :param num: Number to check.\n        :return: True if number is divisible by 11 or 13, otherwise False.\n        \"\"\"\n        return num % 11 == 0 or num % 13 == 0\n    \n    def count_digit_seven(num: int) -> int:\n        \"\"\"\n        Count the occurrences of digit '7' in the given number.\n        \n        :param num: Number to check.\n        :return: Count of digit '7' in the number.\n        \"\"\"\n        return str(num).count('7')\n    \n    # Initialize count of digit '7'\n    count_7 = 0\n    \n    # Iterate through all numbers less than n\n    for number in range(n):\n        if is_divisible_by_11_or_13(number):\n            count_7 += count_digit_seven(number)\n    \n    return count_7\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    \"\"\"\n    Return only positive numbers in the list.\n    \n    :param l: A list of integers.\n    :return: A list containing only the positive integers from the input list.\n    \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    # Using list comprehension for a concise and efficient solution\n    # This will produce a new list only with positive numbers\n    positive_numbers = [num for num in l if num > 0]\n    \n    return positive_numbers\n\n# Test cases to ensure the function works correctly\nprint(get_positive([-1, 2, -4, 5, 6]))  # Expected: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Expected: [5, 3, 2, 3, 9, 123, 1]\nprint(get_positive([-10, -20, -30]))  # Expected: []\nprint(get_positive([0, 0, 0]))  # Expected: []\nprint(get_positive([1, 2, 3, 4, 5]))  # Expected: [1, 2, 3, 4, 5]"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \n    :param l: List of integers.\n    :return: List with sorted even indices.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract values at even indices\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even index values\n    even_indices_values.sort()\n    \n    # Create a new list to store result\n    sorted_l = list(l)  # Start with the original list copy for structure consistency\n    \n    # Replace the even index values with sorted values\n    for i, value in zip(range(0, len(sorted_l), 2), even_indices_values):\n        sorted_l[i] = value\n\n    # Return the sorted list with only even indices values changed\n    return sorted_l\n\n# Performance consideration:\n# 1. Extracting the even indices is O(n/2) which simplifies to O(n).\n# 2. Sorting the even indices is O((n/2)log(n/2)), which also simplifies to O(n log n).\n# 3. Reassigning the sorted values is O(n/2), which simplifies to O(n).\n# Overall, this approach is O(n log n), making it efficient and scalable.\n\n# Examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\n    Return maximum element in the list.\n    \n    :param l: List of elements\n    :return: Maximum element in the list\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Ensure the list is not empty to avoid ValueError\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    # Initialize the maximum element as the first element in the list\n    max_el = l[0]\n    \n    # Traverse through all elements to find the maximum\n    for element in l:\n        if element > max_el:\n            max_el = element\n    \n    return max_el"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list.\n    \n    :param l: List of elements, which may contain duplicates.\n    :return: A list of sorted unique elements.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    \n    # Convert the list to a set to remove duplicates\n    unique_elements = set(l)\n    \n    # Convert the set back to a sorted list\n    sorted_unique_elements = sorted(unique_elements)\n    \n    return sorted_unique_elements\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Return true if a given number is prime, and false otherwise.\n    \n    :param n: Integer to check for primality.\n    :return: True if the number is prime, False otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \n    # Handle edge cases for numbers less than 2\n    if n <= 1:\n        return False\n    \n    # Handle edge cases for 2 and 3 directly as they are prime\n    if n <= 3:\n        return True\n    \n    # Eliminate even numbers and multiples of 3 early on\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    # Check potential factors from 5 to sqrt(n) using the 6k \u00b1 1 optimization\n    factor = 5\n    while factor * factor <= n:\n        if n % factor == 0 or n % (factor + 2) == 0:\n            return False\n        factor += 6\n    \n    return True\n\n# Architectural Decisions and Trade-offs:\n# - The function uses the 6k \u00b1 1 optimization to reduce the number of checks for potential factors,\n#   which is faster than checking every number up to the square root of n.\n# - The edge cases for numbers less than or equal to 1, and for 2 and 3, are handled explicitly.\n# - The function is designed for scalability by optimizing the primality test beyond trivial checks.\n# - The code is kept clean and maintainable through the use of comments and meaningful variable names.\n# - Error handling wouldn't typically be necessary unless the function specifications change to accept\n#   non-integer types, in which case, additional data type checks would be required."}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str) -> str:\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \n    :param s: Input string to encode.\n    :return: Encoded string where every group of three characters is cyclically shifted left.\n    \"\"\"\n    # Split string into groups of 3 characters each\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Cycle elements in each group if the group has exactly 3 characters\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    # Join the groups back into a single string\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \n    :param s: Encoded string to decode.\n    :return: Decoded string where every group of three characters is cyclically shifted right.\n    \"\"\"\n    # Split string into groups of 3 characters each\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Un-cycle elements in each group if the group has exactly 3 characters\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    # Join the groups back into a single string\n    return \"\".join(groups)\n\n\n# Example usage:\nencoded = encode_cyclic(\"abcdefghi\")\nprint(f\"Encoded: {encoded}\")  # Output should be \"bcaefdhgi\"\n\ndecoded = decode_cyclic(encoded)\nprint(f\"Decoded: {decoded}\")  # Output should be \"abcdefghi\""}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Use a set to keep track of the elements we have seen so far\n    seen_elements = set()\n\n    # Iterate over each element in the list\n    for number in l:\n        # Check if the negative counterpart of the element exists in the seen set\n        if -number in seen_elements:\n            # If so, return True as we found two distinct elements that sum to zero\n            return True\n        # Add the current element to the set\n        seen_elements.add(number)\n\n    # If we finish the loop without finding any such pair, return False\n    return False"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    \n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is prime.\n        \n        :param num: The number to check.\n        :return: True if the number is prime, False otherwise.\n        \"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def generate_fibonacci():\n        \"\"\"\n        Generator function to yield Fibonacci numbers.\n        \"\"\"\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    # Initialize the generator for Fibonacci numbers\n    fib_gen = generate_fibonacci()\n    prime_fib_list = []\n    \n    while len(prime_fib_list) < n:\n        # Get the next Fibonacci number\n        fib_num = next(fib_gen)\n        \n        # Check if the Fibonacci number is prime\n        if is_prime(fib_num):\n            prime_fib_list.append(fib_num)\n    \n    # Return the n-th prime Fibonacci number\n    return prime_fib_list[-1]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"\n    Given the length of a side (base) and height, return the area of a triangle.\n    \n    The formula for the area of a triangle is:\n    Area = 0.5 * base * height\n    \n    :param a: The length of the base of the triangle.\n    :param h: The height of the triangle.\n    :return: The area of the triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    >>> triangle_area(10, 6)\n    30.0\n    >>> triangle_area(0, 10)\n    0.0\n    >>> triangle_area(5, -3)\n    'Height must be a non-negative number'\n    >>> triangle_area(-5, 3)\n    'Base must be a non-negative number'\n    \"\"\"\n    \n    if a < 0:\n        return 'Base must be a non-negative number'\n    if h < 0:\n        return 'Height must be a non-negative number'\n\n    # Using the area formula for triangles\n    area = 0.5 * a * h\n    \n    return area"}
{"task_id": "HumanEval/33", "completion": "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \n    :param l: Input list of integers.\n    :return: List with elements at indices divisible by three sorted but rest unchanged.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract elements at indices divisible by three\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n    # Sort these elements\n    div_by_three.sort()\n\n    # Initialize the result list with the original list\n    sorted_list = l.copy()\n\n    # Place sorted elements back to their respective positions in the result list\n    div_by_three_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            sorted_list[i] = div_by_three[div_by_three_index]\n            div_by_three_index += 1\n\n    return sorted_list\n\n# If running as a script, execute the following tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y\n    \n    :param x: First integer to add.\n    :param y: Second integer to add.\n    :return: Sum of the two integers.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n\n    # Adding the two integers and returning the result\n    return x + y\n\n# Examples to illustrate usage\nprint(add(2, 3))  # Expected Output: 5\nprint(add(5, 7))  # Expected Output: 12"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return list with elements incremented by 1.\n    \n    :param l: List of integers to be incremented.\n    :return: New list with each element incremented by 1.\n    \n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    \n    # Using list comprehension to create a new list with incremented values.\n    # This is efficient both in terms of readability and performance.\n    return [x + 1 for x in l]\n\n# Optional: Performance benchmark\nif __name__ == \"__main__\":\n    import timeit\n    example_list = [i for i in range(1000000)]\n    print(\"Benchmarking incrementing a list of 1,000,000 integers:\")\n    print(timeit.timeit(\"incr_list(example_list)\", globals=globals(), number=10))  # executing 10 times"}
{"task_id": "HumanEval/32", "completion": "import math\nimport scipy.optimize as opt\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates a polynomial with coefficients xs at point x.\n    \n    :param xs: List of polynomial coefficients [a0, a1, ..., an] for the terms a0 + a1*x + a2*x^2 + ... + an*x^n.\n    :param x: The value at which the polynomial is to be evaluated.\n    :return: The result of the polynomial evaluation.\n    \"\"\"\n    return sum(coeff * math.pow(x, i) for i, coeff in enumerate(xs))\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a zero of the polynomial with given coefficients xs.\n    \n    :param xs: List of polynomial coefficients [a0, a1, ..., an] for the terms a0 + a1*x + a2*x^2 + ... + an*x^n.\n               The list must have an even number of coefficients and the largest non-zero coefficient.\n    :return: A zero of the polynomial.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of terms\")\n\n    def poly_function(x):\n        return poly(xs, x)\n\n    # Use root-finding algorithms, such as those in scipy.optimize\n    zero = opt.brentq(poly_function, -1e7, 1e7, xtol=1e-10)\n    \n    return zero\n    \n# Example usages and test cases demonstrating the proper use of the functions.\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Expected output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Expected output: 1.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \n    A palindrome is a string that reads the same forwards and backwards.\n\n    :param text: The string to check\n    :return: True if the string is a palindrome, False otherwise\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n\n    # Edge case: An empty string is considered a palindrome\n    if len(text) == 0:\n        return True\n    \n    # Initialize pointers for the start and end of the string\n    left_index = 0\n    right_index = len(text) - 1\n\n    # Loop until the pointers meet in the middle\n    while left_index < right_index:\n\n        # Check if the characters at the pointers are equal\n        if text[left_index] != text[right_index]:\n            return False\n        \n        # Move the pointers closer to the middle\n        left_index += 1\n        right_index -= 1\n\n    # If all characters matched, it is a palindrome\n    return True\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Ensure the list has at least 3 elements, otherwise return False\n    if len(l) < 3:\n        return False\n\n    # Sort the list for easier management of the two-pointer approach\n    l.sort()\n\n    # Iterate through the list, considering each element as a potential first element of the triplet\n    for i in range(len(l) - 2):\n        # Avoid duplicate results by skipping the same element\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n\n        # Two pointers approach: left starts after 'i', right starts at the end of the list\n        left, right = i + 1, len(l) - 1\n\n        while left < right:\n            # Calculate the current sum of the triplet\n            current_sum = l[i] + l[left] + l[right]\n\n            # Check if the current sum is zero\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                # If sum is less than zero, move the left pointer to the right\n                left += 1\n            else:\n                # If sum is greater than zero, move the right pointer to the left\n                right -= 1\n\n    # If no triplet found that sums to zero, return False\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n\n    :param n: Number of cars moving in each direction.\n    :return: Number of collisions.\n    \"\"\"\n\n    # Each car moving left to right will collide with each car moving right to left.\n    # Thus, the total number of collisions is simply the product of the number\n    # of cars in each direction.\n\n    # Number of cars in each direction is `n`\n    # Total collisions are n * n\n    return n * n\n\n# Example usage:\n# Number of left-to-right cars and right-to-left cars are both 3.\n# Therefore, the number of collisions will be 3 * 3 = 9.\nprint(car_race_collision(3))\n# Output: 9"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    \n    :param n: Index of the Fib4 sequence (0-based).\n    :return: The n-th Fib4 number.\n\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    \n    # Handling base cases first\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    \n    # Maintaining the last four values in the sequence to avoid recomputation\n    sequence = [0, 0, 2, 0]\n    \n    for i in range(4, n + 1):\n        next_value = sequence[-1] + sequence[-2] + sequence[-3] + sequence[-4]\n        sequence.append(next_value)\n        # We only need to keep the last four values, so we remove the oldest one\n        sequence.pop(0)\n    \n    return sequence[-1]\n\n# Example usages\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    \n    :param n: Exponent where 2 is raised to.\n    :param p: The modulus.\n    :return: Result of (2^n) % p.\n    \n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if p <= 0:\n        raise ValueError(\"Modulus must be greater than zero\")\n    \n    # Using Python's built-in pow function with three arguments for optimal performance\n    return pow(2, n, p)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    \n    # Initialize a counter to keep track of unmatched opening brackets\n    open_count = 0\n\n    # Iterate through each character in the string\n    for char in brackets:\n        if char == \"<\":\n            # Increment the counter for each opening bracket we encounter\n            open_count += 1\n        elif char == \">\":\n            # Decrement the counter for each closing bracket we encounter\n            open_count -= 1\n            \n            # If the counter goes negative, it means there's a closing bracket without a matching opening bracket\n            if open_count < 0:\n                return False\n\n    # If open_count is zero, all brackets are matched properly; otherwise, there are unmatched opening brackets\n    return open_count == 0\n\n# Testing the function with the given examples\nassert correct_bracketing(\"<\") == False\nassert correct_bracketing(\"<>\") == True\nassert correct_bracketing(\"<<><>>\") == True\nassert correct_bracketing(\"><<>\") == False\n    "}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to a given base.\n    Returns the string representation after the conversion.\n    The new base must be less than 10.\n    \n    :param x: The input integer to be converted.\n    :param base: The target base for conversion.\n    :return: String representation of the number in the new base.\n    :raises ValueError: If the base is not within the valid range [2, 9].\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    \n    # Validate the base\n    if not (2 <= base <= 9):\n        raise ValueError(\"Base must be between 2 and 9, inclusive\")\n    \n    # Special case for zero\n    if x == 0:\n        return '0'\n    \n    # Initialize variables for conversion\n    digits = []\n    current_number = x\n    \n    # Perform the conversion by repeatedly dividing the number by the base\n    while current_number > 0:\n        remainder = current_number % base\n        digits.append(str(remainder))\n        current_number //= base\n        \n    # Digits are generated in reverse order, so reverse them to get the correct representation\n    digits.reverse()\n    \n    # Join the digits to form the final base-converted number string\n    return ''.join(digits)\n\n# Testing the function with the provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    \n    :param text: The input string from which vowels will be removed.\n    :return: A new string with all vowels removed.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set('aeiouAEIOU')\n    \n    # Use a list comprehension to filter out vowels and join to form the resultant string\n    return ''.join([char for char in text if char not in vowels])\n\n# The function efficiently uses a set to filter vowels, ensuring O(1) average time complexity for lookups.\n# Performance benchmarks:\n# - The list comprehension ensures that the function is linear in terms of time complexity, O(n), where n is the length of the input string.\n# - This approach is optimal for both time and space since it only involves a single scan through the input string and minimal additional memory usage."}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \n    :param l: List of integers.\n    :return: Boolean indicating if the list is monotonically increasing or decreasing.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        # Empty list is considered monotonic\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, l.size()):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    :param n: The upper limit of the summation.\n    :return: The sum from 1 to n.\n    \n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    \n    # Ensure n is a positive integer\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Calculate the sum using the formula for the sum of the first n natural numbers\n    total_sum = n * (n + 1) / 2\n    \n    # Return the total_sum as an integer\n    return int(total_sum)"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \n    :param l1: First list of elements.\n    :param l2: Second list of elements.\n    :return: A sorted list of unique elements that are common in both lists.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to eliminate duplicates and allow for efficient intersection\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the sets to get the common unique elements\n    common_elements = set1.intersection(set2)\n    \n    # Return sorted list of the common elements\n    return sorted(common_elements)"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n\n    :param s0: First string to compare.\n    :param s1: Second string to compare.\n    :return: True if both strings have the same characters, False otherwise.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Use set to capture unique characters in each string\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Compare the sets to determine if they have the same characters\n    return set_s0 == set_s1\n\n# Test the function with provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n    \n    :param l: List of integers to check.\n    :param t: Threshold integer.\n    :return: True if all integers in l are below t, False otherwise.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # Iterate over all elements in the list to check if any are above or equal to threshold\n    for number in l:\n        if number >= t:\n            # Return False immediately if any number exceeds or equals the threshold\n            return False\n    # If all numbers are below the threshold, return True\n    return True\n\n# Example usage with doctests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/47", "completion": "from typing import List, Union\n\ndef median(l: List[Union[int, float]]) -> Union[int, float]:\n    \"\"\"\n    Return the median of elements in the list l.\n    \n    :param l: List of numeric elements (integers or floats).\n    :return: The median value of the list.\n    \n    The median is the middle value in an ordered list of numbers. If the list has an even number\n    of elements, the median is the average of the two middle elements.\n    \n    Example:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"The input list cannot be empty\")\n    \n    # Sort the list to find the median\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Check if the number of elements in the list is odd or even\n    if n % 2 == 1:\n        # If odd, return the middle element\n        median_value = sorted_list[n // 2]\n    else:\n        # If even, return the average of the two middle elements\n        mid1, mid2 = sorted_list[(n // 2) - 1], sorted_list[n // 2]\n        median_value = (mid1 + mid2) / 2\n    \n    return median_value\n\n# Sample usage with given examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Determine if every opening bracket has a corresponding closing bracket.\n\n    :param brackets: A string of \"(\" and \")\".\n    :return: True if every opening bracket has a corresponding closing bracket, False otherwise.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # A counter to track the balance of opened and closed brackets\n    balance = 0\n\n    for char in brackets:\n        # Increment balance for opening bracket\n        if char == \"(\":\n            balance += 1\n        # Decrement balance for closing bracket\n        elif char == \")\":\n            balance -= 1\n\n        # If balance goes negative, there's a closing bracket without a corresponding opening one\n        if balance < 0:\n            return False\n\n    # Check if all opened brackets are closed\n    return balance == 0"}
{"task_id": "HumanEval/55", "completion": "\"\"\"\nComplete the function using its signature and docstring below:\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\nFollow these guidelines:\n- Use clean, maintainable, and well-documented code.\n- Use meaningful names and comments.\n- Optimize for performance (time and space).\n- Consider scalability and maintainability.\n- Document architectural decisions and trade-offs.\n- Break down larger problems into smaller, manageable functions.\n- Design functions that can be reused across different parts of the project.\n- Implement error handling to make the function robust.\n- Where applicable, document performance benchmarks to illustrate the trade-offs made.\n\nHere are some examples to help you understand how to approach the task:\n\"\"\"\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    :param n: Position in the Fibonacci sequence (1-based).\n    :return: The n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    # Handle edge cases\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    # Initialize the first two Fibonacci numbers\n    prev, curr = 1, 1\n    \n    # Calculate the Fibonacci numbers iteratively up to the n-th number\n    for _ in range(2, n):\n        prev, curr = curr, prev + curr\n        \n    return curr\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    \n    This function efficiently computes the n-th element of the FibFib number sequence.\n    \n    :param n: The index of the FibFib sequence.\n    :return: The n-th FibFib number.\n    \n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    \n    # Base cases:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize the first three values\n    a, b, c = 0, 0, 1\n    \n    # Compute the n-th FibFib number iteratively for better performance\n    for i in range(3, n + 1):\n        next_fibfib = a + b + c\n        # Update the last three values\n        a, b, c = b, c, next_fibfib\n    \n    return c"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Encode the input string by shifting each character by 5 positions in the alphabet.\n\n    :param s: Input string to encode.\n    :return: Encoded string with each character shifted by 5 positions.\n    \"\"\"\n    def shift_char(ch: str) -> str:\n        \"\"\"\n        Shift a character by 5 positions in the alphabet, wrapping around if necessary.\n\n        :param ch: Input character.\n        :return: Character shifted by 5 positions.\n        \"\"\"\n        if 'a' <= ch <= 'z':\n            return chr(((ord(ch) - ord('a') + 5) % 26) + ord('a'))\n        # If input string can contain uppercase letters or any other characters,\n        # Additional handling needs to be considered here.\n        # For now, it is presumed input is lowercase letters only.\n        return ch\n\n    # Apply shift to each character in the string\n    return \"\".join(shift_char(ch) for ch in s)\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Decode a string that was encoded with the encode_shift function by shifting each character back by 5 positions.\n\n    :param s: Encoded string.\n    :return: Decoded string with each character shifted back by 5 positions.\n    \"\"\"\n    def unshift_char(ch: str) -> str:\n        \"\"\"\n        Shift a character back by 5 positions in the alphabet, wrapping around if necessary.\n\n        :param ch: Input character.\n        :return: Character shifted back by 5 positions.\n        \"\"\"\n        if 'a' <= ch <= 'z':\n            return chr(((ord(ch) - ord('a') - 5) % 26) + ord('a'))\n        # If input string can contain uppercase letters or any other characters,\n        # Additional handling needs to be considered here.\n        # For now, it is presumed input is lowercase letters only.\n        return ch\n\n    # Apply unshift to each character in the string\n    return \"\".join(unshift_char(ch) for ch in s)\n\n\n# Example usage\nencoded = encode_shift(\"hello\")\nprint(f\"Encoded: {encoded}\")   # Output: \"mjqqt\"\ndecoded = decode_shift(encoded)\nprint(f\"Decoded: {decoded}\")   # Output: \"hello\""}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    if not lst:\n        return []\n    \n    # Sort the list to have a sorted reference to work with\n    sorted_lst = sorted(lst)\n    \n    # Initialize result list\n    strange_sorted_lst = []\n    \n    # Use two pointers to alternatively pick minimum and maximum\n    # elements from the sorted list\n    i, j = 0, len(sorted_lst) - 1\n    toggle = True  # Start with picking the minimum\n    \n    while i <= j:\n        if toggle:\n            strange_sorted_lst.append(sorted_lst[i])\n            i += 1\n        else:\n            strange_sorted_lst.append(sorted_lst[j])\n            j -= 1\n        toggle = not toggle  # Switch between minimum and maximum\n    \n    return strange_sorted_lst"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    :param n: A composite integer greater than 1.\n    :return: The largest prime factor of n.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n    def is_prime(x: int) -> bool:\n        \"\"\"\n        Check if a number is a prime.\n        \n        :param x: Integer to check for primality.\n        :return: True if x is a prime number, otherwise False.\n        \"\"\"\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    largest_factor = 1\n    current_factor = 2\n    \n    # Start factorizing from the lowest prime\n    while current_factor * current_factor <= n:\n        if n % current_factor == 0:\n            # Update largest_factor and reduce n\n            largest_factor = current_factor\n            n = n // current_factor\n        else:\n            # Move to the next potential factor\n            current_factor += 1\n    \n    # If there is any prime factor larger than sqrt(n), it must be n itself now\n    if n > 1:\n        largest_factor = n\n    \n    return largest_factor\n\n# Performance Benchmarks:\n\"\"\"\nThe algorithm operates by progressively dividing the input number `n` by its smallest factors.\n- The worst-case time complexity is approximately O(sqrt(n)) because we are iterating up to the square root of `n`.\n- The space complexity is O(1), as we use a constant amount of additional space regardless of the input size.\nIn terms of scalability, the function will efficiently handle reasonably large inputs due to the use of trial division up to sqrt(n).\n\"\"\"\n\n# Tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"\n    Circular shift the digits of the integer x, shifting the digits right by `shift`\n    places and return the result as a string. If `shift` is greater than the number\n    of digits in x, return digits reversed.\n    \n    :param x: The integer whose digits are to be shifted.\n    :param shift: The number of positions to shift the digits.\n    :return: The resulting string after the shift.\n    \n    Examples:\n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 6)\n    '54321'\n    >>> circular_shift(12345, 3)\n    '34512'\n    \"\"\"\n    # Convert the integer to a string to work with its digits\n    digits = str(x)\n    \n    # Length of the digits in the integer\n    n = len(digits)\n    \n    # Check if shift is greater than the number of digits\n    if shift > n:\n        # If shift is greater, return the digits reversed\n        return digits[::-1]\n    \n    # Perform the circular shift by slicing the string\n    shifted_digits = digits[-shift:] + digits[:-shift]\n    \n    # Return the result\n    return shifted_digits\n\n# Example usage:\n# circular_shift(12, 1) should return '21'\nprint(circular_shift(12, 1))\n\n# circular_shift(12, 2) should return '12'\nprint(circular_shift(12, 2))\n\n# circular_shift(12345, 6) should return '54321'\nprint(circular_shift(12345, 6))\n\n# circular_shift(12345, 3) should return '34512'\nprint(circular_shift(12345, 3))"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \n    :param xs: List of coefficients of the polynomial.\n    :return: List of coefficients of the derivative of the polynomial.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Initialize an empty list to store the coefficients of the derivative.\n    derivative_coeffs = []\n\n    # We iterate over the coefficients starting from the second one.\n    # This is because the first coefficient (constant term) disappears in the derivative.\n    for i in range(1, len(xs)):\n        # The derivative of a*x^i is i * a.\n        derivative_coeffs.append(i * xs[i])\n\n    return derivative_coeffs\n\n# Example usage and test cases\nif __name__ == \"__main__\":\n    print(derivative([3, 1, 2, 4, 5]))  # Output should be [1, 4, 12, 20]\n    print(derivative([1, 2, 3]))        # Output should be [2, 6]\n    print(derivative([0]))              # Output should be [] (derivative of a constant zero polynomial)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s: str) -> int:\n    \"\"\"\n    Task:\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    :param s: Input string consisting of characters.\n    :return: Sum of ASCII values of upper characters in the string.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # Initialize the sum to 0\n    upper_ascii_sum = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an uppercase letter\n        if char.isupper():\n            # Add the ASCII value of the uppercase character to the sum\n            upper_ascii_sum += ord(char)\n    \n    return upper_ascii_sum"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is balanced (palindromic)\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    # Get the sum of the elements in the list\n    total_weight = sum(q)\n\n    # Check if the list is balanced and the total weight is within the allowed limit\n    return is_balanced(q) and total_weight <= w\n\n# Example usage\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    def is_palindromic(arr):\n        \"\"\"\n        Helper function to check if the array is palindromic.\n        :param arr: List of integers to check.\n        :return: Boolean indicating if the array is palindromic.\n        \"\"\"\n        return arr == arr[::-1]\n    \n    def changes_to_palindrome(arr):\n        \"\"\"\n        Compute the minimum number of changes needed for the array to become palindromic.\n        :param arr: List of integers.\n        :return: Minimum number of changes needed.\n        \"\"\"\n        n = len(arr)\n        changes = 0\n        for i in range(n // 2):\n            if arr[i] != arr[n - i - 1]:\n                changes += 1\n        return changes\n    \n    # Simply compute the minimum number of changes needed\n    return changes_to_palindrome(arr)\n\n# Example usages:\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket, return the number of the mango fruits in the basket.\n    \n    Example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \n    :param s: String representing the number of apples and oranges in the format \"<apples> apples and <oranges> oranges\".\n    :param n: Total number of fruits in the basket.\n    :return: Number of mango fruits in the basket.\n    \"\"\"\n    \n    def extract_numbers(fruit_string: str) -> tuple:\n        \"\"\"\n        Extract the number of apples and oranges from the fruit string.\n        \n        :param fruit_string: A string representing the number of apples and oranges.\n        :return: A tuple containing the number of apples and oranges.\n        \"\"\"\n        words = fruit_string.split()\n        # We expect format \"<apples> apples and <oranges> oranges\"\n        number_of_apples = int(words[0])\n        number_of_oranges = int(words[3])\n        return number_of_apples, number_of_oranges\n    \n    # Extract the number of apples and oranges\n    apples, oranges = extract_numbers(s)\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Example usage and test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    \n    # Error handling for invalid inputs\n    if x <= 0 or n <= 0:\n        raise ValueError(\"Both x and n must be positive integers\")\n    \n    if x == 1:\n        # 1 is always n^0 for any n, so it is a simple power of n\n        return True\n    \n    # Start checking from exponent 1 upwards\n    exponent = 1\n    power = n**exponent\n    \n    while power <= x:\n        # If we find that n^exponent equals x, return True\n        if power == x:\n            return True\n        exponent += 1\n        power = n ** exponent\n    \n    # If no power of n equals x, return False\n    return False\n\n# Example usage\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less than 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Check if a number is prime.\n        \n        :param n: Integer to check.\n        :return: True if n is a prime number, else False.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # List of prime numbers less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    # Check combinations of three primes that multiply to `a`\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    return False\n\n# Example usage for testing\nprint(is_multiply_prime(30))  # Expected output: True"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exists, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    from collections import Counter\n\n    # Count the frequency of each number in the list\n    freq_counter = Counter(lst)\n    \n    # Filter and sort available candidates by their values (descending order)\n    candidates = [num for num, freq in freq_counter.items() if freq >= num]\n    candidates.sort(reverse=True)\n    \n    # Return the greatest candidate or -1 if there are none\n    return candidates[0] if candidates else -1"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"\n    Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = s.lower()  # Convert the string to lowercase for case insensitivity\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count\n\n# Adding test cases\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"abcde\", 2),\n        (\"ACEDY\", 3),\n        (\"BCHLMNTY\", 1),   # 'y' at end considered as vowel\n        (\"AeiouYy\", 6),    # 'y' not at end, one 'y' at end to be considered\n        (\"Cwm\", 0),        # no vowels, even 'y' not at end\n        (\"\", 0),           # empty string\n        (\"yyy\", 1),        # multiple 'y's at end\n        (\"Y\", 1),          # single 'y'\n        (\"xyz\", 1),        # 'y' not at end, 'x' and 'z' are consonants\n        (\"This is a test of vowels count function.\", 11),  # sentence test\n    ]\n\n    for i, (input_string, expected) in enumerate(test_cases):\n        result = vowels_count(input_string)\n        assert result == expected, f\"Test case {i+1} failed: {input_string}, got {result}, expected {expected}\"\n    \n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    def total_chars(lst):\n        \"\"\"Helper function to calculate total number of characters in all strings of a list.\"\"\"\n        return sum(len(s) for s in lst)\n    \n    # Calculate the total number of characters for both lists\n    total_chars_lst1 = total_chars(lst1)\n    total_chars_lst2 = total_chars(lst2)\n    \n    # Compare the total character counts and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n\n# Examples\nassert total_match([], []) == []\nassert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\nassert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\nassert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\nassert total_match(['4'], ['1', '2', '3', '4', '5']) == ['4']"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    # Edge cases: Check if the input is an integer and is non-negative\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # Convert the decimal input to binary string\n    binary_string = bin(decimal)[2:]  # bin() returns a string starting with '0b', so skip the first two characters\n\n    # Format the result with 'db' at the beginning and the end\n    formatted_result = f\"db{binary_string}db\"\n\n    return formatted_result\n\n# Example usage\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    # Calculate the approximate cubic root of the given number\n    cube_root = round(a ** (1/3))\n\n    # Check if the cube of the calculated root equals the original number\n    if cube_root ** 3 == a or (-cube_root) ** 3 == a:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(iscube(1))     # True\nprint(iscube(2))     # False\nprint(iscube(-1))    # True\nprint(iscube(64))    # True\nprint(iscube(0))     # True\nprint(iscube(180))   # False"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \n    :param s: Input string.\n    :return: True if the string is happy, False otherwise.\n    \"\"\"\n    \n    # Check if the string length is at least 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check each group of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Check if the three consecutive characters are distinct\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        bool: True if the length of the string is a prime number, False otherwise.\n\n    Examples:\n        prime_length('Hello') == True\n        prime_length('abcdcba') == True\n        prime_length('kittens') == True\n        prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(n: int) -> bool:\n        \"\"\"Check if a given number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    # Get the length of the string\n    length = len(string)\n\n    # Check if the length is a prime number using the helper function\n    return is_prime(length)\n\n# Example usage\nprint(prime_length('Hello'))     # True\nprint(prime_length('abcdcba'))   # True\nprint(prime_length('kittens'))   # True\nprint(prime_length('orange'))    # False"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    :param lst: List of integers.\n    :return: Sum of the even elements at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    # Initialize the sum to 0.\n    even_sum = 0\n    \n    # Iterate through the list, considering only odd indices.\n    for i in range(1, len(lst), 2):\n        # Check if the element at the current odd index is even.\n        if lst[i] % 2 == 0:\n            # Add the element to the sum.\n            even_sum += lst[i]\n    \n    return even_sum"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    def is_valid_triangle(a, b, c):\n        \"\"\"\n        Check if the sides form a valid triangle.\n        \n        :param a: Length of the first side.\n        :param b: Length of the second side.\n        :param c: Length of the third side.\n        :return: True if the sides form a valid triangle, False otherwise.\n        \"\"\"\n        return a + b > c and a + c > b and b + c > a\n    \n    def herons_formula(a, b, c):\n        \"\"\"\n        Calculate the area of a triangle using Heron's formula.\n        \n        :param a: Length of the first side.\n        :param b: Length of the second side.\n        :param c: Length of the third side.\n        :return: Area of the triangle.\n        \"\"\"\n        s = (a + b + c) / 2  # Semi-perimeter\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n    \n    # Check for valid triangle\n    if not is_valid_triangle(a, b, c):\n        return -1\n    \n    # Calculate area\n    area = herons_formula(a, b, c)\n    \n    # Return area rounded to 2 decimal places\n    return round(area, 2)\n\n# Examples to use for testing\nprint(triangle_area(3, 4, 5)) # Expected: 6.00\nprint(triangle_area(1, 2, 10)) # Expected: -1"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Set of hexadecimal prime digits represented as strings\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Counter for prime hexadecimal digits\n    prime_count = 0\n    \n    # Iterate through each character in the input string\n    for digit in num:\n        # If the character is in the set of prime hex digits, increment the counter\n        if digit in prime_hex_digits:\n            prime_count += 1\n    \n    # Return the total count of prime hexadecimal digits\n    return prime_count\n\n# Example usage:\n# print(hex_key(\"AB\"))          # Output: 1\n# print(hex_key(\"1077E\"))       # Output: 2\n# print(hex_key(\"ABED1A33\"))    # Output: 4\n# print(hex_key(\"123456789ABCDEF0\"))  # Output: 6\n# print(hex_key(\"2020\"))        # Output: 2"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2-dimensional data, as nested lists,\n    which is similar to a matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return a list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    # Initialize an empty list to collect coordinates of x\n    result = []\n    \n    # Iterate through each row and column to find occurrences of x\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    \n    # Sort by row index (ascending) and within each row by column index (descending)\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result\n\n# Examples\nprint(get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def sum_of_digits(number):\n        \"\"\"\n        Compute the sum of the digits of a given integer.\n        \n        :param number: Integer whose digits will be summed.\n        :return: Sum of the digits of the integer.\n        \"\"\"\n        return sum(int(digit) for digit in str(number))\n    \n    def decimal_to_binary(number):\n        \"\"\"\n        Convert a decimal number to its binary representation as a string.\n        \n        :param number: Decimal integer.\n        :return: Binary string representation of the integer.\n        \"\"\"\n        return bin(number)[2:]\n    \n    # Summing the digits of N\n    digit_sum = sum_of_digits(N)\n    \n    # Converting the summed digits to binary\n    binary_result = decimal_to_binary(digit_sum)\n    \n    return binary_result\n\n# Sample usage:\n# print(solve(1000))  # Should output \"1\"\n# print(solve(150))   # Should output \"110\"\n# print(solve(147))   # Should output \"1100\""}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n\n    # Mapping the GPA intervals to corresponding letter grades\n    gpa_to_letter = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n    ]\n\n    results = []\n\n    for gpa in grades:\n        for threshold, letter in gpa_to_letter:\n            if gpa >= threshold:\n                results.append(letter)\n                break\n        else:\n            # This covers the case where GPA is exactly 0.0 and should be an 'E'\n            results.append('E')\n\n    return results\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ].\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    # Initialize variables to store the smallest even value and its index\n    smallest_even_value = float('inf')\n    smallest_index = -1\n\n    # Iterate through the array\n    for index, value in enumerate(arr):\n        # Check if the current value is even\n        if value % 2 == 0:\n            # If it's the smallest even value found so far, update the smallest_even_value and smallest_index\n            if value < smallest_even_value:\n                smallest_even_value = value\n                smallest_index = index\n\n    # If no even value was found, return an empty list\n    if smallest_index == -1:\n        return []\n\n    # Return the smallest even value and its index in the format specified\n    return [smallest_even_value, smallest_index]\n\n# Example usage\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))  # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Check the edge cases\n    if not array:  # if array is empty\n        return []\n    elif len(array) == 1:  # if array has only one element\n        return array.copy()\n    \n    # Calculate the sum of the first and last elements\n    first_last_sum = array[0] + array[-1]\n    \n    # Determine the sorting order based on the sum\n    # If the sum is even, sort in descending order, otherwise sort in ascending order\n    if first_last_sum % 2 == 0:\n        sorted_array = sorted(array, reverse=True)\n    else:\n        sorted_array = sorted(array)\n    \n    return sorted_array"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n    :param n: Number of digits.\n    :return: Count of n-digit positive integers starting or ending with 1.\n    \"\"\"\n    \n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # For 1-digit numbers, only the number 1 qualifies.\n    if n == 1:\n        return 1\n    \n    # The total count of n-digit numbers starting with 1:\n    start_with_1 = 9 * 10**(n - 2)\n    \n    # The total count of n-digit numbers ending with 1:\n    end_with_1 = 10**(n - 1)\n    \n    # Remove the overlap where the number starts and ends with 1.\n    overlap = 10**(n - 2) if n > 1 else 1\n    \n    # Total distinct count is the sum of both, minus the overlap.\n    total_count = start_with_1 + end_with_1 - overlap\n    \n    return total_count"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters are arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    \n    # Function to sort characters in a word\n    def sort_characters_in_word(word: str) -> str:\n        return ''.join(sorted(word))\n    \n    # Split the input string into words using spaces\n    words = s.split(' ')\n    \n    # Process each word individually\n    sorted_words = [sort_characters_in_word(word) for word in words]\n    \n    # Join the sorted words back together with spaces\n    sorted_sentence = ' '.join(sorted_words)\n    \n    # Return the result\n    return sorted_sentence\n\n# Examples for testing:\nprint(anti_shuffle('Hi'))             # Expected output: 'Hi'\nprint(anti_shuffle('hello'))          # Expected output: 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # Expected output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s: str) -> str:\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    :param s: The string to be encrypted.\n    :return: Encrypted string with letters shifted by 4 positions.\n    \"\"\"\n    \n    def rotate_char(c: str, shift: int) -> str:\n        \"\"\"\n        Rotate a single character by a given shift within the alphabet.\n        \n        :param c: The character to rotate.\n        :param shift: Number of positions to shift the character by.\n        :return: Rotated character.\n        \"\"\"\n        if 'a' <= c <= 'z':  # only process lowercase alphabet characters\n            # Calculate new character with wrap-around using modulo operation\n            new_char = chr(((ord(c) - ord('a') + shift) % 26) + ord('a'))\n            return new_char\n        else:\n            return c  # Return the original character if not a lowercase alphabet\n        \n    shift = 2 * 2  # The letters shift down by two multiplied to two places, i.e., 4 places\n    encrypted_string = [rotate_char(char, shift) for char in s]\n    \n    return ''.join(encrypted_string)\n\n# Examples for testing\nprint(encrypt('hi'))        # Output: 'lm'\nprint(encrypt('asdfghjkl')) # Output: 'ewhjklnop'\nprint(encrypt('gf'))        # Output: 'kj'\nprint(encrypt('et'))        # Output: 'ix'"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Checking if all inputs are integers\n    if not all(isinstance(n, int) for n in [x, y, z]):\n        return False\n    \n    # Checking if any one of the numbers is equal to the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False\n\n# Examples for testing\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1)) # \u279e True\nprint(any_int(3.6, -2.2, 2)) # \u279e False"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \n    :param s: The input string to check.\n    :return: The count of uppercase vowels at even indices.\n    \"\"\"\n    # Define a set of uppercase vowels for quick lookup\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize the count of uppercase vowels at even indices\n    count = 0\n    \n    # Iterate through the string, stepping by 2 to look at even indices\n    for i in range(0, len(s), 2):\n        # Check if the character at the current index is an uppercase vowel\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    # Return the final count of uppercase vowels at even indices\n    return count\n\n# Test cases to validate the function\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0"}
{"task_id": "HumanEval/101", "completion": "def words_string(s: str) -> list:\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n    :param s: Input string containing words separated by commas or spaces.\n    :return: A list of words extracted from the input string.\n    \"\"\"\n    \n    # Replace all commas with spaces to ensure uniform splitting\n    s = s.replace(',', ' ')\n    \n    # Split the string based on spaces and filter out any potential empty strings\n    words = [word for word in s.split() if word]\n    \n    return words\n\n# Example usages\nprint(words_string(\"Hi, my name is John\"))  # Expected output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Expected output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a: int, b: int) -> int:\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n\n    :param a: First integer.\n    :param b: Second integer.\n    :return: Product of the unit digits of a and b.\n\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    def get_unit_digit(num: int) -> int:\n        \"\"\"\n        Helper function to extract the unit digit of an integer.\n        \n        :param num: The integer whose unit digit should be extracted.\n        :return: The unit digit of num.\n        \"\"\"\n        # Absolute value to handle negative numbers correctly\n        return abs(num) % 10\n\n    # Get unit digits of both integers\n    unit_digit_a = get_unit_digit(a)\n    unit_digit_b = get_unit_digit(b)\n\n    # Compute the product of unit digits\n    result = unit_digit_a * unit_digit_b\n\n    return result\n\n# Example Function Usage\nprint(multiply(148, 412))   # Outputs: 16\nprint(multiply(19, 28))     # Outputs: 72\nprint(multiply(2020, 1851)) # Outputs: 0\nprint(multiply(14, -15))    # Outputs: 20"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # Check if the dictionary is empty\n    if not d:\n        return False\n\n    # Extract all keys from the dictionary\n    keys = d.keys()\n\n    # Initialize flags to check for upper and lower case keys\n    all_lower = True\n    all_upper = True\n\n    for key in keys:\n        # If a key is not a string, directly return False\n        if not isinstance(key, str):\n            return False\n        # Check if the key is not in lower case\n        if not key.islower():\n            all_lower = False\n        # Check if the key is not in upper case\n        if not key.isupper():\n            all_upper = False\n            \n        # If both flags are False, no need to continue\n        if not all_lower and not all_upper:\n            return False\n\n    # Return True if either all keys are lower case or all keys are upper case\n    return all_lower or all_upper"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # If the list is too short to have a second smallest element, return None\n    if len(lst) < 2:\n        return None\n    \n    # Initialize first and second smallest elements to infinity\n    first_smallest = second_smallest = float('inf')\n    \n    # Loop through each number in the list to find the two smallest numbers\n    for number in lst:\n        if number < first_smallest:\n            # Update both first and second smallest\n            second_smallest = first_smallest\n            first_smallest = number\n        elif first_smallest < number < second_smallest:\n            # Update only the second smallest\n            second_smallest = number\n    \n    # If second smallest is still infinity, then there is no valid second smallest element\n    return second_smallest if second_smallest < float('inf') else None\n\n# Example usage\nprint(next_smallest([1, 2, 3, 4, 5]))  # Should print 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Should print 2\nprint(next_smallest([]))               # Should print None\nprint(next_smallest([1, 1]))           # Should print None"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \n    :param n: A non-negative integer.\n    :return: List of prime numbers less than n.\n    \n    For example:\n    count_up_to(5) => [2, 3]\n    count_up_to(11) => [2, 3, 5, 7]\n    count_up_to(0) => []\n    count_up_to(20) => [2, 3, 5, 7, 11, 13, 17, 19]\n    count_up_to(1) => []\n    count_up_to(18) => [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to determine if a given number is prime.\n        \n        :param num: Integer to check for primality.\n        :return: True if the number is prime, False otherwise.\n        \"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # List to hold the prime numbers less than n\n    prime_numbers = []\n    \n    # Iterating through all numbers less than n to check for primality\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n    \n    return prime_numbers\n\n# Testing the function\nprint(count_up_to(5))  # Expected: [2, 3]\nprint(count_up_to(11))  # Expected: [2, 3, 5, 7]\nprint(count_up_to(0))  # Expected: []\nprint(count_up_to(20))  # Expected: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # Expected: []\nprint(count_up_to(18))  # Expected: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    # Convert the string value to a float\n    number = float(value)\n    \n    # Check the fractional part of the number\n    fractional_part = abs(number - int(number))\n    \n    if fractional_part == 0.5:\n        # If the fractional part is exactly 0.5, round away from zero\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        # Otherwise, use the built-in round function\n        return round(number)"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n\n    # Initialize the pile with the first level having `n` stones\n    pile = [n]\n    \n    # Determine if the sequence of stones will increment by 2 from an odd or even number\n    if n % 2 == 0:\n        # Start with the next even number\n        current_stone_count = n + 2\n    else:\n        # Start with the next odd number\n        current_stone_count = n + 2\n    \n    # Generate the rest of the levels\n    for i in range(1, n):\n        pile.append(current_stone_count)\n        current_stone_count += 2  # Move to the next odd/even number\n\n    return pile\n\n# Examples for testing\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/94", "completion": "# To solve the problem, we need to break it down into smaller, manageable functions:\n# 1. A function to check if a number is prime.\n# 2. A function to find the largest prime in a list.\n# 3. A function to sum the digits of a given number.\n# 4. A main function to incorporate all these steps.\n\ndef is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \n    :param n: An integer to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_largest_prime(lst: list) -> int:\n    \"\"\"\n    Find the largest prime number in a list.\n    \n    :param lst: A list of integers.\n    :return: The largest prime number in the list.\n    \"\"\"\n    largest_prime = -1\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n    return largest_prime\n\ndef sum_of_digits(n: int) -> int:\n    \"\"\"\n    Calculate the sum of digits of a number.\n    \n    :param n: The integer whose digits are to be summed up.\n    :return: The sum of the digits of the given number.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst: list) -> int:\n    \"\"\"\n    Find the largest prime value in the list and return the sum of its digits.\n    \n    :param lst: A list of integers.\n    :return: The sum of the digits of the largest prime number in the list.\n    \"\"\"\n    largest_prime = find_largest_prime(lst)\n    if largest_prime == -1:\n        return 0  # Return 0 if there's no prime number in the list\n    return sum_of_digits(largest_prime)\n\n# Examples\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output should be 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output should be 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output should be 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output should be 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output should be 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output should be 7"}
{"task_id": "HumanEval/93", "completion": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes it in such a\n    way that it swaps the case of all letters, and replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the English alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n    def swap_case(char: str) -> str:\n        \"\"\"\n        Swap the case of the given character.\n        \n        :param char: The input character.\n        :return: The character with its case swapped.\n        \"\"\"\n        return char.lower() if char.isupper() else char.upper()\n\n    def shift_vowel(char: str) -> str:\n        \"\"\"\n        Replace the vowel character with the letter that appears 2 places ahead in the alphabet.\n        Applies only if the character is a vowel.\n        \n        :param char: The input character, assumed to be a vowel.\n        :return: The letter 2 places ahead in the alphabet.\n        \"\"\"\n        vowels = 'aeiouAEIOU'\n        shifted_vowels = {\n            'a': 'C', 'e': 'G', 'i': 'K', 'o': 'Q', 'u': 'W', \n            'A': 'c', 'E': 'g', 'I': 'k', 'O': 'q', 'U': 'w'\n        }\n        return shifted_vowels[char] if char in vowels else char\n    \n    result = []\n    \n    for char in message:\n        swapped_char = swap_case(char)\n        encoded_char = shift_vowel(swapped_char)\n        result.append(encoded_char)\n    \n    return ''.join(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    \n    # If n is greater than m, the input is invalid.\n    if n > m:\n        return -1\n    \n    # Calculate the total number of integers from n to m, inclusive.\n    count = m - n + 1\n    \n    # Calculate the sum of the integers from n to m.\n    total_sum = (m * (m + 1)) // 2 - (n * (n - 1)) // 2\n    \n    # Compute the average by dividing the total sum by the count of integers.\n    average = total_sum / count\n    \n    # Round the average to the nearest integer.\n    rounded_average = round(average)\n    \n    # Convert the rounded average to a binary string.\n    return bin(rounded_average)\n\n# Test Cases\nprint(rounded_avg(1, 5))  # Expected output: \"0b11\"\nprint(rounded_avg(7, 5))  # Expected output: -1\nprint(rounded_avg(10, 20))  # Expected output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Expected output: \"0b11010\""}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    def is_boredom_sentence(sentence):\n        \"\"\"\n        Check if the given sentence is a 'boredom' sentence.\n        \n        :param sentence: Sentence to check.\n        :return: True if the sentence starts with 'I', False otherwise.\n        \"\"\"\n        return sentence.strip().startswith(\"I\")\n\n    # Split the input string into potential sentence segments\n    sentences = S.split('.')\n    sentences = sum([s.split('?') for s in sentences], [])\n    sentences = sum([s.split('!') for s in sentences], [])\n    \n    # Count the number of boredom sentences\n    boredom_count = sum(1 for sentence in sentences if is_boredom_sentence(sentence))\n\n    return boredom_count\n\n# Example usage\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to compute the sum of signed digits of a number.\n        \n        :param num: Integer number whose digit sum is to be computed.\n        :return: Sum of the signed digits.\n        \"\"\"\n        sum_digits = 0\n        num_str = str(num)\n        \n        # Iterate over each character in the string representation of the number\n        for i, char in enumerate(num_str):\n            if char == '-':\n                continue\n            digit = int(char)\n            \n            # If the digit is preceded by a '-' and is the first non '-' character, it should be negative\n            if i == 0 and num_str[0] == '-':\n                digit = -digit\n            \n            sum_digits += digit\n        \n        return sum_digits\n    \n    # Main logic for count_nums function\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    \n    return count\n\n# Examples for testing\nprint(count_nums([]))  # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))  # Output: 3"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    \n    # Dictionary to map integers to their corresponding names.\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter to keep only integers between 1 and 9 inclusive.\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array.\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array.\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each number in the reversed array with its corresponding name.\n    result = [digit_to_name[num] for num in reversed_arr]\n    \n    # Return the final result.\n    return result"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_even_digit(number):\n        \"\"\"\n        Check if the number contains any even digit.\n        \n        :param number: The number to check.\n        :return: True if the number contains an even digit, False otherwise.\n        \"\"\"\n        # Convert the number to a string and check each character\n        for digit in str(number):\n            if digit in '02468':\n                return True\n        return False\n\n    # Filter out the numbers that have any even digits\n    filtered_numbers = [num for num in x if not has_even_digit(num)]\n\n    # Return the sorted list of filtered numbers\n    return sorted(filtered_numbers)\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x: int, y: int) -> int:\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x and y are positive integers\n    if x <= 0 or y <= 0:\n        raise ValueError(\"Both x and y must be positive integers.\")\n    \n    # Ensure x is less than or equal to y; if not, swap them\n    if x > y:\n        x, y = y, x\n\n    # Start from y and decrement to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found in the range, return -1\n    return -1\n\n# Test cases (these are additional test cases not part of the implementation)\nassert choose_num(12, 15) == 14\nassert choose_num(15, 12) == 14\nassert choose_num(8, 10) == 10\nassert choose_num(7, 7) == -1\nassert choose_num(7, 8) == 8\nassert choose_num(7, 1) == 6\n\n# Example calls:\n# print(choose_num(12, 15))  # Expected output: 14\n# print(choose_num(13, 12))  # Expected output: -1"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s: str, c: str) -> tuple:\n    \"\"\"\n    Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the resulting string is a palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\" the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    \n    # Remove characters from s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Return the result string and the palindrome check result\n    return (result_string, is_palindrome)\n\n# Example usage:\n# print(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\n# print(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\n# print(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n\n    # Descriptive variable naming:\n    total_units_of_water = 0\n    \n    # Calculating the total units of water in the grid.\n    for row in grid:\n        total_units_of_water += sum(row)\n    \n    # Calculating the number of bucket operations needed.\n    number_of_buckets_needed = math.ceil(total_units_of_water / capacity)\n    \n    return number_of_buckets_needed\n\n# Examples to demonstrate the function:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N]. The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2]) ==> True\n    Explanation: By performing 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2]) ==> False\n    Explanation: It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    :param arr: List of integers\n    :return: Boolean indicating whether a non-decreasing order can be achieved\n    \"\"\"\n    \n    # Edge case: Empty array\n    if not arr:\n        return True\n    \n    n = len(arr)\n    unsorted_index = -1\n    \n    # Find the first occurrence where the array is unsorted\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            unsorted_index = i\n            break\n    \n    # If array is already sorted\n    if unsorted_index == -1:\n        return True\n    \n    # To form the sorted array, moving the unsorted part to the beginning\n    shifted_arr = arr[unsorted_index:] + arr[:unsorted_index]\n    \n    # Check if the shifted array is sorted\n    for i in range(1, n):\n        if shifted_arr[i-1] > shifted_arr[i]:\n            return False\n    \n    return True\n\n# Examples\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Helper function to determine if a number is even.\n    def is_even(n):\n        return n % 2 == 0\n\n    # Filter the lists into evens and odds.\n    lst1_even = [x for x in lst1 if is_even(x)]\n    lst1_odd = [x for x in lst1 if not is_even(x)]\n    lst2_even = [x for x in lst2 if is_even(x)]\n    lst2_odd = [x for x in lst2 if not is_even(x)]\n\n    # If lst1 already contains only even numbers, return \"YES\".\n    if len(lst1_odd) == 0:\n        return \"YES\"\n\n    # If lst2 has fewer even numbers than odd numbers in lst1,\n    # it's not possible to make lst1 all even.\n    if len(lst1_odd) > len(lst2_even):\n        return \"NO\"\n\n    # Otherwise, it is possible to make lst1 all even.\n    return \"YES\"\n\n# Example use cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "HumanEval/106", "completion": "from math import factorial\nfrom typing import List\n\ndef calculate_sum(n: int) -> int:\n    \"\"\"Calculate the sum of integers from 1 to n.\"\"\"\n    return n * (n + 1) // 2  # Using the formula for the sum of the first n positive integers\n\ndef f(n: int) -> List[int]:\n    \"\"\" \n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n\n    :param n: Size of the list to generate.\n    :return: A list with the specified values based on the index parity.\n    \n    Example:\n    >>> f(5)\n    [1, 2, 6, 24, 15]\n    \"\"\"\n    # Validate input\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # Check if the index i is even\n            result.append(factorial(i))\n        else:  # For odd indices\n            result.append(calculate_sum(i))\n    \n    return result\n\n# Example usage:\n# print(f(5))  # Output should be: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    \n    # Define vowels\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Function to check if a character is a consonant\n    def is_consonant(char):\n        return char.isalpha() and char not in vowels\n    \n    # Iterate from the end of the word towards the beginning\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and is_consonant(word[i - 1]) and is_consonant(word[i + 1]):\n            return word[i]\n    \n    # Return empty string if no vowel is found according to the conditions\n    return \"\"\n\n# Example Usage:\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    :param nums: List of integers.\n    :return: Minimum sum of any non-empty sub-array of nums.\n    \n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    \n    # Check for empty list\n    if not nums:\n        raise ValueError(\"Input list nums must be non-empty.\")\n    \n    # Initialize variables to store the minimum sum found so far and the current sum\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        # Update current running sum by including the current element\n        current_sum += num\n        \n        # If current running sum is less than minimum sum, update minimum sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n        \n        # If current running sum becomes positive, reset it to 0\n        if current_sum > 0:\n            current_sum = 0\n            \n    return min_sum\n\n# Example use cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))       # Output: -6"}
{"task_id": "HumanEval/113", "completion": "def count_odd_digits(number_string: str) -> int:\n    \"\"\"\n    Count the number of odd digits in a given string consisting of digits.\n    \n    :param number_string: A string containing only digit characters.\n    :return: The count of odd digits in the string.\n    \"\"\"\n    odd_digits = {'1', '3', '5', '7', '9'}\n    return sum(1 for char in number_string if char in odd_digits)\n\ndef format_output(odd_count: int) -> str:\n    \"\"\"\n    Generate the output format string given the count of odd digits.\n    \n    :param odd_count: The count of odd digits.\n    :return: Formatted string with the odd_count in place of 'i'.\n    \"\"\"\n    template = \"the number of odd elements {0}n the str{0}ng {0} of the {0}nput.\"\n    return template.format(odd_count)\n\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, \n    return a list. Each element i of the output should be \"the number of \n    odd elements in the string i of the input.\" where all the i's should \n    be replaced by the number of odd digits in the i'th string of the input.\n    \n    :param lst: List of strings containing only digits\n    :return: List of formatted strings with the number of odd elements\n    \"\"\"\n    # Resultant list to store formatted strings\n    result = []\n    \n    # Iterate through each string in the input list\n    for number_string in lst:\n        # Count the number of odd digits in the current string\n        odd_count = count_odd_digits(number_string)\n        # Format the result string using the count of odd digits\n        formatted_output = format_output(odd_count)\n        # Add the formatted string to the result list\n        result.append(formatted_output)\n    \n    return result\n\n# Example usage and test cases:\nprint(odd_count(['1234567'])) # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', '11111111'])) # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    # Initialize the sum to zero\n    sum_of_elements = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(min(k, len(arr))):\n        # Check if the element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # Add element to the sum if it meets the condition\n            sum_of_elements += arr[i]\n    \n    return sum_of_elements\n\n# Example usage\nprint(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))  # Output: 24"}
{"task_id": "HumanEval/111", "completion": "def histogram(test: str) -> dict:\n    \"\"\"Given a string representing a space-separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') -> {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') -> {'a': 2, 'b': 2}\n    histogram('a b c a b') -> {'a': 2, 'b': 2}\n    histogram('b b b b a') -> {'b': 4}\n    histogram('') -> {}\n\n    :param test: A string of space-separated lowercase letters.\n    :return: A dictionary with the most repeated letters and their counts.\n    \"\"\"\n\n    # Step 1: Handle edge case of empty input\n    if not test:\n        return {}\n\n    # Step 2: Split the input string into individual letters\n    letters = test.split()\n\n    # Step 3: Initialize a dictionary to count occurrences of each letter\n    letter_counts = {}\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Step 4: Find the maximum occurrence count\n    max_count = max(letter_counts.values())\n\n    # Step 5: Create a dictionary for letters with the maximum occurrence\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return result\n\n# Example usage:\n# print(histogram('a b c')) -> {'a': 1, 'b': 1, 'c': 1}\n# print(histogram('a b b a')) -> {'a': 2, 'b': 2}\n# print(histogram('a b c a b')) -> {'a': 2, 'b': 2}\n# print(histogram('b b b b a')) -> {'b': 4}\n# print(histogram('')) -> {}"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    \n    # Helper function to check if a number is a palindrome\n    def is_palindrome(x):\n        str_x = str(x)\n        return str_x == str_x[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_palindrome(3))  # Output should be (1, 2)\n# print(even_odd_palindrome(12))  # Output should be (4, 6)"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    # If k is 0, return an empty list as no elements are required\n    if k == 0:\n        return []\n    \n    # Step 1: Sort the array in descending order to get the largest elements first\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Step 2: Slice the first k elements from the sorted array\n    largest_k_elements = sorted_arr[:k]\n    \n    # Step 3: Sort the largest k elements in ascending order before returning\n    return sorted(largest_k_elements)\n\n# Example usages for clarity\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    def count_consonants(word):\n        \"\"\"Helper function to count consonants in a word.\"\"\"\n        vowels = 'aeiouAEIOU'\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        return consonant_count\n\n    if not s:\n        return []\n\n    # Split the input string into words\n    words = s.split()\n\n    # Initialize the result list\n    result = []\n\n    # Check for words containing exactly n consonants\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    def count_ones(n):\n        \"\"\"\n        Helper function to count the number of ones in the binary representation of a number.\n        \n        :param n: The number to count the ones in its binary representation.\n        :return: The number of ones in the binary representation of n.\n        \"\"\"\n        return bin(n).count('1')\n    \n    # Using a key to sort by number of ones first, then by decimal value.\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n# Example usages\nprint(sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text, you\n    should split on commas ','. If no commas exist, you should return the number of lower-case letters with odd order in the\n    alphabet. ord('a') = 0, ord('b') = 1, ... ord('z') = 25.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") \u279e 3\n    '''\n    \n    # Check for whitespace in the string\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check for comma in the string\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # If neither whitespace nor comma exists, count lower-case letters with odd order in alphabet\n    else:\n        def is_odd_alphabetic_order(char):\n            # Get the zero-based order in the alphabet\n            order = ord(char) - ord('a')\n            # Check if the order number is odd\n            return order % 2 != 0\n        \n        # Filter the characters to find lower-case letters with odd order\n        odd_order_letters = [char for char in txt if char.islower() and is_odd_alphabetic_order(char)]\n        \n        # Return the count of such letters\n        return len(odd_order_letters)"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date: str) -> bool:\n    \"\"\"\n    You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    :param date: Date string in the format 'mm-dd-yyyy'.\n    :return: True if the date is valid according to the specified rules, otherwise False.\n    \"\"\"\n    # Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date is in the correct format\n    try:\n        date_obj = datetime.strptime(date, \"%m-%d-%Y\")\n    except ValueError:\n        return False\n    \n    # Extract month and day from the date string\n    month, day, year = date.split('-')\n    month = int(month)\n    day = int(day)\n    \n    # Check the valid number of days for each month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if not (1 <= day <= 31):\n            return False\n    elif month in {4, 6, 9, 11}:\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    else:\n        # Invalid month\n        return False\n    \n    # If all checks pass, the date is valid\n    return True\n\n# Example Usages\nprint(valid_date('03-11-2000')) # True\nprint(valid_date('15-01-2012')) # False\nprint(valid_date('04-0-2040'))  # False\nprint(valid_date('06-04-2020')) # True\nprint(valid_date('06/04/2020')) # False"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Step 1: Check for ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n            \n    # Step 2: Check for more than 1 duplicate of the same number\n    count = {}\n    for num in lst:\n        if num in count:\n            count[num] += 1\n            if count[num] > 2:  # If any number appears more than twice\n                return False\n        else:\n            count[num] = 1\n\n    return True\n\n# Test cases:\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    :param lst: List of integers\n    :return: Sum of odd integers at even positions\n    \"\"\"\n    # Initialize sum to 0\n    odd_sum = 0\n    \n    # Iterate through the list with index and value\n    for index, value in enumerate(lst):\n        # Check if the position is even and the element is odd\n        if index % 2 == 0 and value % 2 != 0:\n            odd_sum += value\n    \n    return odd_sum\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Expected output: 12 (5 + 7)\nprint(solution([3, 3, 3, 3, 3]))  # Expected output: 9 (3 + 3 + 3)\nprint(solution([30, 13, 24, 321]))  # Expected output: 0 (no odd numbers in even positions)\nprint(solution([2, 4, 6, 8]))  # Expected output: 0 (no odd numbers in even positions)\nprint(solution([1]))  # Expected output: 1 (only one element which is odd and in even position 0)"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"\n    Determine if the length of the intersection of two given intervals is a prime number.\n    \n    :param interval1: A tuple (start, end) where start and end are integers, representing the first interval.\n    :param interval2: A tuple (start, end) where start and end are integers, representing the second interval.\n    :return: \"YES\" if the length of the intersection is a prime number, otherwise \"NO\".\n    \"\"\"\n    # Helper function to check if a number is a prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Compute the intersection boundaries\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    inter_start = max(start1, start2)\n    inter_end = min(end1, end2)\n    \n    # Calculate the length of the intersection\n    intersection_length = inter_end - inter_start + 1\n    \n    # Check if the computed length is a prime number\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (Ceiling) first.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    # Initialize the sum to zero\n    total_sum = 0\n    \n    # Iterate over each number in the list\n    for num in lst:\n        # Round the number to the nearest upper integer (ceiling)\n        rounded_num = math.ceil(num)\n        # Square the rounded number\n        squared_num = rounded_num ** 2\n        # Add the squared number to the total sum\n        total_sum += squared_num\n    \n    # Return the total sum of squared numbers\n    return total_sum\n\n# Example test cases\nprint(sum_squares([1, 2, 3]))         # Output: 14\nprint(sum_squares([1, 4, 9]))         # Output: 98\nprint(sum_squares([1, 3, 5, 7]))      # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))     # Output: 29\nprint(sum_squares([-2.4, 1, 1]))      # Output: 6"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is less than the previous element\n        if arr[i] < arr[i - 1]:\n            # Return the current index if the condition is met\n            return i\n    \n    # If no such element is found, return -1\n    return -1\n\n# Examples for testing:\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1\nprint(can_arrange([10, 20, 30, 25])) # Output: 3\nprint(can_arrange([]))               # Output: -1\nprint(can_arrange([5]))              # Output: -1"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    # Helper function to compute Tribonacci sequence\n    def compute_tribonacci(k, memo):\n        if k in memo:\n            return memo[k]\n        if k == 1:\n            result = 3\n        elif k % 2 == 0:\n            result = 1 + k / 2\n        else:\n            result = compute_tribonacci(k - 1, memo) + compute_tribonacci(k - 2, memo) + compute_tribonacci(k + 1, memo)\n        memo[k] = result\n        return result\n    \n    # Initialize memoization dictionary\n    memo = {}\n    \n    # Generate the first n + 1 numbers of Tribonacci sequence\n    tribonacci_sequence = []\n    for i in range(n + 1):\n        tribonacci_sequence.append(compute_tribonacci(i, memo))\n    \n    return tribonacci_sequence\n\n# Example usage\nprint(tri(3))  # Output: [1, 3, 2, 8]\nprint(tri(4))  # Output: [1, 3, 2, 8, 3]"}
{"task_id": "HumanEval/131", "completion": "def digits(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \n    :param n: A positive integer.\n    :return: The product of the odd digits, or 0 if all are even.\n    \"\"\"\n    \n    # Convert the integer to a string to easily access each digit\n    n_str = str(n)\n    \n    # Initialize a product variable to store the result\n    product = 1\n    \n    # Flag to check if the number has at least one odd digit\n    has_odd = False\n    \n    for char in n_str:\n        digit = int(char)\n        if digit % 2 != 0:  # Check if the digit is odd\n            has_odd = True\n            product *= digit\n    \n    # If no odd digits were found, return 0\n    if not has_odd:\n        return 0\n    \n    return product\n\n# Example usage:\n# print(digits(1))   # Output: 1\n# print(digits(4))   # Output: 0\n# print(digits(235)) # Output: 15"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Check if the input string is empty\n    if not txt:\n        return False\n\n    # Remove any trailing whitespace characters from the string\n    trimmed_txt = txt.rstrip()\n\n    # Check if the trimmed string is empty after removing trailing spaces\n    if not trimmed_txt:\n        return False\n\n    # Check the last character of the trimmed string\n    last_char = trimmed_txt[-1]\n\n    # Check if the last character is an alphabetical character\n    if last_char.isalpha():\n        # Check if it's not part of a word (i.e., preceded by a space or it is a single character)\n        if len(trimmed_txt) == 1 or trimmed_txt[-2] == ' ':\n            return True\n\n    return False"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    from heapq import heappop, heappush\n\n    # Initialize variables\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    # Create a priority queue: elements are tuples (path_val_list, x_pos, y_pos, steps)\n    pq = []\n    \n    # Populate the priority queue with starting points (one for each cell in grid)\n    for i in range(n):\n        for j in range(n):\n            heappush(pq, ([grid[i][j]], i, j, 1))\n    \n    # While there are elements in the priority queue\n    while pq:\n        path, x, y, steps = heappop(pq)\n        \n        # If the path is of required length, return it\n        if steps == k:\n            return path\n        \n        # Explore the neighbours\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            \n            # Check if the neighbor is within bounds\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                heappush(pq, (new_path, nx, ny, steps + 1))"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Helper function to check if a single string of parentheses is balanced\n    def is_balanced(s):\n        # Initialize balance counter\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:  # char == ')'\n                balance -= 1\n            # If balance goes negative, it's unbalanced\n            if balance < 0:\n                return False\n        # In the end, balance should be zero\n        return balance == 0\n\n    s1, s2 = lst\n\n    # Check all possible concatenations\n    possible_concatenations = [s1 + s2, s2 + s1]\n\n    # Return 'Yes' if any concatenation is balanced, otherwise 'No'\n    for candidate in possible_concatenations:\n        if is_balanced(candidate):\n            return 'Yes'\n    return 'No'\n\n# Sample testing the function\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))    # Output: 'No'"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialize the largest negative and smallest positive with None\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        # Update largest negative if applicable\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # Update smallest positive if applicable\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Example test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))  # Output: (None, None)\nprint(largest_smallest_integers([0]))  # Output: (None, None)\nprint(largest_smallest_integers([-2, -4, 0, 3, -1, 1]))  # Output: (-1, 1)\nprint(largest_smallest_integers([-5, -4, -3, -2, -1]))  # Output: (-1, None)\nprint(largest_smallest_integers([1, 2, 3, 4, 5]))  # Output: (None, 1)"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n\n    # Base case: If the input string is empty, there are no brackets to check.\n    if not string:\n        return False\n\n    # This stack will help us manage the matching of brackets.\n    stack = []\n\n    # This flag will help us check if we have found any nested brackets.\n    nested_found = False\n\n    # Iterate over each character in the input string.\n    for char in string:\n        if char == '[':\n            # Push the opening bracket onto the stack.\n            stack.append(char)\n        elif char == ']':\n            # If there's no matching opening bracket for the closing bracket or if\n            # the stack is empty, then we have unmatched brackets.\n            if not stack:\n                return False\n            # Pop the last opening bracket from the stack.\n            stack.pop()\n            # If there was at least one item in the stack before we popped, it means\n            # we were inside another pair of brackets (nested).\n            if stack:\n                nested_found = True\n\n    # After processing all characters, if the stack is not empty, we have unmatched opening brackets.\n    if stack:\n        return False\n    \n    # The function returns True only if we found nested brackets.\n    return nested_found"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    \n    return total_sum\n\n# Examples demonstrating function behavior\nprint(sum_squares([1, 2, 3]))  # should return 6\nprint(sum_squares([]))        # should return 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # should return -126"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n: int) -> int:\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n    :param n: An integer for which the special factorial is to be computed.\n    :return: The special factorial of the input integer.\n    :raises ValueError: If the input integer is not a positive integer.\n    \"\"\"\n    \n    # Error handling for cases where n <= 0\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Initialize the result\n    result = 1\n    \n    # Compute the special factorial by multiplying the factorials of integers from 1 to n\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result\n\n# Example usage\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    \n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Determine if a given number is prime.\n        \n        :param n: The number to check for primality.\n        :return: True if n is prime, otherwise False.\n        \"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    words = sentence.split()  # Split the sentence into words\n    prime_length_words = [word for word in words if is_prime(len(word))]  # Filter words by prime length\n    \n    return ' '.join(prime_length_words)  # Join filtered words into a single string and return\n\n# Examples to test the function\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    def convert_to_number(value):\n        \"\"\"\n        Attempt to convert a value to a float. Handles strings with either '.' or ',' as decimal point.\n        Returns the float representation of the value if conversion is successful, else returns None.\n        \"\"\"\n        if isinstance(value, (int, float)):\n            return value\n        elif isinstance(value, str):\n            try:\n                # Try to replace `,` with `.` and convert to float\n                return float(value.replace(',', '.'))\n            except ValueError:\n                pass\n        return None\n    \n    # Convert both values to number\n    num_a = convert_to_number(a)\n    num_b = convert_to_number(b)\n    \n    if num_a is None or num_b is None:\n        raise ValueError(f\"Both inputs must be convertible to a number. Invalid inputs: a={a}, b={b}\")\n    \n    # Compare numerical values\n    if num_a > num_b:\n        return a\n    elif num_b > num_a:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n: int) -> bool:\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \n    :param n: The number to evaluate.\n    :return: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise.\n    \"\"\"\n    \n    # To be the sum of 4 positive even numbers, n must be at least 8.\n    # The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8.\n    if n < 8:\n        return False\n    \n    # Any number greater than or equal to 8 can be split into the sum of 4 positive even numbers.\n    # Because we can always find suitable even numbers (e.g., 2 + 2 + 2 + (n - 6)) to form the sum.\n    return True"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    def is_odd_digit(digit):\n        \"\"\"Helper function to check if a digit is odd.\"\"\"\n        return digit in {1, 3, 5, 7, 9}\n    \n    def first_digit(n):\n        \"\"\"Helper function to get the first digit of a number.\"\"\"\n        n = abs(n)\n        while n >= 10:\n            n //= 10\n        return n\n    \n    def last_digit(n):\n        \"\"\"Helper function to get the last digit of a number.\"\"\"\n        return abs(n) % 10\n    \n    # Initialize filter count\n    count = 0\n    \n    # Iterate over the input numbers to apply the filter criteria\n    for num in nums:\n        if num > 10 and is_odd_digit(first_digit(num)) and is_odd_digit(last_digit(num)):\n            count += 1\n    \n    return count\n\n# Example usage\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in Collatz sequence.\n    \n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    def collatz_sequence(n):\n        \"\"\"\n        Generate the Collatz sequence for a given positive integer n.\n        \n        :param n: The starting positive integer.\n        :return: A list representing the Collatz sequence starting from n.\n        \"\"\"\n        sequence = []\n        while n != 1:\n            sequence.append(n)\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n        sequence.append(1)  # append the last element 1\n        return sequence\n    \n    def filter_odd_numbers(sequence):\n        \"\"\"\n        Filter out odd numbers from the given sequence.\n        \n        :param sequence: The sequence of integers.\n        :return: A list containing only the odd numbers from the sequence.\n        \"\"\"\n        return [num for num in sequence if num % 2 != 0]\n    \n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Generate the Collatz sequence for the given n\n    sequence = collatz_sequence(n)\n    \n    # Filter out the odd numbers from the sequence\n    odd_numbers = filter_odd_numbers(sequence)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)\n\n# Examples for testing:\nprint(get_odd_collatz(5)) # [1, 5]\nprint(get_odd_collatz(7)) # [1, 7]"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    \n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n\n    # Allowed file extensions\n    valid_extensions = {'txt', 'exe', 'dll'}\n\n    # Check for exactly one dot in file_name\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file_name into name and extension parts\n    name, extension = file_name.split('.')\n\n    # Check if extension is valid\n    if extension not in valid_extensions:\n        return 'No'\n\n    # Check if name is not empty and starts with a latin letter\n    if not name or not name[0].isalpha():\n        return 'No'\n\n    # Count the number of digits in the name\n    digit_count = sum(1 for char in name if char.isdigit())\n    if digit_count > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # List of planets sorted by their proximity to the sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if planet1 and planet2 are valid planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()  # Return an empty tuple if either planet1 or planet2 is invalid\n    \n    # Find the indices of planet1 and planet2\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Sort indices to ensure correct range finding\n    start = min(index1, index2)\n    end = max(index1, index2)\n    \n    # Get the planets in between\n    in_between_planets = planets[start + 1:end]\n    \n    return tuple(in_between_planets)"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order.\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort first by length, then alphabetically for words of the same length\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_strings\n\n# Example usage:\n# assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n# assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n# print(sorted_list_sum([\"hello\", \"world\", \"python\", \"is\", \"awesome\", \"!!!!\", \"rocks\"]))  # [\"hello\", \"rocks\", \"!!!!\", \"awesome\"]"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None  # Return None for empty list\n\n    sum_magnitudes = 0\n    product_of_signs = 1\n\n    for num in arr:\n        if num == 0:\n            return 0  # If any number is zero, product of signs should be zero\n        sum_magnitudes += abs(num)  # Add the magnitude of the number\n        product_of_signs *= (1 if num > 0 else -1)  # Update the product of signs\n\n    return sum_magnitudes * product_of_signs"}
{"task_id": "HumanEval/144", "completion": "def simplify(x: str, n: str) -> bool:\n    \"\"\"\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \n    :param x: A string representation of the first fraction.\n    :param n: A string representation of the second fraction.\n    :return: True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n    \n    from fractions import Fraction\n\n    # Function to convert the string fraction into Fraction objects\n    def str_to_fraction(s: str) -> Fraction:\n        numerator, denominator = map(int, s.split('/'))\n        return Fraction(numerator, denominator)\n    \n    # Convert both string fractions to Fraction objects\n    fraction_x = str_to_fraction(x)\n    fraction_n = str_to_fraction(n)\n    \n    # Multiply the two fractions\n    result = fraction_x * fraction_n\n    \n    # Check if the result is a whole number\n    return result.denominator == 1\n\n# Example usage\nprint(simplify(\"1/5\", \"5/1\"))  # Output: True\nprint(simplify(\"1/6\", \"2/1\"))  # Output: False\nprint(simplify(\"7/10\", \"10/2\")) # Output: False"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    \n    :param a: Length of the first side of the triangle.\n    :param b: Length of the second side of the triangle.\n    :param c: Length of the third side of the triangle.\n    :return: True if the sides form a right-angled triangle, False otherwise.\n    \n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Arrange sides in ascending order to easily apply the Pythagorean theorem\n    side1, side2, hypotenuse = sorted([a, b, c])\n    \n    # Check if the triangle sides satisfy the Pythagorean theorem\n    return side1 ** 2 + side2 ** 2 == hypotenuse ** 2\n\n# Examples demonstrating the functionality\nprint(right_angle_triangle(3, 4, 5))  # Output should be True\nprint(right_angle_triangle(1, 2, 3))  # Output should be False"}
{"task_id": "HumanEval/150", "completion": "def is_prime(number: int) -> bool:\n    \"\"\"\n    Determine if a number is prime.\n\n    :param number: The number to check.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if number <= 1:\n        return False\n    if number == 2:\n        return True\n    if number % 2 == 0:\n        return False\n    for i in range(3, int(number**0.5) + 1, 2):\n        if number % i == 0:\n            return False\n    return True\n\ndef x_or_y(n: int, x: int, y: int) -> int:\n    \"\"\"\n    Return the value of x if n is a prime number and return the value of y otherwise.\n\n    :param n: The number to check if it is a prime.\n    :param x: The value to return if n is prime.\n    :param y: The value to return if n is not prime.\n    :return: x if n is a prime number, y otherwise.\n    \n    Examples:\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \"\"\"\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of digits of an integer. For negative numbers, \n        the negative sign is ignored in the digit sum calculation.\n\n        :param num: An integer whose digits' sum needs to be calculated.\n        :return: Sum of the digits of the number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Use the `sorted` function with a custom key. The custom key is a tuple\n    # where the first element is the sum of digits, and the second element is\n    # the original index (to keep the original order for equal sum of digits).\n    sorted_nums = sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n    return sorted_nums\n\n# Example usage:\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    # Validate input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input should be a list of numbers\")\n        \n    # Initialize the sum of squares variable\n    sum_of_squares = 0\n    \n    # Iterate through the list to process each number\n    for num in lst:\n        # Ignore if the number is negative or not an integer\n        if isinstance(num, int) and num >= 0:\n            # Check if the number is odd\n            if num % 2 != 0:\n                # Add the square of the number to the sum\n                sum_of_squares += num ** 2\n    \n    # Return the final sum of squares\n    return sum_of_squares\n\n# Example usage:\nprint(double_the_difference([1, 3, 2, 0]))     # Output: 10\nprint(double_the_difference([-1, -2, 0]))     # Output: 0\nprint(double_the_difference([9, -2]))         # Output: 81\nprint(double_the_difference([0]))             # Output: 0\nprint(double_the_difference([]))              # Output: 0"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    :param text: The input string that needs the spaces fixed.\n    :return: A string with spaces replaced by underscores and consecutive spaces by a dash.\n    \"\"\"\n    \n    import re  # Import the regular expressions module for pattern matching\n\n    # Define the pattern for spaces and consecutive spaces\n    def replace_spaces(match):\n        \"\"\"Helper function to determine replacement based on match length.\"\"\"\n        spaces = match.group(0)\n        if len(spaces) > 2:\n            return '-'\n        else:\n            return '_' * len(spaces)\n    \n    # Replace spaces using the re.sub and the helper function\n    return re.sub(r' +', replace_spaces, text)\n\n# Examples\nprint(fix_spaces(\"Example\"))            # Output: \"Example\"\nprint(fix_spaces(\"Example 1\"))          # Output: \"Example_1\"\nprint(fix_spaces(\" Example 2\"))         # Output: \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))       # Output: \"_Example-3\"\nprint(fix_spaces(\"This    is    an    example.\"))  # Output: \"This_is-an_example.\""}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    \n    # Helper function to count unique characters in a word\n    def unique_char_count(word):\n        # Using a set to count unique characters\n        return len(set(word))\n    \n    # Initializing the variables to keep track of the result\n    max_unique_chars = 0\n    result_word = None\n\n    # Iterate through the list of words\n    for word in words:\n        # Get the unique character count for the current word\n        current_unique_count = unique_char_count(word)\n        \n        # Check if the current word has more unique characters or if it's\n        # lexicographically smaller when there's a tie\n        if (current_unique_count > max_unique_chars or\n            (current_unique_count == max_unique_chars and (result_word is None or word < result_word))):\n            # Update the result variables\n            max_unique_chars = current_unique_count\n            result_word = word\n    \n    return result_word\n\n# Example Usage\n# print(find_max([\"name\", \"of\", \"string\"])) # Output: \"string\"\n# print(find_max([\"name\", \"enam\", \"game\"])) # Output: \"enam\"\n# print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Create integer array a of length n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the number of elements in a that have the same remainder when divided by 3\n    count_mod = [0, 0, 0]  # [count_mod0, count_mod1, count_mod2]\n    for num in a:\n        count_mod[num % 3] += 1\n    \n    # Calculate the number of valid triples\n    count = 0\n    \n    # Triples of the form (a[i], a[j], a[k]) where all remainders are the same\n    for i in range(3):\n        if count_mod[i] >= 3:\n            # Choose 3 out of count_mod[i] using combinatorial (n choose 3)\n            count += count_mod[i] * (count_mod[i] - 1) * (count_mod[i] - 2) // 6\n    \n    # Triples of the form (a[i], a[j], a[k]) where one number has a different remainder\n    # (mod0, mod1, mod2)\n    count += count_mod[0] * count_mod[1] * count_mod[2]\n    \n    return count\n\n# Example usage:\nprint(get_max_triples(5))  # Output should be 1"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number: int) -> str:\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Dictionary mapping integer values to their respective Roman numeral symbols\n    roman_numerals_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), \n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), \n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    result = []  # Initialize result list to store the roman numeral characters\n\n    # Iterate over the roman_numerals_map and construct the Roman numeral string\n    for value, numeral in roman_numerals_map:\n        while number >= value:\n            result.append(numeral)\n            number -= value  # Decrease the number by the value of the numeral added\n    \n    # Join the list into a single string and convert to lowercase\n    return ''.join(result).lower()\n\n# Example usage\nif __name__ == \"__main__\":\n    print(int_to_mini_roman(19))  # Output: 'xix'\n    print(int_to_mini_roman(152))  # Output: 'clii'\n    print(int_to_mini_roman(426))  # Output: 'cdxxvi'"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    # Initialize variables to track the strongest extension and its strength.\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    # Loop over each extension in the list.\n    for extension in extensions:\n        # Calculate the number of uppercase and lowercase letters.\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        \n        # Calculate the strength of the current extension.\n        strength = cap_count - sm_count\n        \n        # Update the strongest extension if the current one is stronger.\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    # Return the class name concatenated with the strongest extension.\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example Usage:\n# result = Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n# print(result)  # Output: 'Slices.SErviNGSliCes'"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n\n    # Define a dictionary to map operator strings to their corresponding lambda functions\n    operation_map = {\n        '+': lambda a, b: a + b,\n        '-': lambda a, b: a - b,\n        '*': lambda a, b: a * b,\n        '//': lambda a, b: a // b,\n        '**': lambda a, b: a ** b\n    }\n    \n    # Initialize the expression result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operators and operands to build and calculate the final result\n    for i in range(len(operator)):\n        op = operator[i]\n        next_operand = operand[i + 1]\n        result = operation_map[op](result, next_operand)\n    \n    return result\n\n# Example Usage\noperators = ['+', '*', '-']\noperands = [2, 3, 4, 5]\nprint(do_algebra(operators, operands))  # Output: 9"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a: str, b: str) -> bool:\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n\n    :param a: The main word where to search for substring.\n    :param b: The word whose rotations need to be checked as substrings.\n    :return: True if any rotation of b is a substring in a, otherwise False.\n\n    Examples:\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n\n    # Check edge cases: if either string is empty, return False\n    if not a or not b:\n        return False\n\n    # Generate all rotations of the string b\n    def generate_rotations(s: str):\n        rotations = []\n        for i in range(len(s)):\n            rotation = s[i:] + s[:i]\n            rotations.append(rotation)\n        return rotations\n    \n    # Get all rotations of the second word\n    rotations_of_b = generate_rotations(b)\n    \n    # Check if any rotation of b is a substring of a\n    for rotation in rotations_of_b:\n        if rotation in a:\n            return True\n    \n    return False\n\n# Examples for testing\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/152", "completion": "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    :param game: List of actual scores of the matches.\n    :param guess: List of guesses for the matches.\n    :return: List indicating the difference between the actual scores and the guesses, 0 if guessed correctly.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    # Ensuring the input lists are of the same length\n    if len(game) != len(guess):\n        raise ValueError(\"Both 'game' and 'guess' lists must be of the same length\")\n\n    # Compute the differences\n    differences = []\n    for actual, prediction in zip(game, guess):\n        # Check if the guess is correct\n        if actual == prediction:\n            differences.append(0)\n        else:\n            differences.append(abs(actual - prediction))\n\n    return differences\n\n# Example usage:\n# compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n# compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    \n    def is_even_digit(n):\n        \"\"\"\n        Check if a single-digit number is even.\n        \n        :param n: Integer to check.\n        :return: True if n is even, False otherwise.\n        \"\"\"\n        return n % 2 == 0\n\n    def generate_even_digits(x, y):\n        \"\"\"\n        Generate a list of even digits within the inclusive range [x, y].\n        \n        :param x: Start of range (inclusive).\n        :param y: End of range (inclusive).\n        :return: List of even digits in ascending order.\n        \"\"\"\n        # Ensure x is less than or equal to y\n        start, end = min(x, y), max(x, y)\n        \n        # Filter even single-digit numbers within the range\n        return [i for i in range(start, end + 1) if is_even_digit(i)]\n    \n    # Digital constraint (0-9), ensure the range is within 0-9\n    a, b = max(0, min(a, 9)), max(0, min(b, 9))\n    \n    # Generate and return even digits within the range\n    return generate_even_digits(a, b)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    \n    # Calculate total carrots eaten after trying to eat the needed carrots\n    total_eaten = number + need\n    \n    # Calculate the number of carrots left after eating\n    if need <= remaining:\n        # Enough carrots remaining to satisfy the need\n        remaining_carrots = remaining - need\n    else:\n        # Not enough carrots, eat what's left\n        remaining_carrots = 0\n    \n    # Actual total eaten will be the initial number plus all remaining or the actual needed carrots\n    total_actual_eaten = number + min(need, remaining)\n    \n    return [total_actual_eaten, remaining_carrots]\n\n# Examples to show the usage of the function\nprint(eat(5, 6, 10))  # [11, 4]\nprint(eat(4, 8, 9))   # [12, 1]\nprint(eat(1, 10, 10)) # [11, 0]\nprint(eat(2, 11, 5))  # [7, 0]"}
{"task_id": "HumanEval/161", "completion": "def solve(s: str) -> str:\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vice versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulting string.\n    \n    Examples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n\n    :param s: Input string.\n    :return: Modified string as per rules mentioned.\n    \"\"\"\n    has_letter = any(c.isalpha() for c in s)\n    \n    if has_letter:\n        # Reverse the case of each letter\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # Reverse the entire string\n        return s[::-1]\n\n# Example uses:\nprint(solve(\"1234\"))    # Output: \"4321\"\nprint(solve(\"ab\"))      # Output: \"AB\"\nprint(solve(\"#a@C\"))    # Output: \"#A@c\""}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num: int) -> tuple[int, int]:\n    \"\"\"\n    Given an integer, returns a tuple containing the number of even and odd digits respectively.\n\n    :param num: An integer input.\n    :return: A tuple (number of even digits, number of odd digits).\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to a string to iterate over the digits\n    num_str = str(abs(num))  # Use abs() to handle negative numbers\n    \n    # Iterate over each character in the string\n    for char in num_str:\n        # Convert the character back to an integer\n        digit = int(char)\n        \n        # Check if the digit is even or odd and increment the respective counter\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n\n# Example usage\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    :param text: Input string whose MD5 hash needs to be calculated.\n    :return: MD5 hash of the input string or None if the input is an empty string.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    \"\"\"\n\n    # Check if the input text is empty\n    if text == \"\":\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n\n    # Encode the string to a bytes object and update the hash object\n    md5_hash.update(text.encode('utf-8'))\n\n    # Get the hexadecimal representation of the hash\n    return md5_hash.hexdigest()"}
