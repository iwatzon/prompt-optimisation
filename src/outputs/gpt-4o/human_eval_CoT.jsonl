{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:  # Handle the edge case for empty list\n        return []\n    \n    result = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n    \n    return result"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers` \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    \n    return result"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = []\n    \n    for char_a, char_b in zip(a, b):\n        if char_a == char_b:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)\n\n# Test case\nprint(string_xor('010', '110'))  # Output should be '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([]) is None\n    True\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    n = len(string)\n    if n == 0:\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # The prefix before the palindromic suffix\n            prefix = string[:i]\n            # Append the reversed prefix to make the palindrome\n            return string + prefix[::-1]\n\n    return string  # For an empty string case, which would not be reached anyhow.\n\n# Example test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n    \n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0\n    \n    # Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(number - mean_value) for number in numbers]\n    \n    # Calculate the mean of these absolute deviations\n    mean_absolute_dev = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mean_absolute_dev\n\n# Example usage with the given test case\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == ' ':\n            continue  # Ignore spaces\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n    \n    return result\n\n# Example usage and test\nprint(separate_paren_groups('( ) (( )) (( )( ))'))"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    length = numbers.length\n    for i in range(length):\n        for j in range(i + 1, length):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n\n    return max_depths"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) it consists of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Step 1: Convert the string to lowercase\n    string = string.lower()\n    \n    # Step 2: Use a set to store distinct characters\n    distinct_characters = set(string)\n    \n    # Step 3: Return the number of distinct characters\n    return len(distinct_characters)"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n    \n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Mapping from note symbols to their beat durations\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Map each note to its corresponding beat duration\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats\n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Step 1: Define a mapping of number words to their numeric values\n    number_to_value = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Step 2: Split the input string into individual words\n    words = numbers.split()\n    \n    # Step 3: Convert each word to its numeric value using the mapping\n    numeric_values = [number_to_value[word] for word in words]\n    \n    # Step 4: Sort the numeric values\n    sorted_numeric_values = sorted(numeric_values)\n    \n    # Step 5: Map the sorted numeric values back to their corresponding words\n    value_to_number = {v: k for k, v in number_to_value.items()}\n    sorted_words = [value_to_number[value] for value in sorted_numeric_values]\n    \n    # Step 6: Join the sorted words into a single string\n    result = 'one ' + ' '.join(sorted_words)\n    \n    return result\n\n# Test example\nprint(sort_numbers('three one five'))  # Output should be 'one three five'"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    start = 0  # Initialize start index\n\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1  # Move start to the next character for overlapping\n    \n    return count\n\n# Example usages for testing\nprint(how_many_times('', 'a'))  # Expected: 0\nprint(how_many_times('aaa', 'a'))  # Expected: 3\nprint(how_many_times('aaaa', 'aa'))  # Expected: 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n# A test case to validate the function\nprint(largest_divisor(15))  # Output should be 5"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n# Testing the implementation\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped = []\n    for char in string:\n        if char.isupper():\n            flipped.append(char.lower())\n        elif char.islower():\n            flipped.append(char.upper())\n        else:\n            flipped.append(char)  # In case of non-alphabet characters, keep them as is\n    return ''.join(flipped)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each \n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Step 1: Sort the list\n    numbers.sort()\n    \n    # Step 2: Initialize variables\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    # Step 3: Traverse the sorted list and find the closest pair\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    # Step 4: Return the result\n    return closest_pair\n\n# Example usages\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeared in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    factor = 2\n    \n    # Use trial division to find factors\n    while factor * factor <= n:  # Check up to the square root of `n`\n        while (n % factor) == 0:\n            factors.append(factor)\n            n //= factor\n        factor += 1\n        \n    # If remaining n is a prime number greater than 1, it is a factor\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Example usages and test cases\nif __name__ == \"__main__\":\n    print(factorize(8))  # [2, 2, 2]\n    print(factorize(25))  # [5, 5]\n    print(factorize(70))  # [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Step 1: Count the occurrences of each number\n    count = {}\n    for number in numbers:\n        if number in count:\n            count[number] += 1\n        else:\n            count[number] = 1\n    \n    # Step 2: Create a list of numbers that occur exactly once\n    result = []\n    for number in numbers:\n        if count[number] == 1:\n            result.append(number)\n    \n    return result"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 0:\n        raise ValueError(\"The list is empty, so it has no maximum element.\")\n\n    max_val = l[0]\n    for elem in l:\n        if elem > max_val:\n            max_val = elem\n\n    return max_val"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Example usage:\nencoded = encode_cyclic(\"abcdefghi\")\nprint(\"Encoded:\", encoded)  # Output should be \"bcaefdhig\"\ndecoded = decode_cyclic(encoded)\nprint(\"Decoded:\", decoded)  # Output should be \"abcdefghi\""}
{"task_id": "HumanEval/42", "completion": "        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n        ```\n      We notice that each element in the list `l` is increased by 1.\n      \n3. **Steps to Implement the Function**:\n    - **Iterate over Each Element in the List**: Use a loop or list comprehension to traverse each element in the list.\n    - **Increment Each Element**: Add 1 to each element.\n    - **Return the New List**: Collect the incremented elements in a new list and return that list.\n\n4. **Choose the Approach**: Using list comprehension is concise and efficient for this task.\n\n5. **Implement the Function**:\n    - Create a new list via list comprehension where each element is incremented by 1.\n\nLet's put this into code:\n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count_of_sevens = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_of_sevens += str(i).count('7')\n    return count_of_sevens"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    unique_elements = set(l)  # Remove duplicates\n    sorted_unique_elements = sorted(unique_elements)  # Sort the unique elements\n    return sorted_unique_elements"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * n\n\n# Example Usage\n# print(car_race_collision(3))  # Output should be 9"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract elements from even indexes\n    even_elements = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even indexed elements\n    sorted_even_elements = sorted(even_elements)\n    \n    # Replace even indexed positions with sorted elements\n    result = l[:]  # Create a copy of the original list (to avoid mutating input)\n    for i, val in zip(range(0, len(l), 2), sorted_even_elements):\n        result[i] = val\n        \n    return result\n\n# Example Usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive\")\n    \n    # Handle the zero case\n    if x == 0:\n        return '0'\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x //= base\n    \n    return result"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    # Step 1: Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Step 2: Sort the extracted elements\n    divisible_by_three_sorted = sorted(divisible_by_three)\n    \n    # Step 3: Create a resultant list, replacing values at indices divisible by 3\n    result = l[:]  # Create a copy of the original list\n    \n    sorted_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three_sorted[sorted_index]\n            sorted_index += 1\n    \n    return result\n\n# Running an example\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))"}
{"task_id": "HumanEval/39", "completion": "import math\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Checks if num is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Returns n-th number that is a Fibonacci number and also prime.\"\"\"\n    \n    fib_primes = []\n    a, b = 0, 1\n    \n    while len(fib_primes) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fib_primes.append(a)\n    \n    return fib_primes[-1]\n\n# Testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0])) # False\nprint(triples_sum_to_zero([1, 3, -2, 1])) # True\nprint(triples_sum_to_zero([1, 2, 3, 7])) # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7])) # True\nprint(triples_sum_to_zero([1])) # False"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n        \n    return False"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Reverse the input string\n    reversed_text = text[::-1]\n    \n    # Compare the original string with the reversed string\n    return text == reversed_text"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    result = 1\n    base = 2\n    \n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    \n    return result"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        next_val = a + b + c + d\n        a, b, c, d = b, c, d, next_val\n    \n    return d\n\n# Let's test the function with provided examples\nprint(fib4(5))  # Expected output is 4\nprint(fib4(6))  # Expected output is 8\nprint(fib4(7))  # Expected output is 14"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates derivative of the polynomial with coefficients xs at point x.\n    return xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + .... n * xs[n] * x^(n-1)\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\n\ndef find_zero(xs: list, tol=1e-7, max_iter=1000):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    x = 0.0  # Initial guess\n    for _ in range(max_iter):\n        fx = poly(xs, x)\n        dfx = poly_derivative(xs, x)\n        if abs(dfx) < tol: \n            break  # Derivative too small, unlikely to converge\n        x1 = x - fx / dfx\n        if abs(x1 - x) < tol: \n            return x1  # Converged to a solution\n        x = x1\n    \n    return x  # Return the found solution after max iterations\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for i in range(2, n + 1):\n        a, b = b, a + b\n\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            counter += 1\n        elif bracket == \">\":\n            counter -= 1\n\n        # If counter goes negative, there's an unmatched closing bracket\n        if counter < 0:\n            return False\n    \n    # If counter is zero, all opening brackets have matched closing brackets\n    return counter == 0"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    \n    # Step 1: Sort the list\n    sorted_list = sorted(l)\n    \n    # Step 2: Determine the length of the list\n    n = len(sorted_list)\n    \n    # Step 3: Find the median\n    # Case when the list has an odd number of elements\n    if n % 2 == 1:\n        median_value = sorted_list[n // 2]\n    # Case when the list has an even number of elements\n    else:\n        median_value = (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2.0\n    \n    return median_value"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n\n    usecases\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(result)\n"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    \n    # Convert both lists to sets to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of both sets\n    common_elements = set1 & set2\n    \n    # Convert the set of common elements to a sorted list\n    sorted_common_elements = sorted(list(common_elements))\n    \n    return sorted_common_elements"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2\n\n# Test cases\nprint(sum_to_n(30))  # 465\nprint(sum_to_n(100))  # 5050\nprint(sum_to_n(5))  # 15\nprint(sum_to_n(10))  # 55\nprint(sum_to_n(1))  # 1"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:  # An empty list or a single element list is considered monotonic\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum_upper = 0\n    for char in s:\n        if char.isupper():\n            sum_upper += ord(char)\n    return sum_upper"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize the first three values\n    fibfib_values = [0, 0, 1]\n    \n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        next_value = fibfib_values[-1] + fibfib_values[-2] + fibfib_values[-3]\n        fibfib_values.append(next_value)\n    \n    return fibfib_values[n]"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    # Extract all numbers from the string\n    numbers = re.findall(r'\\d+', s)\n    \n    # Convert these extracted numbers into integers\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Testing the function with provided examples\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n\n# Testing the function\nprint(correct_bracketing(\"(\"))   # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_factor = 1\n    \n    # Check for number of 2s in n.\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # n must be odd at this point, so we can skip even numbers\n    divisor = 3\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            largest_factor = divisor\n            n //= divisor\n        divisor += 2\n    \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    \n    # Step 1: Count frequencies of each integer\n    freq = Counter(lst)\n    \n    # Step 2: Find the greatest integer meeting the criteria\n    result = -1\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    left = 0\n    right = len(sorted_lst) - 1\n    result = []\n\n    while left <= right:\n        if left <= right:\n            result.append(sorted_lst[left])\n            left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n            \n    return result"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # If not a valid triangle, return -1\n        return -1\n\n# Example usages\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "if q == q[::-1]:\n    # The list is palindromic\nelse:\n    # The list is not palindromic"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even:\n                smallest_even = value\n                index_of_smallest_even = index\n    \n    if index_of_smallest_even == -1:  # No even number was found\n        return []\n    \n    return [smallest_even, index_of_smallest_even]\n\n# Example usage:\nprint(pluck([4,2,3]))  # Output: [2, 1]\nprint(pluck([1,2,3]))  # Output: [2, 1]\nprint(pluck([]))  # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n-1-i]:\n            count += 1\n    \n    return count\n\n# Test cases provided\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Expected output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Expected output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Expected output: 0\nprint(smallest_change([1, 2, 1]))                # Expected output: 0\nprint(smallest_change([1, 2, 2, 1]))             # Expected output: 0\n\n# Additional edge cases\nprint(smallest_change([]))                       # Expected output: 0 (empty array)\nprint(smallest_change([1]))                      # Expected output: 0 (a single element)"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Examples\nprint(total_match([], [])) \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi'])) \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5'])) \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    def sieve_of_eratosthenes(limit):\n        is_prime = [True] * (limit + 1)\n        p = 2\n        while (p * p <= limit):\n            if (is_prime[p] == True):\n                for i in range(p * p, limit + 1, p):\n                    is_prime[i] = False\n            p += 1\n        primes = [p for p in range(2, limit+1) if is_prime[p]]\n        return primes\n    \n    primes_list = sieve_of_eratosthenes(100)\n\n    from itertools import combinations\n    for comb in combinations(primes_list, 3):\n        if comb[0] * comb[1] * comb[2] == a:\n            return True\n    return False\n\n# Example usage\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(60))  # True (2 * 3 * 5 * 2) should output False because it checks distinct primes\nprint(is_multiply_prime(105)) # False (3 * 5 * 7)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift >= number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    x_str = str(x)\n    n = len(x_str)\n    \n    if shift >= n:\n        return x_str[::-1]\n    \n    # Perform the circular shift\n    shift = shift % n\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    \n    return shifted_str\n\n# Test cases to validate the implementation\nprint(circular_shift(12, 1))  # Expected output: \"21\"\nprint(circular_shift(12, 2))  # Expected output: \"12\"\nprint(circular_shift(12345, 3))  # Expected output: \"34512\"\nprint(circular_shift(12345, 5))  # Expected output: \"12345\"\nprint(circular_shift(12345, 8))  # Expected output: \"54321\""}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert decimal to binary string\n    binary_string = bin(decimal)[2:]\n    \n    # Format with 'db' prefix and suffix\n    formatted_binary_string = f\"db{binary_string}db\"\n    \n    return formatted_binary_string"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n <= 1 or x < 1:\n        return False\n    \n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n            \n    return False\n\n# Testing the function with given examples\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be '1'.\n        For N = 150, the sum of digits will be 6 the output should be '110'.\n        For N = 147, the sum of digits will be 12 the output should be '1100'.\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the number to a string to easily iterate over digits\n    digit_str = str(N)\n    \n    # Sum the digits\n    digit_sum = sum(int(digit) for digit in digit_str)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    # Return the binary string\n    return binary_representation\n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # For 1-digit numbers, only the number '1' is valid.\n\n    start_with_one = 10**(n-1)\n    end_with_one = 10**(n-1)\n    start_and_end_with_one = 10**(n-2)\n    \n    result = start_with_one + end_with_one - start_and_end_with_one\n    return result\n\n# Example usage:\nprint(starts_one_ends(2))  # Expected output: 18"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    import re\n    \n    # Split the string by spaces but keep the spaces as part of the splits\n    split_re = re.compile(r'(\\S+|\\s+)')\n    parts = split_re.findall(s)\n\n    # Sort characters in every word\n    sorted_parts = [''.join(sorted(part)) if not part.isspace() else part for part in parts]\n\n    # Join them back together\n    result = ''.join(sorted_parts)\n    \n    return result\n\n# Examples for testing:\nprint(anti_shuffle('Hi'))             # Output: 'Hi'\nprint(anti_shuffle('hello'))          # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 1 and value % 2 == 0:  # odd index and even value\n            total += value\n    return total"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    cube_root = round(abs(a) ** (1/3))  # Find the rounded cube root of the absolute value of a\n    return cube_root**3 == abs(a)       # Check if the cube of this value equals the absolute value of a, ensuring to handle the sign\n\n# Test the function with examples\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    \n    vowels = set(\"aeiouAEIOU\")  # considering both lower and uppercase\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char in \"yY\" and i == len(s) - 1:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected 2\nprint(vowels_count(\"ACEDY\"))  # Expected 3\nprint(vowels_count(\"Yummy\"))  # Expected 2\nprint(vowels_count(\"ymmcY\"))  # Expected 1\nprint(vowels_count(\"queue\"))  # Expected 4\nprint(vowels_count(\" \"))      # Expected 0\nprint(vowels_count(\"hello world\")) # Expected 3\nprint(vowels_count(\"\")) # Expected 0\nprint(vowels_count(\"syzygy\")) # Expected 2\nprint(vowels_count(\"SyZyGy\")) # Expected 2\n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:  # Early exit if there are fewer than 2 elements\n        return None\n    \n    unique_elements = set(lst)  # Remove duplicates by converting to a set\n    \n    if len(unique_elements) < 2:  # If fewer than 2 unique elements, return None\n        return None\n    \n    sorted_elements = sorted(unique_elements)  # Sort the unique elements\n    \n    return sorted_elements[1]  # Return the second smallest element\n\n# Example Tests\nprint(next_smallest([1, 2, 3, 4, 5])) # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2])) # Output: 2\nprint(next_smallest([]))              # Output: None\nprint(next_smallest([1, 1]))          # Output: None"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number n is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the length of the string is a prime number.\"\"\"\n    length = len(string)  # Step 1: Get the length of the string\n    return is_prime(length)  # Step 2 & 3: Check if the length is prime and return the result\n\n# Example usage:\n# print(prime_length('Hello'))  # True\n# print(prime_length('abcdcba'))  # True\n# print(prime_length('kittens'))  # True\n# print(prime_length('orange'))  # False"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    \n    # Iterate through each row and column to find occurrences of x\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort coordinates\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    def shift_char(c):\n        # Since letters are lowercase as per the examples\n        base = ord('a')\n        offset = (ord(c) - base + 4) % 26  # shift by 4 positions\n        return chr(base + offset)\n    \n    result = ''.join(shift_char(char) for char in s)\n    return result\n\n# Testing the function with given examples\nprint(encrypt('hi'))          # Expected 'lm'\nprint(encrypt('asdfghjkl'))   # Expected 'ewhjklnop'\nprint(encrypt('gf'))          # Expected 'kj'\nprint(encrypt('et'))          # Expected 'ix'"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    For example:\n    is_happy('a') => False\n    is_happy('aa') => False\n    is_happy('abcd') => True\n    is_happy('aabb') => False\n    is_happy('adb') => True\n    is_happy('xyy') => False\n    \"\"\"\n    # Step 1: Check for minimum length\n    if len(s) < 3:\n        return False\n\n    # Step 2: Check every 3 consecutive letters\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    # Step 3: Return True if all 3 consecutive letters are distinct\n    return True\n\n# Test cases\nprint(is_happy('a'))    # Output: False\nprint(is_happy('aa'))   # Output: False\nprint(is_happy('abcd')) # Output: True\nprint(is_happy('aabb')) # Output: False\nprint(is_happy('adb'))  # Output: True\nprint(is_happy('xyy'))  # Output: False"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers equals the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    # If none of the conditions are met\n    return False\n\n# Testing the function with given examples\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    # Define GPA ranges and corresponding letter grades\n    def get_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    # Convert each GPA to a letter grade\n    return [get_letter_grade(gpa) for gpa in grades]\n\n# Example\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Check if the array is empty, if so return an empty list\n    if not array:\n        return []\n    \n    # Get the first and last elements\n    first_element = array[0]\n    last_element = array[-1]\n    \n    # Calculate the sum of the first and last elements\n    sum_first_last = first_element + last_element\n    \n    # Determine sorting order based on the sum\n    if sum_first_last % 2 == 1:  # If the sum is odd\n        return sorted(array)\n    else:                        # If the sum is even\n        return sorted(array, reverse=True)\n\n# Test cases\nprint(sort_array([]))               # => []\nprint(sort_array([5]))              # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))     # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/94", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits\n\n# Example usage:\n# result = skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n# print(result)  # Expected output: 10"}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the string into sentences based on the delimiters\n    sentences = re.split(r'[.?!]', S)\n    \n    # Remove leading and trailing spaces from each sentence\n    sentences = [sentence.strip() for sentence in sentences]\n    \n    # Count how many sentences start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n    \n    return boredom_count\n\n# Testing the function\nprint(is_bored(\"Hello world\")) # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\")) # Output: 1\nprint(is_bored(\"I am here! Are you there? I think so.\")) # Output: 2"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n\n    for i in range(n):\n        levels.append(n)\n        n += 2\n\n    return levels"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    \n    # Return False if dictionary is empty\n    if not dict:\n        return False\n\n    all_lower = True\n    all_upper = True\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            all_lower = False\n        if not key.isupper():\n            all_upper = False\n\n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # should return True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # should return False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # should return False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # should return False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # should return True"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    def get_replacement(char):\n        \"\"\" Helper function to get the replacement character for vowels shifted by 2 places \"\"\"\n        vowels = 'aeiou'\n        replacements = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}\n        vowels_upper = 'AEIOU'\n        replacements_upper = {v: chr((ord(v) - ord('A') + 2) % 26 + ord('A')) for v in vowels_upper}\n        replacements.update(replacements_upper)\n        return replacements.get(char, char)\n    \n    # Step 1: Swap the case\n    swapped_message = message.swapcase()\n    \n    # Step 2: Replace vowels\n    encoded_message = ''.join(get_replacement(char) for char in swapped_message)\n    \n    return encoded_message\n\n# Examples:\nprint(encode('test'))          # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Retrieve the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    result = unit_digit_a * unit_digit_b\n    \n    return result"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    num = float(value)\n    if num > 0:\n        if (num - int(num)) == 0.5:\n            return int(num + 0.5)\n        else:\n            return round(num)\n    else:\n        if (num - int(num)) == -0.5:\n            return int(num - 0.5)\n        else:\n            return round(num)\n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        x, y = y, x  # Ensure x is always <= y\n    \n    for number in range(y, x - 1, -1):\n        if number % 2 == 0:\n            return number\n    \n    return -1"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces\n    s = s.replace(',', ' ')\n    \n    # Split the string by spaces\n    words = s.split()\n    \n    # Return the list of words\n    return words"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    def check_even_digits(number):\n        \"\"\"Check if the number contains any even digits\"\"\"\n        even_digits = {'0', '2', '4', '6', '8'}\n        for digit in str(number):\n            if digit in even_digits:\n                return True\n        return False\n    \n    result = [num for num in x if not check_even_digits(num)]\n    return sorted(result)\n\n# Example usage\nprint(unique_digits([15, 33, 1422, 1]))  # [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # []"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef sum_upto(n):\n    return n * (n + 1) // 2\n\ndef f(n):\n    result = []\n    for i in range(n):\n        if (i + 1) % 2 == 0:  # If i+1 is even\n            result.append(factorial(i + 1))\n        else:  # If i+1 is odd\n            result.append(sum_upto(i + 1))\n    return result\n\n# Test the function with the provided example\nprint(f(5))  # Output should be: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    counter = 0\n    \n    # Loop through the string, checking each character at even indices\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in uppercase_vowels:\n            counter += 1\n    \n    return counter\n\n# Examples\nprint(count_upper('aBCdEf'))   # Should return 1\nprint(count_upper('abcdefg'))  # Should return 0\nprint(count_upper('dBBE'))     # Should return 0"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    # Check if n is greater than m\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    sum_of_integers = (m - n + 1) * (n + m) // 2\n    \n    # Compute the count of integers\n    count = m - n + 1\n    \n    # Compute the average\n    average = sum_of_integers / count\n    \n    # Round the average to nearest integer\n    rounded_average = round(average)\n    \n    # Convert the rounded average to binary\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n\n# Test cases\nprint(rounded_avg(1, 5))    # Output: \"0b11\"\nprint(rounded_avg(7, 5))    # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    n = len(arr)\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if rotated == sorted(arr):\n            return True\n    \n    return False"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        s = str(x)\n        return s == s[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test cases to validate the solution\nprint(even_odd_palindrome(3))     # Output: (1, 2)\nprint(even_odd_palindrome(12))    # Output: (4, 6)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if char in '13579')\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_water_units = sum(sum(row) for row in grid)\n    return math.ceil(total_water_units / capacity)\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Step 1: Remove characters from `s` that are in `c`\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the resulting string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Step 3: Return the result as a tuple\n    return (result_string, is_palindrome)\n\n# Example usages\nprint(reverse_delete(\"abcde\", \"ae\"))       # Output should be: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))       # Output should be: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))   # Output should be: ('cdedc', True)"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Testing the function\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # => \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # => \"NO\""}
{"task_id": "HumanEval/108", "completion": "def digit_sum(n):\n    \"\"\"\n    Helper function to calculate the sum of the digits of an integer n.\n    \"\"\"\n    is_negative = n < 0\n    n = abs(n)\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n    if is_negative and digit_sum > 0:\n        digit_sum -= 2 * (n % 10)\n    return digit_sum\n\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \"\"\"\n    count = 0\n    for num in arr:\n        # Check if the sum of digits is greater than 0\n        if digit_sum(num) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))  # Expected output: 0\nprint(count_nums([-1, 11, -11]))  # Expected output: 1\nprint(count_nums([1, 1, 2]))  # Expected output: 3"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0  # This line handles the case if nums is an empty list.\n\n    min_ending_here = nums[0]\n    min_so_far = nums[0]\n\n    for num in nums[1:]:\n        min_ending_here = min(num, min_ending_here + num)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return min_so_far\n\n# Examples to test the implementation\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Expected output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Expected output: -6"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    \n    # Create an empty dictionary to count occurrences\n    count_dict = {}\n    \n    # Split the string into list of letters\n    letters = test.split()\n    \n    # Count occurrences of each letter\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    # Determine the maximum count\n    max_count = max(count_dict.values())\n    \n    # Create a dictionary with letters that have the maximum count\n    max_count_dict = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return max_count_dict\n\n# Sample test cases\nprint(histogram('a b c'))         # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))       # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))     # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))     # {'b': 4}\nprint(histogram(''))              # {}"}
{"task_id": "HumanEval/105", "completion": "filtered_arr = [x for x in arr if 1 <= x <= 9]"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    sum_result = 0\n    for i in range(k):\n        if -99 <= arr[i] <= 99:\n            sum_result += arr[i]\n    return sum_result"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    if k <= 0 or k > len(arr):\n        return []  # If k is out of bounds, return an empty list\n    \n    # Sort the array to get elements in non-decreasing order\n    sorted_arr = sorted(arr)\n    \n    # Get the last k elements, which are the k largest elements\n    max_k_elements = sorted_arr[-k:]\n    \n    return max_k_elements"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    \n    if len(word) < 3:\n        return \"\"\n    \n    for i in range(len(word) - 2, 0, -1):  # Start from len(word) - 2 to 1\n        if word[i] in vowels:\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:  # Checking the neighbors\n                return word[i]\n    \n    return \"\""}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    total_sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total_sum += value\n            \n    return total_sum\n\n# Test examples:\nprint(solution([5, 8, 7, 1]))  # Should output 12\nprint(solution([3, 3, 3, 3, 3]))  # Should output 9\nprint(solution([30, 13, 24, 321]))  # Should output 0"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    \n    if not s:\n        return []\n    \n    vowels = set('aeiouAEIOU')\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n# Example usage\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # ==> []\nprint(select_words(\"Hello world\", 4))             # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # ==> [\"Uncle\"]\n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Count the number of opening and closing parentheses in both strings\n    open_parens = lst[0].count('(') + lst[1].count('(')\n    close_parens = lst[0].count(')') + lst[1].count(')')\n    \n    # If the number of opening and closing parentheses are the same, return 'Yes'\n    return 'Yes' if open_parens == close_parens else 'No'\n\n# Example test cases\nprint(match_parens(['()(', ')']))  # Expected Output: 'Yes'\nprint(match_parens([')', ')']))    # Expected Output: 'No'"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    from collections import Counter\n    \n    # If the list is empty or has one element, it's considered sorted\n    if len(lst) <= 1:\n        return True\n    \n    # Count occurrences of each number\n    counts = Counter(lst)\n    \n    # Check if any count is more than 2\n    for count in counts.values():\n        if count > 2:\n            return False\n    \n    # Check if list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    # Step 1: Check if the date string is empty\n    if not date:\n        return False\n    \n    # Step 2: Check and validate the date format\n    try:\n        parsed_date = datetime.strptime(date, '%m-%d-%Y')\n    except ValueError:\n        return False\n\n    # Step 3: Extract components\n    month = parsed_date.month\n    day = parsed_date.day\n    year = parsed_date.year\n\n    # Step 4: Validate month range\n    if not (1 <= month <= 12):\n        return False\n\n    # Step 5: Validate day range based on the month\n    if month in {4, 6, 9, 11}:\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    else:\n        if not (1 <= day <= 31):\n            return False\n\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False\nprint(valid_date('04-0-2040'))   # => False\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Define the sorting key\n    def sort_key(x):\n        # Convert to binary and count number of 1's\n        return (bin(x).count('1'), x)\n    \n    # Handle non-negative and negative integers separately\n    non_negative_arr = sorted(filter(lambda x: x >= 0, arr), key=sort_key)\n    negative_arr = sorted(filter(lambda x: x < 0, arr))\n\n    # Combine the sorted parts if needed\n    sorted_arr = negative_arr + non_negative_arr\n    \n    return sorted_arr"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in Collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = []\n    while n > 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    if n == 1:\n        odd_numbers.append(1)\n    return sorted(odd_numbers)\n\n# Example usage\nprint(get_odd_collatz(5))  # Output should be [1, 5]\nprint(get_odd_collatz(13)) # Example usage with another number"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    a, b = interval1\n    c, d = interval2\n\n    start_intersection = max(a, c)\n    end_intersection = min(b, d)\n\n    if start_intersection > end_intersection:\n        return \"NO\"\n\n    length = end_intersection - start_intersection + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3))) # ==> \"NO\"\nprint(intersection((-1, 1), (0, 4))) # ==> \"NO\"\nprint(intersection((-3, -1), (-5, 5))) # ==> \"YES\""}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    \n    if not has_odd:\n        return 0\n        \n    return product"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    \n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes\n\n# Examples\nprint(prod_signs([1, 2, 2, -4]))  # Output should be -9\nprint(prod_signs([0, 1]))         # Output should be 0\nprint(prod_signs([]))             # Output should be None"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    if txt == \"\":\n        return False\n        \n    # Strip trailing spaces\n    txt = txt.rstrip()\n    \n    # Check if the last character is a letter\n    if txt[-1].isalpha():\n        \n        # Check if it is isolated by a space from the preceding character\n        if len(txt) == 1 or txt[-2] == ' ':\n            return True\n    \n    return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    # Step 1: Round each element to the ceiling\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Step 2: Square each of these rounded integers\n    squared_lst = [x**2 for x in rounded_lst]\n    \n    # Step 3: Sum all the squared values\n    result = sum(squared_lst)\n    \n    return result"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    counter = 0\n    for char in string:\n        if char == '[':\n            counter += 1\n            if counter >= 2:\n                return True\n        elif char == ']':\n            if counter == 0:\n                return False\n            counter -= 1\n    return False\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    # If n is zero, we just return the base case result as [1].\n    if n == 0:\n        return [1]\n    \n    # Initialize the list to store the tribonacci numbers.\n    seq = [0] * (n + 1)\n    \n    # Base cases\n    seq[0] = 1\n    if n > 0:\n        seq[1] = 3\n    \n    # Fill in the list based on the given rules\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            seq[i] = 1 + i // 2\n        else:\n            # Calculate sequence value based on preceding values\n            # According to problem, tri(n + 1) is needed, save for eval\n            if i == n:\n                seq.append(3) # Safe to dive into recursion for last base eval\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n    \n    # Make sure if n is engaging useful indexes\n    if n % 2 == 1:\n        seq[n] = seq[n - 1] + seq[n - 2] + 3 # Application from the defenition elements\n    \n    return seq\n\n# Example usage:\n# print(tri(3))  # Expected output: [1, 3, 2, 8]\n"}
{"task_id": "HumanEval/137", "completion": "def convert_to_float(value):\n    if isinstance(value, str):\n        # Replace comma with dot and convert to float\n        value = value.replace(',', '.')\n        return float(value)\n    return float(value)  # in case of int or float\n\ndef compare_one(a, b):\n    # Convert both values to floats for comparison\n    float_a = convert_to_float(a)\n    float_b = convert_to_float(b)\n    \n    if float_a == float_b:\n        return None\n    elif float_a > float_b:\n        return a\n    else:\n        return b\n    \n# Testing the function with the given examples\nprint(compare_one(1, 2.5))       # \u279e 2.5\nprint(compare_one(1, \"2,3\"))     # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))   # \u279e \"6\"\nprint(compare_one(\"1\", 1))       # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\"\"\"\n    return n >= 8 and n % 2 == 0\n\n\n# Testing\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True\nprint(is_equal_to_sum_even(10))  # True\nprint(is_equal_to_sum_even(12))  # True"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Step 1: Initialize the values to None\n    largest_negative = None\n    smallest_positive = None\n\n    # Step 2: Loop through the list to find negatives and positives\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    # Step 3: Return the result as a tuple\n    return (largest_negative, smallest_positive)\n\n# Examples\nassert(largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1))\nassert(largest_smallest_integers([]) == (None, None))\nassert(largest_smallest_integers([0]) == (None, None))\nassert(largest_smallest_integers([-5, -10, 3, 7, -3, 2, 1]) == (-3, 1))\nassert(largest_smallest_integers([-2, -3, -1, -10, -5]) == (-1, None))\n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1\nprint(can_arrange([3, 1, 4, 2, 5]))  # Output: 3\nprint(can_arrange([5, 4, 3, 2, 1]))  # Output: 4"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    # Check the number of digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the part before and after the dot\n    name_part, extension = file_name.split('.')\n    \n    # Check that the name part is not empty and starts with a letter\n    if not name_part or not re.match(r'^[a-zA-Z]', name_part):\n        return 'No'\n    \n    # Check the extension part\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n\n# Test examples\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    from math import factorial\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result\n\n# Example usage:\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    def is_odd_digit(digit):\n        \"\"\"Helper function to check if a digit is odd.\"\"\"\n        return digit in (1, 3, 5, 7, 9)\n    \n    count = 0\n\n    for num in nums:\n        if abs(num) > 10:  # Check if number is greater than 10 in absolute terms\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if is_odd_digit(first_digit) and is_odd_digit(last_digit):\n                count += 1\n\n    return count\n\n# Example calls for testing\nprint(specialFilter([15, -73, 14, -15]))  # Expected output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Expected output: 2"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    \n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            \n            result.append(char)\n            space_count = 0\n    \n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n    \n    return ''.join(result)\n\n# Test cases\nprint(fix_spaces(\"Example\"))        # Example\nprint(fix_spaces(\"Example 1\"))      # Example_1\nprint(fix_spaces(\" Example 2\"))     # _Example_2\nprint(fix_spaces(\" Example   3\"))   # _Example-3"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exists in the text you\n    should split on commas ','. If no commas exist, you should return the number of lower-case letters with odd order in the\n    alphabet.\n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    # Check for whitespaces\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check for commas\n    if ',' in txt:\n        return txt.split(',')\n    \n    # Count lower-case letters with odd order in the alphabet\n    odd_order_letters = \"bdfhjlnprtvxz\"\n    count = 0\n    for char in txt:\n        if char in odd_order_letters:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # \u279e 3"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2\n        elif index % 4 == 0:\n            total_sum += value ** 3\n        else:\n            total_sum += value\n    return total_sum\n\n# Test cases\nprint(sum_squares([1,2,3]))  # Output: 6\nprint(sum_squares([]))       # Output: 0\nprint(sum_squares([-1,-5,2,-1,-5]))  # Output: -126"}
{"task_id": "HumanEval/145", "completion": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(abs(n)))"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for score, prediction in zip(game, guess):\n        if score == prediction:\n            result.append(0)\n        else:\n            result.append(abs(score - prediction))\n    return result\n\n# Example usages:\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/149", "completion": "   def sorted_list_sum(lst):\n   ```\n\n2. **Filter Out Strings with Odd Lengths:**\n   ```python\n       even_length_strings = [s for s in lst if len(s) % 2 == 0]\n   ```\n\n3. **Sort the List by Length and Alphabetically:**\n   ```python\n       sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n   ```\n\n4. **Return the Sorted List:**\n   ```python\n       return sorted_strings\n   ```\n\nCombining all these steps, we get the complete function:\n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)  # Take the absolute value to ignore the sign\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through each digit in the number\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\"\"\"\n    # If b is an empty string, it doesn't make sense to check rotations. So, return False for empty b.\n    if not b:\n        return False\n    \n    n = len(b)\n    \n    # Generate all rotations of b and check if any of them is a substring of a.\n    for i in range(n):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n            \n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\")) # => False\nprint(cycpattern_check(\"hello\",\"ell\")) # => True\nprint(cycpattern_check(\"whassup\",\"psus\")) # => False\nprint(cycpattern_check(\"abab\",\"baa\")) # => True\nprint(cycpattern_check(\"efef\",\"eeff\")) # => False\nprint(cycpattern_check(\"himenss\",\"simen\")) # => True"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        return cap - sm\n    \n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\"\n\n# Example Usage\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: Slices.SErviNGSliCes\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: my_class.AA"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Step 1: Parse the input\n    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n    \n    # Step 2: Converting to rational numbers and performing multiplication\n    numerator = num_x * num_n\n    denominator = denom_x * denom_n\n    \n    # Step 3: Checking for a whole number\n    return numerator % denominator == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\")) # False"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from itertools import product\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right\n\n    def dfs(x, y, path):\n        # If the path length equals k, return this path\n        if len(path) == k:\n            return path\n        \n        best_path = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                candidate_path = dfs(nx, ny, new_path)\n                if best_path is None or candidate_path < best_path:\n                    best_path = candidate_path\n        return best_path\n\n    smallest_path = None\n    for i, j in product(range(N), repeat=2):\n        initial_path = [grid[i][j]]\n        candidate_path = dfs(i, j, initial_path)\n        if smallest_path is None or candidate_path < smallest_path:\n            smallest_path = candidate_path\n    \n    return smallest_path\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten_after_meals = number + min(need, remaining)\n    carrots_left_after_meals = max(remaining - need, 0)\n    \n    return [total_eaten_after_meals, carrots_left_after_meals]\n\n# Testing the examples provided:\nprint(eat(5, 6, 10))  # Expected output: [11, 4]\nprint(eat(4, 8, 9))   # Expected output: [12, 1]\nprint(eat(1, 10, 10)) # Expected output: [11, 0]\nprint(eat(2, 11, 5))  # Expected output: [7, 0]"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example Usage:\n# sentence = \"This is a test\"\n# output = words_in_sentence(sentence)\n# print(output)  # Output: \"is\""}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # List of Roman numerals and their values, in descending order\n    val_map = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), \n        (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), \n        (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    result = []\n    \n    # Convert the number to Roman numeral\n    for value, numeral in val_map:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    \n    # Join the list into a string and convert it to lowercase\n    return ''.join(result).lower()\n\n# Examples for testing\nassert int_to_mini_roman(19) == 'xix'\nassert int_to_mini_roman(152) == 'clii'\nassert int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # List of planets in the order of their proximity to the sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Return empty tuple if planet1 or planet2 are not valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the two planets\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    \n    # Ensure idx1 is less than idx2 for correct slicing\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    \n    # Return the planets between idx1 and idx2 (exclusive)\n    return tuple(planets[idx1 + 1:idx2])\n\n# Example usage\nprint(bf(\"Jupiter\", \"Neptune\"))  # (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # (\"Venus\")\nprint(bf(\"Mercury\", \"Uranus\"))   # (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nprint(bf(\"Pluto\", \"Neptune\"))    # ()"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Lists to classify values by their mod 3 results\n    mod_count = [0, 0, 0]  # mod_count[0] for % 3 == 0, mod_count[1] for % 3 == 1, mod_count[2] for % 3 == 2\n    \n    # Classify elements of a based on a[i] % 3\n    for value in a:\n        mod_count[value % 3] += 1\n    \n    # Sum up valid triples\n    # Triples (0, 0, 0)\n    count = (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2)) // 6 if mod_count[0] >= 3 else 0\n    # Triples (1, 1, 1)\n    count += (mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2)) // 6 if mod_count[1] >= 3 else 0\n    # Triples (2, 2, 2)\n    count += (mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2)) // 6 if mod_count[2] >= 3 else 0\n    # Triples (0, 1, 2)\n    count += mod_count[0] * mod_count[1] * mod_count[2]\n\n    return count"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if any(char.isalpha() for char in s):\n        return ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        return s[::-1]\n\n# Testing the function with the provided examples\nprint(solve(\"1234\"))  # Output should be \"4321\"\nprint(solve(\"ab\"))    # Output should be \"AB\"\nprint(solve(\"#a@C\"))  # Output should be \"#A@c\""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Identify the hypotenuse (the longest side)\n    hypotenuse = max(a, b, c)\n    \n    # Sum of squares of the other two sides\n    if hypotenuse == a:\n        return a**2 == b**2 + c**2\n    elif hypotenuse == b:\n        return b**2 == a**2 + c**2\n    else:\n        return c**2 == a**2 + b**2\n\n# Example usage\nprint(right_angle_triangle(3, 4, 5))  # Should return True\nprint(right_angle_triangle(1, 2, 3))  # Should return False\n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    # Check if the input string is empty\n    if text == \"\":\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the string\n    md5_hash.update(text.encode())\n    \n    # Return the hexadecimal digest of the hash\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    \"\"\"\n    Given two lists: operators and operands. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n    \"\"\"\n    \n    if len(operators) != len(operands) - 1:\n        raise ValueError(\"Invalid input: Length of operators should be one less than length of operands.\")\n    \n    # Initialize the expression with the first operand\n    expression = str(operands[0])\n    \n    # Append each operator followed by the corresponding operand\n    for i in range(len(operators)):\n        expression += f\" {operators[i]} {operands[i + 1]}\"\n        \n    # Evaluate the constructed expression\n    result = eval(expression)\n    \n    return result\n\n# Example usage:\noperators = ['+', '*', '-']\noperands = [2, 3, 4, 5]\nresult = do_algebra(operators, operands)\n\nprint(result)  # Should output: 9"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count and word < max_word:\n            max_word = word\n\n    return max_word\n\n# Examples to test the function\nprint(find_max([\"name\", \"of\", \"string\"]))  # should return \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))   # should return \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))    # should return \"aaaaaaa\""}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    low = min(a, b)\n    high = max(a, b)\n    \n    even_digits = [0, 2, 4, 6, 8]\n    result = [digit for digit in even_digits if low <= digit <= high]\n    \n    return result"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    \n    # Filter the list to include only positive odd integers\n    filtered_numbers = [num for num in lst if isinstance(num, int) and num > 0 and num % 2 != 0]\n    \n    # Calculate the sum of their squares\n    total_sum = sum(num ** 2 for num in filtered_numbers)\n    \n    return total_sum\n\n# Examples to verify the function\nprint(double_the_difference([1, 3, 2, 0]))  # Should return 10\nprint(double_the_difference([-1, -2, 0]))  # Should return 0\nprint(double_the_difference([9, -2]))  # Should return 81\nprint(double_the_difference([0]))  # Should return 0\nprint(double_the_difference([]))  # Should return 0"}
