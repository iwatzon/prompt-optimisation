{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Using a list comprehension to filter strings that contain the substring\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n\n# Unit tests to validate the implementation\nassert filter_by_substring([], 'a') == []\nassert filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') == ['abc', 'bacd', 'array']\nassert filter_by_substring(['test', 'testing', 'example', 'simple'], 'est') == ['test', 'testing']\nassert filter_by_substring(['hello', 'world', 'python', 'programming'], 'th') == ['python']\nassert filter_by_substring(['a', 'b', 'c', 'd'], 'e') == []"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    # Extract the integer part\n    integer_part = int(number)\n    \n    # Subtract the integer part from the original number to get the decimal part\n    decimal_part = number - integer_part\n    \n    # Return the decimal part\n    return decimal_part\n\n# Testing\nprint(truncate_number(3.5))  # Expected output: 0.5\nprint(truncate_number(10.75))  # Expected output: 0.75\nprint(truncate_number(0.99))  # Expected output: 0.99\nprint(truncate_number(4.0))  # Expected output: 0.0\nprint(truncate_number(123.456))  # Expected output: 0.456"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    \n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:  # Handle empty list case\n        return 0.0\n\n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad\n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" \n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    \n    # Sort the list to facilitate comparison of consecutive elements\n    sorted_numbers = sorted(numbers)\n    \n    # Compare each pair of consecutive elements\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" \n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_nesting_level(group: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        return max_depth\n\n    if not paren_string:\n        return []\n\n    paren_groups = paren_string.split()\n    return [max_nesting_level(group) for group in paren_groups]\n"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    rolling_max_list = []\n    current_max = float('-inf')\n\n    for number in numbers:\n        current_max = max(current_max, number)\n        rolling_max_list.append(current_max)\n\n    return rolling_max_list"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    def gcd(x, y):\n        while y != 0:\n            x, y = y, x % y\n        return x\n        \n    return gcd(abs(a), abs(b))"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n        \n    return total_sum, total_product"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n        delimeter (int): An integer to insert between the elements of `numbers`.\n    \n    Returns:\n        List[int]: A new list with the `delimiter` interspersed between elements of `numbers`.\n\n    Examples:\n        >>> intersperse([], 4)\n        []\n        >>> intersperse([1, 2, 3], 4)\n        [1, 4, 2, 4, 3]\n    \"\"\"\n    # If the input list is empty or contains only one element, return it as is.\n    if len(numbers) <= 1:\n        return numbers\n    \n    # Create a new list to hold the interspersed elements\n    interspersed_list = []\n    \n    # Iterate over the numbers and add the elements along with the delimiter\n    for i in range(len(numbers)):\n        interspersed_list.append(numbers[i])\n        if i < len(numbers) - 1:  # No delimiter after the last element\n            interspersed_list.append(delimeter)\n    \n    return interspersed_list"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    \n    # Initialize an empty list to store prefixes\n    prefixes = []\n    \n    # Iterate through the string to generate prefixes\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    \n    return prefixes"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove all spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    groups = []\n    current_group = []\n    balance = 0\n    \n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        # If balance is zero, we have a complete group\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    \n    return groups\n\n# Example usage:\n# print(separate_paren_groups('( ) (( )) (( )( ))'))\n# Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" \n    Filters the given list of any Python values only for integers.\n    \n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to ensure case insensitivity\n    lower_case_string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(lower_case_string)\n    \n    # The number of distinct characters is the size of the set\n    return len(distinct_characters)\n\n# Example test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))   # Output: 4"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    # Use the built-in len function to return the length of the string.\n    return len(string)"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not substring:\n        return 0\n    \n    count = 0\n    substring_length = len(substring)\n    \n    # Traverse through the string, checking for all potential matches, including overlapping ones\n    for i in range(len(string) - substring_length + 1):\n        if string[i:i + substring_length] == substring:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    # Generate a list of numbers from 0 to n\n    number_list = [str(i) for i in range(n + 1)]\n    # Join the list into a single string with space delimiters\n    result = ' '.join(number_list)\n    return result"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings a and b have the same length\n    if len(a) != len(b):\n        raise ValueError(\"Both input strings must have the same length.\")\n    \n    # Perform XOR for each pair of characters from the strings a and b\n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a not in '01' or char_b not in '01':\n            raise ValueError(\"Both input strings must contain only '0' and '1'.\")\n        # XOR operation: 1 if the bits are different, 0 if they are the same\n        xor_result = '1' if char_a != char_b else '0'\n        result.append(xor_result)\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n\n# Example usage:\nif __name__ == \"__main__\":\n    test_result = string_xor('010', '110')\n    print(test_result)  # Output should be '100'"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    Args:\n        string (str): The input string to have its case flipped.\n    \n    Returns:\n        str: The resulting string with flipped case characters.\n    \n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n    \"\"\"\n    flipped_string = ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n    return flipped_string"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    filtered_strings = [s for s in strings if s.startswith(prefix)]\n    return filtered_strings"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # If the string is already empty or a single character, it's already a palindrome\n    if not string or len(string) == 1:\n        return string\n\n    # Identify the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Prefix is the part before the palindrome\n            prefix = string[:i]\n            # Append the reverse of prefix to the string to form palindrome\n            return string + prefix[::-1]\n    \n    # In the worst case, there is no palindromic suffix beyond a single character\n    return string + string[:-1][::-1]\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    test_cases = ['', 'cat', 'cata', 'race', 'aba', 'abac']\n    expected_results = ['', 'catac', 'catac', 'racecar', 'aba', 'abacaba']\n    \n    for string, expected in zip(test_cases, expected_results):\n        result = make_palindrome(string)\n        print(f\"make_palindrome('{string}') = '{result}' | Expected: '{expected}'\")"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" \n    For a given number n, find the largest number that divides n evenly, smaller than n.\n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start from n-1 and move downwards to find the largest divisor\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    # If we reach here, something is wrong since every number should be divisible by 1\n    return 1\n\n# Example usage\n# print(largest_divisor(15)) # Expected output: 5\n# print(largest_divisor(28)) # Expected output: 14"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Mapping from words to their corresponding numerical values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Reverse mapping for converting numbers back to numerals\n    number_to_numeral = {value: key for key, value in numeral_to_number.items()}\n    \n    # Split the input string into a list of numerals\n    numeral_list = numbers.split()\n    \n    # Convert the list of numerals to their corresponding numerical values\n    number_list = [numeral_to_number[numeral] for numeral in numeral_list]\n    \n    # Sort the list of numerical values\n    number_list.sort()\n    \n    # Convert the sorted numerical values back to their corresponding numerals\n    sorted_numeral_list = [number_to_numeral[number] for number in number_list]\n    \n    # Join the list of sorted numerals into a space-delimited string and return\n    return ' '.join(sorted_numeral_list)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    concatenated_string = ''.join(strings)\n    return concatenated_string"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        # For numbers less than 2, there's no valid prime factorization\n        return []\n\n    factors = []\n    divisor = 2\n\n    while n >= divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n\n    return factors"}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" \n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    Args:\n    numbers (List[int]): A list of integers.\n    \n    Returns:\n    List[int]: A list of integers with duplicates removed.\n    \n    Examples:\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Count the occurrences of each number in the list\n    element_counts = Counter(numbers)\n    \n    # Prepare a list with numbers that appear only once, preserving the order\n    result = [num for num in numbers if element_counts[num] == 1]\n    \n    return result"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    # Dictionary to map notes to their beat values\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the music string into individual notes\n    notes = music_string.split()\n    \n    # Map each note to its corresponding beat value using the dictionary\n    beats_list = [note_to_beats[note] for note in notes]\n    \n    return beats_list"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Edge case: if the list has less than 2 elements, raise an error\n    if len(numbers) < 2:\n        raise ValueError(\"The input list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    # Edge case: if all numbers are the same, return a list of zeros\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n    \n    # Apply the linear transformation to rescale the list\n    rescaled_numbers = [(num - min_value) / (max_value - min_value) for num in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(l)\n    # Convert the set back to a list and sort it\n    sorted_unique_elements = sorted(unique_elements)\n    # Return the sorted list\n    return sorted_unique_elements"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    \n    if not l:\n        raise ValueError(\"The list is empty, cannot find the maximum element.\")\n    \n    max_val = l[0]\n    \n    for element in l:\n        if element > max_val:\n            max_val = element\n            \n    return max_val\n\n# Example usage\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, \n    while its values at the indices that are divisible by three are equal \n    to the values of the corresponding indices of l, but sorted.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    \n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    # Extract values at indices divisible by three\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    \n    # Sort values at indices divisible by three\n    sorted_values.sort()\n    \n    # Create a new list to store the result\n    result = l.copy()\n    \n    # Replace values in the result list at indices divisible by three with sorted values\n    for i, val in zip(sorted_indices, sorted_values):\n        result[i] = val\n    \n    return result"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    if not isinstance(l, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not all(isinstance(item, (int, float)) for item in l):\n        raise ValueError(\"All elements in the list must be integers or floats\")\n    \n    incremented_list = [item + 1 for item in l]\n    return incremented_list"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    \n    if n <= 1:\n        return False\n    \n    if n <= 3:\n        return True  # 2 and 3 are prime numbers\n    \n    if n % 2 == 0 or n % 3 == 0:\n        return False  # Divisible by 2 or 3\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    \n    return True"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract even-indexed elements\n    even_indices_values = [value for index, value in enumerate(l) if index % 2 == 0]\n    \n    # Sort the even-indexed elements\n    even_indices_values.sort()\n    \n    # Create a copy of the original list to avoid modifying the original list\n    sorted_list = l[:]\n    \n    # Place sorted even-indexed values back in their positions\n    even_index = 0\n    for index, value in enumerate(l):\n        if index % 2 == 0:\n            sorted_list[index] = even_indices_values[even_index]\n            even_index += 1\n            \n    return sorted_list\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # [1, 2, 3]\nprint(sort_even([5, 6, 3, 4])) # [3, 6, 5, 4]"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    # Sort the numbers first\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to store the closest pair and the smallest difference\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    smallest_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(1, len(sorted_numbers) - 1):\n        current_diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # If there are fewer than 3 elements, return False immediately\n    if len(l) < 3:\n        return False\n    \n    # Sort the list to ease the process of finding the triplets\n    l.sort()\n    \n    # Iterate through the list, treating each element as the first element of the triplet\n    for i in range(len(l) - 2):\n        # Avoid duplicates\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        # Use two pointers to find the other two numbers\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Check if a given number is a prime number.\"\"\"\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        p = 3\n        while p * p <= num:\n            if num % p == 0:\n                return False\n            p += 2\n        return True\n    \n    def fibonacci_sequence():\n        \"\"\"Generate Fibonacci numbers indefinitely.\"\"\"\n        a, b = 0, 1\n        while True:\n            yield b\n            a, b = b, a + b\n\n    prime_fib_count = 0\n    for fib_number in fibonacci_sequence():\n        if is_prime(fib_number):\n            prime_fib_count += 1\n            if prime_fib_count == n:\n                return fib_number\n\n# Test cases to verify the implementation\nprint(prime_fib(1))  # Should return 2\nprint(prime_fib(2))  # Should return 3\nprint(prime_fib(3))  # Should return 5\nprint(prime_fib(4))  # Should return 13\nprint(prime_fib(5))  # Should return 89"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # Using the built-in pow function for efficient computation\n    return pow(2, n, p)"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive.\")\n\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(str(remainder))\n        x = x // base\n\n    # Reverse the list to have the correct representation\n    digits.reverse()\n    return ''.join(digits)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given the length of a side and the height, return the area of a triangle.\n    \n    The formula to calculate the area of a triangle is (1/2) * base * height.\n    \n    Parameters:\n    a (float): The length of the base of the triangle.\n    h (float): The height of the triangle.\n    \n    Returns:\n    float: The area of the triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(h, (int, float)):\n        raise ValueError(\"Both base and height must be numeric values.\")\n    if a <= 0 or h <= 0:\n        raise ValueError(\"Both base and height must be positive values.\")\n    \n    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n\n    Args:\n    x (int): The first integer to add.\n    y (int): The second integer to add.\n\n    Returns:\n    int: The sum of x and y.\n\n    Examples:\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns the string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import root_scalar\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and the largest non-zero coefficient as it guarantees\n    a solution.\n    \n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)   # (x - 1) * (x - 2) * (x - 3)\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List of coefficients must have an even number of elements.\")\n    \n    def polynomial(x):\n        return poly(xs, x)\n    \n    # Using the Brent's method to find root in the interval [-100, 100]\n    sol = root_scalar(polynomial, bracket=[-100, 100], method='brentq')\n    \n    if sol.converged:\n        return sol.root\n    else:\n        raise ValueError(\"No zero found in the given interval.\")\n\n# Tests (these should be put in a proper testing framework)\nassert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    # Initialize a counter for occurrences of the digit '7'\n    seven_count = 0\n\n    # Iterate through each number less than n\n    for i in range(n):\n        # Check if the number is divisible by either 11 or 13\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert the number to a string and count '7's\n            seven_count += str(i).count('7')\n    \n    # Return the total count of '7's found\n    return seven_count"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string into groups, each of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Cycle elements in each group unless the group has fewer than 3 elements\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups, each of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Cycle elements back in each group unless the group has fewer than 3 elements\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n\n# Example usage:\nencoded = encode_cyclic(\"abcdefghi\")\nprint(f\"Encoded: {encoded}\")  # Encoded: bcadefghia\n\ndecoded = decode_cyclic(\"bcadefghia\")\nprint(f\"Decoded: {decoded}\")  # Decoded: abcdefghi"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n\n    Parameters:\n    text (str): The string to check for being a palindrome.\n\n    Returns:\n    bool: True if the string is a palindrome, False otherwise.\n\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n   \n    # Normalize the text by converting to lowercase and removing non-alphanumeric characters\n    normalized_text = ''.join(char.lower() for char in text if char.isalnum())\n    \n    # Check if the normalized text is equal to its reverse\n    return normalized_text == normalized_text[::-1]\n\n# Example test cases demonstrated in the docstring\nassert is_palindrome('') == True\nassert is_palindrome('aba') == True\nassert is_palindrome('aaaaa') == True\nassert is_palindrome('zbcd') == False"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        # If balance is negative, we have a closing bracket without a matching opening bracket\n        if balance < 0:\n            return False\n    # Finally, ensure all opening brackets are closed\n    return balance == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l or len(l) == 1:\n        # An empty list or a list with one element is trivially monotonic\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list must not be empty\")\n    \n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid_index = n // 2\n    \n    if n % 2 == 0:\n        # If there are an even number of elements, median is the average of the two middle elements\n        median_value = (sorted_list[mid_index - 1] + sorted_list[mid_index]) / 2.0\n    else:\n        # If there are an odd number of elements, median is the middle element\n        median_value = sorted_list[mid_index]\n    \n    return median_value"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    # Use a set to keep track of elements we have seen\n    seen_elements = set()\n    \n    # Iterate over each element in the list\n    for number in l:\n        # Check if the negation of the current number is in the seen_elements set\n        if -number in seen_elements:\n            return True\n        # Add the current number to the seen_elements set\n        seen_elements.add(number)\n    \n    # If no pairs sum to zero are found\n    return False"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    return set_s0 == set_s1\n\n# Testing the function using the examples provided in the docstring\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    \n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the first four values of the sequence\n    fib4_sequence = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively\n    for i in range(4, n + 1):\n        next_value = fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4]\n        fib4_sequence.append(next_value)\n    \n    return fib4_sequence[n]"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        # if balance is negative, there are more closing brackets than opening ones\n        if balance < 0:\n            return False\n    # balance should be zero if all opening brackets have matching closing brackets\n    return balance == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_coeffs = []\n    for power, coeff in enumerate(xs[1:], start=1):\n        derivative_coeffs.append(power * coeff)\n    return derivative_coeffs\n\n# Examples to test the function\nprint(derivative([3, 1, 2, 4, 5])) # Should output [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))       # Should output [2, 6]\nprint(derivative([0]))             # Should output [] since the derivative of a constant is zero"}
{"task_id": "HumanEval/59", "completion": "import math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(k):\n        if k <= 1:\n            return False\n        if k <= 3:\n            return True\n        if k % 2 == 0 or k % 3 == 0:\n            return False\n        i = 5\n        while i * i <= k:\n            if k % i == 0 or k % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = -1\n\n    # Account for all the 2s that divide n\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # n must be odd at this point, thus skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n\n    # Condition to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    decoded_string = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            decoded_char = chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a'))\n            decoded_string.append(decoded_char)\n        else:\n            decoded_string.append(ch)\n    \n    return \"\".join(decoded_string)\n\n# Test examples to validate implementation\nencoded = encode_shift(\"hello world\")\nprint(encoded)  # Should print \"mjqqt btwqi\"\ndecoded = decode_shift(encoded)\nprint(decoded)  # Should print \"hello world\""}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # Use the formula for the sum of the first n natural numbers: n * (n + 1) / 2\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # The resulting list in strange order\n    result = []\n    \n    # Sort the list initially to easily access the min and max values\n    lst.sort()\n\n    # Use two pointers to handle minimum and maximum selection\n    left = 0\n    right = len(lst) - 1\n\n    # Toggle to determine whether to pick min or max next\n    pick_min = True\n    \n    while left <= right:\n        if pick_min:\n            result.append(lst[left])\n            left += 1\n        else:\n            result.append(lst[right])\n            right -= 1\n        pick_min = not pick_min\n\n    return result"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n\n    # Convert the integer x to a string\n    x_str = str(x)\n    num_digits = len(x_str)\n\n    # Handle the case where the shift is greater than the number of digits\n    if shift > num_digits:\n        return x_str[::-1]\n\n    # Perform the circular shift\n    shift = shift % num_digits  # In case shift is more than num_digits, reduce it appropriately\n    shifted_result = x_str[-shift:] + x_str[:-shift]\n\n    return shifted_result\n\n# Testing the function\nprint(circular_shift(12, 1)) # Should return \"21\"\nprint(circular_shift(12, 2)) # Should return \"12\"\nprint(circular_shift(12345, 7)) # Should return \"54321\" (shift > number of digits)\nprint(circular_shift(12345, 3)) # Should return \"34512\"\nprint(circular_shift(123456, 4)) # Should return \"345612\""}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    \n    # Convert the input lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n\n    # Convert the set of common elements back to a sorted list\n    result = sorted(common_elements)\n\n    return result"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    \n    # Convert the string to lowercase to handle case insensitivity\n    s = s.lower()\n    \n    # Define set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    \n    # Initialize vowel count\n    count = 0\n    \n    # Iterate over the string and count the vowels\n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        # Check if 'y' is a vowel when at the end of the word\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit. This basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    oranges and apples and an integer that represents the total number of the fruits \n    in the basket, return the number of mango fruits in the basket.\n    \n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    \n    # Extract numbers from the input string\n    numbers = re.findall(r'\\d+', s)\n    if len(numbers) != 2:\n        raise ValueError(\"The input string must contain exactly two numbers.\")\n    \n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    # Calculate the number of mangoes\n    mangoes = n - (apples + oranges)\n    \n    return mangoes"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exists, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    from collections import Counter\n    \n    # Count the occurrences of each number in the list\n    frequency_counter = Counter(lst)\n    \n    # Initialize a variable to store the greatest valid integer\n    greatest_valid_integer = -1\n    \n    # Iterate through the items in the frequency counter\n    for number, frequency in frequency_counter.items():\n        # Check if the number's frequency is greater than or equal to the number itself\n        if frequency >= number:\n            # Update the greatest valid integer if necessary\n            greatest_valid_integer = max(greatest_valid_integer, number)\n    \n    return greatest_valid_integer\n\n# Example Usage:\n# print(search([4, 1, 2, 2, 3, 1])) # Output: 2\n# print(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\n# print(search([5, 5, 4, 4, 4])) # Output: -1"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n\n# Examples to test\nprint(digitSum(\"\"))  # => 0\nprint(digitSum(\"abAB\"))  # => 131\nprint(digitSum(\"abcCd\"))  # => 67\nprint(digitSum(\"helloE\"))  # => 69\nprint(digitSum(\"woArBld\"))  # => 131\nprint(digitSum(\"aAaaaXa\"))  # => 153"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    \n    # Handle edge cases for small values of n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize the base values\n    fib0, fib1, fib2 = 0, 0, 1\n\n    # Iteratively compute the n-th FibFib number\n    for _ in range(3, n + 1):\n        fib_next = fib0 + fib1 + fib2\n        fib0, fib1, fib2 = fib1, fib2, fib_next\n\n    return fib2\n\n# Test cases\nif __name__ == \"__main__\":\n    print(fibfib(1))  # Output: 0\n    print(fibfib(5))  # Output: 4\n    print(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less than 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    # List of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes to see if their product equals `a`\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    # If no such combination is found, return False\n    return False"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the sides form a valid triangle using the triangle inequality theorem\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal places\n        return round(area, 2)\n    else:\n        # If the sides do not form a valid triangle, return -1\n        return -1"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n    changes_needed = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed\n\n# Example test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6])) # Expected output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))   # Expected output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))         # Expected output: 0"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    def is_palindromic(lst):\n        return lst == lst[::-1]\n    \n    if is_palindromic(q) and sum(q) <= w:\n        return True\n    return False"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum(len(string) for string in lst1)\n    \n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum(len(string) for string in lst2)\n    \n    # Compare total characters to determine which list has fewer characters\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        # If both lists have the same number of characters, return the first list\n        return lst1\n\n# Test cases to validate the implementation\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert the decimal number to binary (without '0b' prefix)\n    binary_str = bin(decimal)[2:]\n    \n    # Add the 'db' prefix and suffix\n    result = f\"db{binary_str}db\"\n    \n    return result\n\n# Examples for testing\nprint(decimal_to_binary(15))  # Should print \"db1111db\"\nprint(decimal_to_binary(32))  # Should print \"db100000db\""}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    string_length = len(string)\n    return is_prime(string_length)\n\n# Example usage:\n# print(prime_length('Hello'))   # Should return True\n# print(prime_length('abcdcba')) # Should return True\n# print(prime_length('kittens')) # Should return True\n# print(prime_length('orange'))  # Should return False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=k=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    \n    # Edge case: 1 is a power of any number (since any number to the power 0 is 1)\n    if x == 1:\n        return True\n    \n    # Edge case: x is 0. 0 can only be expressed as 0^any number, otherwise it's false.\n    if x == 0:\n        return False\n    \n    # Edge case: n is 1 but x is not 1, then it's false since 1^k = 1 always\n    if n == 1:\n        return False\n    \n    # Running division to check if x is a simple power of n\n    current_value = x\n    while current_value >= n:\n        if current_value % n != 0:\n            return False\n        current_value //= n\n\n    # If after divisions we land exactly on 1, then x is a power of n\n    return current_value == 1\n\n# Examples included in the docstring:\nprint(is_simple_power(1, 4)) # True\nprint(is_simple_power(2, 2)) # True\nprint(is_simple_power(8, 2)) # True\nprint(is_simple_power(3, 2)) # False\nprint(is_simple_power(3, 1)) # False\nprint(is_simple_power(5, 3)) # False"}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    \n    # Compute the cube root of a\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    \n    # Check if the cube of the rounded cube root equals the absolute value of a\n    if cube_root ** 3 == abs_a:\n        return True\n    else:\n        return False\n\n# Example tests\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example:\n        For N = 1000, the sum of digits will be 1, the output should be \"1\".\n        For N = 150, the sum of digits will be 6, the output should be \"110\".\n        For N = 147, the sum of digits will be 12, the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Check if N is within the allowed constraints\n    if N < 0 or N > 10000:\n        raise ValueError(\"N should be in the range 0 \u2264 N \u2264 10000.\")\n    \n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(char) for char in str(N))\n    \n    # Convert the sum to a binary string\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    def get_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [get_letter_grade(gpa) for gpa in grades]\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total_sum = 0\n    for index in range(1, len(lst), 2):  # Only iterate over odd indices\n        if lst[index] % 2 == 0:\n            total_sum += lst[index]\n    return total_sum"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1, 2, 3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= arr.length <= 10000\n        * 0 <= arr[i]\n    \"\"\"\n    if not arr:\n        return []\n\n    smallest_even_value = None\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                smallest_index = index\n            elif value == smallest_even_value and index < smallest_index:\n                smallest_index = index\n\n    if smallest_even_value is None:\n        return []\n\n    return [smallest_even_value, smallest_index]\n\n# Examples for testing\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))         # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Handle the empty array or single element array case\n    if len(array) == 0 or len(array) == 1:\n        return array.copy()\n\n    # Calculate the sum of the first and last elements of the array\n    sum_first_last = array[0] + array[-1]\n    \n    # Sort the array according to the required order\n    if sum_first_last % 2 == 0:\n        # Sum is even, sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # Sum is odd, sort in ascending order\n        return sorted(array)\n\n# Test cases from the docstring\nprint(sort_array([]))  # => []\nprint(sort_array([5]))  # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string\n    for i in range(len(s) - 2):\n        # Check if the current 3 consecutive letters are distinct\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    \n    # If we pass through all checks, the string is happy\n    return True"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    shift = 4\n    encrypted_string = []\n    \n    for char in s:\n        if 'a' <= char <= 'z':\n            new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            encrypted_string.append(new_char)\n        else:\n            # In case we need to handle other characters not specified in the docstring\n            encrypted_string.append(char)  # Keep the character as is\n    \n    return ''.join(encrypted_string)\n\n# Test cases\nprint(encrypt('hi'))  # 'lm'\nprint(encrypt('asdfghjkl'))  # 'ewhjklnop'\nprint(encrypt('gf'))  # 'kj'\nprint(encrypt('et'))  # 'ix'"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Split the input string into sentences, using the delimiters '.', '?', and '!'\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    # Initialize the counter for boredoms\n    boredom_count = 0\n\n    # Iterate through each sentence\n    for sentence in sentences:\n        # Strip leading and trailing whitespace for accurate checking\n        sentence = sentence.strip()\n\n        # Count as boredom if the sentence starts with \"I\"\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n\n    return boredom_count\n\n# Example usages:\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, number):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer number, find integers number in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    result = []\n    # Iterate through each row and column to find occurrences of 'number'\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == number:\n                result.append((row_index, col_index))\n    \n    # Sort coordinates first by rows in ascending order, and then by columns in descending order in each row\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Count for numbers starting with 1\n    start_with_one = 10 ** (n - 1)  # ranges from 10^(n-1) to 10^(n-1) + 10^(n-2) - 1\n    # e.g., for n = 2, it is 10 to 19, count is 10\n    start_with_one_count = 10 ** (n - 1)\n\n    # Count for numbers ending with 1\n    end_with_one_count = 9 * (10 ** (n - 1) // 10)  # 1, 21, 31, ..., 91 within each 10-group\n    # e.g., for n = 2, it is 1, 11, ..., 91, count is 9\n\n    # Count for numbers starting and ending with 1\n    start_and_end_with_one = 10 ** (n - 2)\n    # e.g., for n = 2, there is only one '11'\n\n    # Total count is sum of unique start and end counts minus intersection\n    total_count = start_with_one_count + end_with_one_count - start_and_end_with_one\n    return total_count"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of unit digits\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for number in range(2, n):\n        if is_prime(number):\n            primes.append(number)\n    \n    return primes"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    # Split the input string by spaces to process each word individually\n    words = s.split(' ')\n    \n    # Process each word and sort the characters\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the processed words back together with spaces\n    result = ' '.join(sorted_words)\n    \n    return result\n\n# Test the function\nprint(anti_shuffle('Hi')) # Expected: 'Hi'\nprint(anti_shuffle('hello')) # Expected: 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # Expected: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers). \n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,... \n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13). \n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the counter for prime digits\n    prime_count = 0\n\n    # Iterate through each character in the input string\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n    \n    return prime_count\n\n# Examples\nprint(hex_key(\"AB\"))           # Output: 1\nprint(hex_key(\"1077E\"))        # Output: 2\nprint(hex_key(\"ABED1A33\"))     # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))         # Output: 2"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    \n    # Initialize the list of levels with the first level containing `n` stones.\n    levels = [n]\n\n    # Determine the starting point and increment value based on the parity of `n`.\n    if n % 2 == 0:  # n is even\n        current_stones = n + 2\n        increment = 2\n    else:  # n is odd\n        current_stones = n + 2\n        increment = 2\n\n    # Generate levels based on the parity and required stones count.\n    for _ in range(n - 1):\n        levels.append(current_stones)\n        current_stones += increment\n\n    return levels"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for index, char in enumerate(s):\n        if index % 2 == 0 and char in uppercase_vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(number):\n        \"\"\"Helper function to compute the sum of digits of a given number.\"\"\"\n        return sum(int(digit) for digit in str(number))\n\n    # Filter out the prime numbers from the list.\n    prime_numbers = [num for num in lst if is_prime(num)]\n    \n    if not prime_numbers:\n        return 0  # Handle the case if there are no primes in the list.\n    \n    # Find the largest prime number.\n    largest_prime = max(prime_numbers)\n    \n    # Return the sum of its digits.\n    return sum_of_digits(largest_prime)\n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all inputs are integers\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n    \n    # Check if any one of the numbers is the sum of the other two\n    if x == y + z or y == x + z or z == x + y:\n        return True\n    \n    return False"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    def has_no_even_digit(number):\n        \"\"\"Helper function to check if the number contains any even digit\"\"\"\n        while number > 0:\n            digit = number % 10\n            if digit % 2 == 0:\n                return False\n            number //= 10\n        return True\n\n    result = [num for num in x if has_no_even_digit(num)]\n    return sorted(result)\n\n# Example usage\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    \n    if x > y:\n        return -1\n\n    # Find the largest even number in the range [x, y]\n    # If y is even, y itself might be the answer\n    if y % 2 == 0:\n        largest_even = y\n    else:\n        # If y is odd, the largest even number less than y is y-1\n        largest_even = y - 1\n    \n    # Check if this even number is within the range [x, y]\n    if largest_even >= x:\n        return largest_even\n    else:\n        return -1"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n\n    unique_elements = list(set(lst))  # Remove duplicates\n\n    if len(unique_elements) < 2:\n        return None\n\n    unique_elements.sort()  # Sort the unique elements\n\n    return unique_elements[1]  # Return the second smallest element"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    vowel_replacements = {\n        'a': 'C', 'e': 'G', 'i': 'K', 'o': 'Q', 'u': 'W',\n        'A': 'c', 'E': 'g', 'I': 'k', 'O': 'q', 'U': 'w'\n    }\n    \n    encoded_chars = []\n    for char in message:\n        if char in vowels:\n            encoded_chars.append(vowel_replacements[char])\n        elif char.islower():\n            encoded_chars.append(char.upper())\n        else:\n            encoded_chars.append(char.lower())\n    \n    return ''.join(encoded_chars)\n\n# Examples for verification\nassert encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Initialize sets to hold the case types of string keys\n    lowercase_keys = set()\n    uppercase_keys = set()\n    \n    for key in dict:\n        # Check if key is a string\n        if isinstance(key, str):\n            if key.islower():\n                lowercase_keys.add(key)\n            elif key.isupper():\n                uppercase_keys.add(key)\n    \n    # If all keys are lowercase or all are uppercase, return True\n    if (len(lowercase_keys) > 0 and len(uppercase_keys) == 0) or (len(uppercase_keys) > 0 and len(lowercase_keys) == 0):\n        return True\n    \n    return False"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Normalize commas to spaces\n    normalized_string = s.replace(',', ' ')\n    # Split the string by spaces\n    words = normalized_string.split()\n    # Return list of words\n    return words"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n\n    # Calculate the sum of the range from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of elements in the range\n    count = m - n + 1\n    \n    # Calculate the average and round it to the nearest integer\n    avg = round(total_sum / count)\n    \n    # Convert the average to binary and return it\n    return bin(avg)"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \n    total_units_of_water = 0\n    \n    # Count the total units of water in the grid\n    for row in grid:\n        for unit in row:\n            if unit == 1:\n                total_units_of_water += 1\n    \n    # Calculate the number of times the bucket needs to be lowered\n    number_of_buckets = math.ceil(total_units_of_water / capacity)\n    \n    return number_of_buckets"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result\n    \n    def sum_up_to(num):\n        return num * (num + 1) // 2\n    \n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(sum_up_to(i))\n    \n    return result_list"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    number = float(value)\n    \n    # Get the truncated (floor) integer value\n    truncated = int(number)\n    \n    # Determine the best rounding method\n    if number > 0:\n        if number - truncated == 0.5:\n            return truncated + 1\n        else:\n            return round(number)\n    elif number < 0:\n        if truncated - number == 0.5:\n            return truncated - 1\n        else:\n            return round(number)\n    else:\n        return 0\n\n# Testing the function\nprint(closest_integer(\"10\"))    # 10\nprint(closest_integer(\"15.3\"))  # 15\nprint(closest_integer(\"14.5\"))  # 15\nprint(closest_integer(\"-14.5\")) # -15"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(number):\n        \"\"\"Check if a number is a palindrome.\"\"\"\n        str_number = str(number)\n        return str_number == str_number[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n\n    letter_count = {}\n    letters = test.split()\n    \n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n            \n    max_count = max(letter_count.values())\n    most_frequent_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n\n    return most_frequent_letters"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise ValueError(\"The input list cannot be empty.\")\n    \n    current_min = float('inf')\n    global_min = float('inf')\n    \n    for num in nums:\n        current_min = min(num, current_min + num)\n        global_min = min(global_min, current_min)\n    \n    return global_min\n\n# Example Usage\n# print(minSubArraySum([2, 3, 4, 1, 2, 4])) # Expected output: 1\n# print(minSubArraySum([-1, -2, -3])) # Expected output: -6"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Dictionary mapping integers to their corresponding names\n    name_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter out only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Replace each integer by its corresponding name\n    result = [name_map[num] for num in reversed_arr]\n\n    return result\n\n# Examples to demonstrate the function\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nprint(by_length([]))                        # []\nprint(by_length([1, -1, 55]))               # [\"One\"]"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the resulting string is a palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\" the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n\n    # Remove characters from `s` that are in `c`\n    filtered_string = ''.join(char for char in s if char not in c)\n    \n    # Check if the filtered string is a palindrome\n    is_palindrome = filtered_string == filtered_string[::-1]\n    \n    # Return the result string and the palindrome check result\n    return (filtered_string, is_palindrome)\n\n# Example test cases to verify the function\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n\n    n = len(arr)\n    # Find the point where the sorted order breaks\n    break_point = -1\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            break_point = i\n            break\n    \n    # If no break point found, the array is already sorted\n    if break_point == -1:\n        return True\n    \n    # Check if shifting the break point to the end makes the array sorted\n    shifted_array = arr[break_point + 1:] + arr[:break_point + 1]\n    return shifted_array == sorted(arr)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    def sum_of_signed_digits(num):\n        num_str = str(num)\n        total = 0\n        if num_str[0] == '-':\n            total = -int(num_str[1])  # First digit is negative\n            num_str = num_str[2:]  # Remove sign and the first digit\n        for digit in num_str:\n            total += int(digit)\n        return total\n    \n    count = 0\n    for num in arr:\n        if sum_of_signed_digits(num) > 0:\n            count += 1\n    \n    return count\n\n# Example test cases\nprint(count_nums([]))  # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))  # Output: 3"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    # Initialize variable to store the sum of odd elements at even indices\n    odd_sum = 0\n    \n    # Iterate through the list with enumeration to get both index and value\n    for index, value in enumerate(lst):\n        # Check if the current index is even and the value is odd\n        if index % 2 == 0 and value % 2 != 0:\n            odd_sum += value\n    \n    return odd_sum\n\n# Example usage\nprint(solution([5, 8, 7, 1]))  # Should return 12\nprint(solution([3, 3, 3, 3, 3]))  # Should return 9\nprint(solution([30, 13, 24, 321]))  # Should return 0"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    \n    # Find the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Find the number of even elements in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # Determine if we can make all elements in lst1 even\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Examples to test the function\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n    n = len(word)\n    \n    # We need to check for vowels between consonants, so we iterate from the end\n    for i in range(n - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    \n    return \"\"\n\n# Examples for testing the implementation\nprint(get_closest_vowel(\"yogurt\"))  # ==> \"u\"\nprint(get_closest_vowel(\"FULL\"))    # ==> \"U\"\nprint(get_closest_vowel(\"quick\"))   # ==> \"\"\nprint(get_closest_vowel(\"ab\"))      # ==> \"\""}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    # Handle the edge case of empty array\n    if not arr:\n        return []\n    \n    # Create the sort criteria (count of '1's in binary and then by the number itself)\n    sort_criteria = [(bin(num).count('1'), num) for num in arr]\n    \n    # Sort by criteria: first by count of '1's, then by decimal value\n    sorted_criteria = sorted(sort_criteria)\n    \n    # Extract and return the sorted numbers based on the criteria\n    sorted_arr = [num for _, num in sorted_criteria]\n    return sorted_arr"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if char in '13579')\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    return result\n\n# Examples:\nprint(odd_count(['1234567']))  # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', '11111111']))  # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    if not lst or len(lst) == 1:\n        return True\n\n    last_seen = {}\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] in last_seen:\n            last_seen[lst[i]] += 1\n            if last_seen[lst[i]] > 1:\n                return False\n        else:\n            last_seen[lst[i]] = 0\n\n    return True"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(min(k, len(arr))):\n        if -99 <= arr[i] <= 99:\n            total_sum += arr[i]\n    return total_sum\n\n# Example usage\nprint(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)) # Output should be 24 (21 + 3)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    \n    collatz_sequence = []\n    \n    # Generate the Collatz sequence\n    while n != 1:\n        if n % 2 != 0:  # If n is odd, add to the list\n            collatz_sequence.append(n)\n        n = 3 * n + 1 if n % 2 != 0 else n // 2\n    \n    collatz_sequence.append(1)  # Include 1 at the end of the sequence as per Collatz conjecture\n    collatz_sequence = [x for x in collatz_sequence if x % 2 != 0]  # Filter for odd numbers\n    \n    return sorted(collatz_sequence)\n\n# Examples to test the function implementation\nprint(get_odd_collatz(5))  # Output should be [1, 5]\nprint(get_odd_collatz(6))  # Output should be [1, 3]"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    \n    # Find the k largest elements and then sort them\n    top_k_elements = sorted(arr, reverse=True)[:k]\n    \n    # Sort the result to meet the requirement `sorted list`\n    return sorted(top_k_elements)\n\n# Example usage:\n# print(maximum([-3, -4, 5], 3))   # should output [-4, -3, 5]\n# print(maximum([4, -4, 4], 2))    # should output [4, 4]\n# print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # should output [2]"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if 'a' <= char <= 'z' and (ord(char) - ord('a')) % 2 == 1:\n                odd_count += 1\n        return odd_count\n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tribonacci_number(k, memo):\n        if k in memo:\n            return memo[k]\n\n        if k == 1:\n            result = 3\n        elif k % 2 == 0:\n            result = 1 + k / 2\n        else:\n            result = (\n                tribonacci_number(k - 1, memo)\n                + tribonacci_number(k - 2, memo)\n                + tribonacci_number(k + 1, memo)\n            )\n        \n        memo[k] = result\n        return result\n\n    memo = {}\n    sequence = []\n    for i in range(n + 1):\n        sequence.append(tribonacci_number(i, memo))\n    \n    return sequence\n\n# Example usage\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    # Define a set of vowels\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Function to count the number of consonants in a word\n    def count_consonants(word):\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    # Collect words with the exact number of consonants\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n\n# Examples from the docstring\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))  # []\nprint(select_words(\"Hello world\", 4))  # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))  # [\"Uncle\"]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    # Initialize the product to 1 (multiplicative identity) and a flag to check if there are odd digits\n    product = 1\n    has_odd_digit = False\n    \n    # Iterate through each digit in the integer\n    while n > 0:\n        digit = n % 10  # Get the last digit of n\n        if digit % 2 != 0:\n            product *= digit\n            has_odd_digit = True\n        n //= 10  # Remove the last digit from n\n    \n    if not has_odd_digit:\n        return 0\n    return product\n\n# Example test cases\nprint(digits(1))    # Expected output: 1\nprint(digits(4))    # Expected output: 0\nprint(digits(235))  # Expected output: 15"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n\n    return result"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If at any point we have more closing than opening, it's unbalanced\n            if balance < 0:\n                return False\n        return balance == 0\n        \n    str1, str2 = lst[0], lst[1]\n    # Check both possible concatenations\n    if is_balanced(str1 + str2) or is_balanced(str2 + str1):\n        return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:  # num == 0\n            sign_product = 0\n        magnitude_sum += abs(num)\n    \n    return magnitude_sum * sign_product"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    def to_float(value):\n        \"\"\"Convert a numeric string (with ',' or '.') to a float if necessary.\"\"\"\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return value\n\n    # Convert both values to floats for comparison purposes\n    a_float = to_float(a)\n    b_float = to_float(b)\n    \n    # Compare the two floating point representations\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n\n# Test cases with expected outcomes:\nprint(compare_one(1, 2.5))       # \u279e 2.5\nprint(compare_one(1, \"2,3\"))     # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))   # \u279e \"6\"\nprint(compare_one(\"1\", 1))       # \u279e None"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    # This means there's still an opening bracket unmatched\n                    return True\n            else:\n                # This means we have unmatched closing bracket\n                return False\n    \n    # If we complete the loop without returning True, we check if stack is empty\n    return False\n\n# Testing cases\nprint(is_nested('[[]]'))         # \u279e True\nprint(is_nested('[]]]]]]][[[[[]')) # \u279e False\nprint(is_nested('[][]'))         # \u279e False\nprint(is_nested('[]'))           # \u279e False\nprint(is_nested('[[][]]'))       # \u279e True\nprint(is_nested('[[]][['))       # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    \n    sum_of_squares = 0\n    \n    for number in lst:\n        # Round up to the nearest integer\n        rounded_number = math.ceil(number)\n        # Square the rounded number\n        squared_number = rounded_number ** 2\n        # Add the squared number to the total sum\n        sum_of_squares += squared_number\n    \n    return sum_of_squares"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    from collections import deque\n\n    def neighbors(x, y, N):\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                yield nx, ny\n\n    N = len(grid)\n    min_path = None\n\n    for r in range(N):\n        for c in range(N):\n            stack = deque([(r, c, [grid[r][c]])])\n            while stack:\n                x, y, path = stack.pop()\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path\n                else:\n                    for nx, ny in sorted(neighbors(x, y, N), key=lambda p: grid[p[0]][p[1]]):\n                        stack.append((nx, ny, path + [grid[nx][ny]]))\n                    \n    return min_path"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    # Strip trailing spaces\n    txt = txt.rstrip()\n\n    # If the string is empty after stripping, return False\n    if not txt:\n        return False\n\n    # Get the last character\n    last_char = txt[-1]\n\n    # Check if the last character is an alphabetical character\n    if last_char.isalpha():\n        # Ensure the character is not part of a word\n        if len(txt) == 1 or txt[-2] == ' ':\n            return True\n\n    return False\n\n# Test cases to validate the function work correctly\nassert check_if_last_char_is_a_letter(\"apple pie\") == False\nassert check_if_last_char_is_a_letter(\"apple pi e\") == True\nassert check_if_last_char_is_a_letter(\"apple pi e \") == False\nassert check_if_last_char_is_a_letter(\"\") == False\nassert check_if_last_char_is_a_letter(\"a\") == True\nassert check_if_last_char_is_a_letter(\"a b\") == True\nassert check_if_last_char_is_a_letter(\"a b \") == False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Iterate backwards through the list to find the largest such index.\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Examples to validate the function\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1\nprint(can_arrange([5, 4, 3, 2, 1]))  # Output: 4\nprint(can_arrange([1]))              # Output: -1\nprint(can_arrange([2, 1]))           # Output: 1"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Each even number is at least 2 and we need 4 of them\n    min_sum_of_4_evens = 2 * 4  # This equates to 8\n\n    # Check if n is less than the minimum sum of four even positive numbers\n    if n < min_sum_of_4_evens:\n        return False\n\n    # Check if n is even since the sum of even numbers must be even\n    return n % 2 == 0"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Split the text into segments where consecutive spaces are treated as single delimiters\n    segments = text.split(' ')\n    \n    # Initialize an empty list to store the transformed segments\n    result = []\n    \n    # Initialize a count for consecutive spaces\n    consecutive_spaces = 0\n    \n    for segment in segments:\n        if segment == \"\":\n            # Increment the consecutive_spaces counter for each empty segment\n            consecutive_spaces += 1\n        else:\n            # Process non-empty segments\n            if consecutive_spaces == 1:\n                # If previously there was exactly one space, add an underscore\n                result.append('_')\n            elif consecutive_spaces > 1:\n                # If there were more than one consecutive spaces, add a hyphen\n                result.append('-')\n            \n            # Add the current non-empty segment and reset the consecutive_spaces counter\n            result.append(segment)\n            consecutive_spaces = 0\n            \n    # If the string ends in spaces, we need to process it accordingly\n    if consecutive_spaces == 1:\n        result.append('_')\n    elif consecutive_spaces > 1:\n        result.append('-')\n    \n    return ''.join(result)"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digit_sum(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a number.\n        Handles negative numbers by taking absolute value.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Create a list of tuples where each tuple is (digit_sum, original_index, number)\n    enriched_list = [(digit_sum(num), i, num) for i, num in enumerate(nums)]\n    \n    # Sort based on the first element of the tuple (digit_sum),\n    # and if they're equal, it will sort based on the second element (original_index)\n    enriched_list.sort()\n\n    # Extract the original numbers in the new order\n    sorted_nums = [item[2] for item in enriched_list]\n\n    return sorted_nums\n\n# Examples to demonstrate functionality\nprint(order_by_points([1, 11, -1, -11, -12]))   # Expected: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                      # Expected: []"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name_part, extension = file_name.split('.')\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if the name part starts with a latin alphabet letter and is not empty\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check for more than three digits in the name part\n    digit_count = sum(char.isdigit() for char in name_part)\n    if digit_count > 3:\n        return 'No'\n\n    # All checks passed\n    return 'Yes'\n\n# Example Usages\nprint(file_name_check(\"example.txt\"))  # Output: 'Yes'\nprint(file_name_check(\"1example.dll\")) # Output: 'No'"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n\n    count = 0\n    for num in nums:\n        absolute_num_str = str(abs(num))\n        if num > 10 and is_odd_digit(absolute_num_str[0]) and is_odd_digit(absolute_num_str[-1]):\n            count += 1\n\n    return count\n\n# Example usage\nprint(specialFilter([15, -73, 14, -15]))  # Output should be 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output should be 2"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    # Check if the string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is correct\n    parts = date.split(\"-\")\n    if len(parts) != 3:\n        return False\n    if len(parts[0]) != 2 or len(parts[1]) != 2 or len(parts[2]) != 4:\n        return False\n    \n    try:\n        month = int(parts[0])\n        day = int(parts[1])\n        year = int(parts[2])\n    except ValueError:\n        return False\n    \n    # Check if month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Days in each month\n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31,\n        6: 30, 7: 31, 8: 31, 9: 30, 10: 31,\n        11: 30, 12: 31\n    }\n    \n    # Check if day is valid for the given month\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True\n\n# Examples (for testing purposes)\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"Check if the input number is a prime number.\"\"\"\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # should return 34\nprint(x_or_y(15, 8, 5))   # should return 5"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    \n    # List of planets in the order of their distance from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Ensure both planet1 and planet2 are in the list of planets\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the given planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Identify the start and end indices for slicing\n    start_index = min(index1, index2) + 1\n    end_index = max(index1, index2)\n    \n    # Return the slice of the list that contains the planets in between\n    return tuple(planets[start_index:end_index])\n"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is a prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    \n    # Unpack intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the intersection\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if there's an intersection\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Testing the function\nprint(intersection((1, 2), (2, 3))) # \"NO\"\nprint(intersection((-1, 1), (0, 4))) # \"NO\"\nprint(intersection((-3, -1), (-5, 5))) # \"YES\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    \n    # Parse the fractions\n    x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    \n    # Check if the resulting fraction is a whole number\n    return result_numerator % result_denominator == 0"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number n is prime\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while (i * i) <= n:\n        if (n % i == 0) or (n % (i + 2) == 0):\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage:\n# print(words_in_sentence(\"This is a test\"))  # Output: \"is\"\n# print(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    modified_list = []\n    \n    for idx, value in enumerate(lst):\n        if idx % 3 == 0:\n            # Index is a multiple of 3, so square the value\n            modified_list.append(value ** 2)\n        elif idx % 4 == 0:\n            # Index is a multiple of 4 and not a multiple of 3, so cube the value\n            modified_list.append(value ** 3)\n        else:\n            # Neither condition, so keep the value unchanged\n            modified_list.append(value)\n    \n    return sum(modified_list)\n\n# Example usage:\n# print(sum_squares([1,2,3]))  # Should return 6\n# print(sum_squares([]))  # Should return 0\n# print(sum_squares([-1,-5,2,-1,-5]))  # Should return -126"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    \n    # Step 1: Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Step 2: Sort the filtered list; first by length and then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda s: (len(s), s))\n    \n    return sorted_list\n\n# Examples\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # Output: [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # Output: [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n       even_odd_count(-12) ==> (1, 1)\n       even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(abs(num))\n    \n    even_count = 0\n    odd_count = 0\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Expected output: (1, 1)\nprint(even_odd_count(123))  # Expected output: (1, 2)\nprint(even_odd_count(0))    # Expected output: (1, 0)\nprint(even_odd_count(2468)) # Expected output: (4, 0)\nprint(even_odd_count(1357)) # Expected output: (0, 4)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Define a dictionary that maps integer values to their corresponding Roman numerals\n    int_to_roman_dict = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n    \n    # Initialize result string\n    roman_numeral = \"\"\n    \n    # Iterate through the dictionary and build the Roman numeral\n    for value, numeral in int_to_roman_dict:\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n            \n    # Return the result in lowercase as required\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Encode the text to bytes, then update the hash object\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal digest of the hash\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    \n    if n < 3:\n        return 0\n\n    # Generate the sequence based on the provided formula\n    sequence = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Count the frequency of elements modulo 3\n    mod_0_count = 0\n    mod_1_count = 0\n    mod_2_count = 0\n\n    for value in sequence:\n        if value % 3 == 0:\n            mod_0_count += 1\n        elif value % 3 == 1:\n            mod_1_count += 1\n        elif value % 3 == 2:\n            mod_2_count += 1\n\n    # Count the number of valid triples\n    count = 0\n\n    # We need to count valid triples (i, j, k) such that their sum is a multiple of 3:\n    # Three elements whose sums are all modulo 3 == 0\n    if mod_0_count >= 3:\n        count += (mod_0_count * (mod_0_count - 1) * (mod_0_count - 2)) // 6\n\n    # Combination of one element from each modulo group\n    count += mod_0_count * mod_1_count * mod_2_count\n\n    # Three elements whose sums are all modulo 3 == 1\n    if mod_1_count >= 3:\n        count += (mod_1_count * (mod_1_count - 1) * (mod_1_count - 2)) // 6\n\n    # Three elements whose sums are all modulo 3 == 2\n    if mod_2_count >= 3:\n        count += (mod_2_count * (mod_2_count - 1) * (mod_2_count - 2)) // 6\n\n    return count"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \n    Examples:\n    solve(\"1234\") -> \"4321\"\n    solve(\"ab\") -> \"AB\"\n    solve(\"#a@C\") -> \"#A@c\"\n    \"\"\"\n    \n    # Check if there are any letters in the string\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # If there are letters, reverse their cases\n        result = ''.join(\n            char.lower() if char.isupper() else char.upper() if char.islower() else char\n            for char in s\n        )\n    else:\n        # If there are no letters, reverse the string\n        result = s[::-1]\n    \n    return result\n"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    \n    # Initialize result list\n    differences = []\n    \n    # Loop through the lengths of the game and guess arrays\n    for i in range(len(game)):\n        # Check if the guess is correct\n        if game[i] == guess[i]:\n            differences.append(0)\n        else:\n            differences.append(abs(game[i] - guess[i]))\n    \n    return differences"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is a right angle or \n    90 degrees.\n    \n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    \n    # Ensure inputs are non-negative and all sides are greater than 0\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Sort the sides to identify the longest side (hypotenuse) as the last element\n    sides = sorted([a, b, c])\n    \n    # Check the Pythagorean theorem a^2 + b^2 = c^2\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage for testing:\nprint(right_angle_triangle(3, 4, 5))  # Should return True\nprint(right_angle_triangle(1, 2, 3))  # Should return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    # Initialize variables to keep track of the maximum unique characters and the best word\n    max_unique_chars = -1\n    best_word = \"\"\n\n    for word in words:\n        # Calculate the number of unique characters in the current word\n        num_unique_chars = len(set(word))\n\n        # Determine if this word has more unique characters or should be chosen by lexicographical order\n        if num_unique_chars > max_unique_chars or (num_unique_chars == max_unique_chars and word < best_word):\n            max_unique_chars = num_unique_chars\n            best_word = word\n\n    return best_word"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 == 1:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n# Test cases to validate the correctness of the function\nprint(double_the_difference([1, 3, 2, 0]))  # Expected output: 10\nprint(double_the_difference([-1, -2, 0]))   # Expected output: 0\nprint(double_the_difference([9, -2]))       # Expected output: 81\nprint(double_the_difference([0]))           # Expected output: 0\nprint(double_the_difference([]))            # Expected output: 0\nprint(double_the_difference([1.1, 3, 5]))   # Expected output: 34 (3^2 + 5^2)\nprint(double_the_difference(['a', 7, 5]))   # Expected output: 74 (7^2 + 5^2)\nprint(double_the_difference([2, 4, 6]))     # Expected output: 0"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots that exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        total_eaten = number + need\n        carrots_left = remaining - need\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b for proper range generation.\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Initialize result list\n    even_integers = []\n    \n    # Iterate from start to end (inclusive) to collect even integers\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            even_integers.append(num)\n    \n    return even_integers\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    def compute_strength(extension):\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    for extension in extensions:\n        strength = compute_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Edge case: if b is empty, return False (non-empty a)\n    if not b:\n        return False\n\n    # Generate all rotations of 'b'\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n\n    # Check if any rotation is a substring in 'a'\n    for rotation in rotations:\n        if rotation in a:\n            return True\n            \n    return False"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    \n    # Ensure inputs are valid based on provided docstring constraints\n    assert len(operator) == len(operand) - 1, \"The length of the operator list must be one less than the length of the operand list.\"\n    assert all(isinstance(op, int) and op >= 0 for op in operand), \"Operands must be non-negative integers.\"\n    assert len(operand) >= 2, \"Operand list must have at least two elements.\"\n    assert len(operator) > 0, \"Operator list must have at least one element.\"\n    \n    # Initialize expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and the remaining operands to build the algebraic expression\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    \n    # Evaluate the built expression\n    result = eval(expression)\n    \n    return result\n\n# Example Usage\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # Output: 9"}
