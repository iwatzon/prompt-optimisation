{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef calculate_sum(numbers: List[int]) -> int:\n    \"\"\"Calculate the sum of a list of integers.\n    \n    :param numbers: List of integers.\n    :return: Sum of the integers.\n    \"\"\"\n    return sum(numbers)\n\ndef calculate_product(numbers: List[int]) -> int:\n    \"\"\"Calculate the product of a list of integers.\n    \n    :param numbers: List of integers.\n    :return: Product of the integers. If list is empty, return 1.\n    \"\"\"\n    product = 1\n    for number in numbers:\n        product *= number\n    return product\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    \n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    :param numbers: List of integers to calculate sum and product.\n    :return: Tuple containing sum and product of the list of integers.\n    \n    >>> sum_product([])\n    (0, 1)\n    \n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = calculate_sum(numbers)\n    total_product = calculate_product(numbers)\n    return total_sum, total_product"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef contains_substring(s: str, substring: str) -> bool:\n    \"\"\"\n    Check if a given substring is present in the string.\n\n    Args:\n    s (str): The string to be checked.\n    substring (str): The substring to look for.\n\n    Returns:\n    bool: True if substring is in s, False otherwise.\n    \"\"\"\n    return substring in s\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n\n    Args:\n    strings (List[str]): The list of strings to filter.\n    substring (str): The substring to filter by.\n\n    Returns:\n    List[str]: A list of strings containing the substring.\n\n    Examples:\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Using list comprehension to filter strings matching condition\n    return [s for s in strings if contains_substring(s, substring)]"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    def get_integer_part(num: float) -> int:\n        \"\"\"\n        Return the integer part of the given floating point number.\n        \"\"\"\n        return int(num)\n    \n    def get_decimal_part(num: float, int_part: int) -> float:\n        \"\"\"\n        Return the decimal part of the floating point number by subtracting \n        the integer part from the original number.\n        \"\"\"\n        return num - int_part\n\n    # Main logic of truncate_number\n    # Get the integer part of the number\n    integer_part = get_integer_part(number)\n    # Calculate the decimal part by subtracting the integer part from the original number\n    decimal_part = get_decimal_part(number, integer_part)\n    return decimal_part\n\n# Example usage\nprint(truncate_number(3.5))  # Output should be 0.5"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    \n    def remove_spaces(input_string: str) -> str:\n        \"\"\" Remove all spaces from the input string \"\"\"\n        return input_string.replace(' ', '')\n    \n    def split_into_groups(cleaned_string: str) -> List[str]:\n        \"\"\" Split input into groups of balanced parentheses \"\"\"\n        groups = []\n        balance = 0\n        current_group = []\n        \n        for char in cleaned_string:\n            current_group.append(char)\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n\n            # When balance is 0, we have a balanced group\n            if balance == 0 and current_group:\n                groups.append(''.join(current_group))\n                current_group = []  # Reset for the next group\n        \n        return groups\n    \n    # First, remove all spaces from input\n    cleaned_string = remove_spaces(paren_string)\n    \n    # Then, split the cleaned string into groups of balanced parentheses\n    return split_into_groups(cleaned_string)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of the account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n    Parameters:\n    operations (List[int]): A list of integers where positive values are deposits and negative values are withdrawals.\n    \n    Returns:\n    bool: True if the balance falls below zero at any point, False otherwise.\n    \n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    \n    def update_balance(current_balance: int, operation: int) -> int:\n        \"\"\"\n        Updates and returns the new balance after applying a single operation.\n        \n        Parameters:\n        current_balance (int): The current balance of the account.\n        operation (int): The operation to be applied (positive for deposit, negative for withdrawal).\n        \n        Returns:\n        int: The new balance after applying the operation.\n        \"\"\"\n        return current_balance + operation\n\n    def check_below_zero(operations: List[int]) -> bool:\n        \"\"\"\n        Checks if the balance falls below zero at any point during the operations.\n        \n        Parameters:\n        operations (List[int]): A list of integers representing the operations on the account.\n        \n        Returns:\n        bool: True if the balance falls below zero at any point, False otherwise.\n        \"\"\"\n        balance = 0\n        for operation in operations:\n            balance = update_balance(balance, operation)\n            if balance < 0:\n                return True\n        return False\n\n    # Main logic\n    return check_below_zero(operations)"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome.\"\"\"\n    return string == string[::-1]\n\ndef find_longest_palindromic_suffix(string: str) -> str:\n    \"\"\"Find the longest palindromic suffix in the given string.\"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:]\n    return ''\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    \n    Algorithm:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    Args:\n    string (str): The input string\n    \n    Returns:\n    str: The shortest palindrome starting with the supplied string\n    \n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    \n    # Step 1: Find the longest palindromic suffix\n    longest_palindromic_suffix = find_longest_palindromic_suffix(string)\n    \n    # Step 2: Determine the prefix that needs to be appended in reverse\n    prefix_length = len(string) - len(longest_palindromic_suffix)\n    prefix_to_reverse = string[:prefix_length]\n    \n    # Step 3: Append the reverse of the prefix to the original string\n    palindrome = string + prefix_to_reverse[::-1]\n    \n    return palindrome"}
{"task_id": "HumanEval/13", "completion": "def gcd_helper(a: int, b: int) -> int:\n    \"\"\"\n    Helper function to recursively find the greatest common divisor using Euclid's algorithm.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: Greatest common divisor of a and b.\n    \"\"\"\n    # Base case: if b is 0, gcd is a\n    if b == 0:\n        return a\n    # Recursive step: gcd of b and the remainder of a divided by b\n    return gcd_helper(b, a % b)\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \n    Return the greatest common divisor of two integers a and b.\n\n    This function uses Euclid's algorithm, which is efficient and has a time complexity \n    of O(log(min(a, b))). The solution is broken down into a helper function `gcd_helper`\n    to encapsulate the recursion logic.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: Greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Ensure the inputs are positive\n    a = abs(a)\n    b = abs(b)\n    \n    # Special cases when either a or b is zero\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    # Use helper function to get the gcd\n    return gcd_helper(a, b)"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef calculate_mean(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the mean (average) of a list of numbers.\n    \n    :param numbers: A list of float numbers.\n    :return: The mean of the numbers.\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\n\ndef calculate_absolute_differences(numbers: List[float], mean: float) -> List[float]:\n    \"\"\"\n    Calculate the absolute differences between each number in the list and the mean.\n    \n    :param numbers: A list of float numbers.\n    :param mean: The mean value to compare against.\n    :return: A list of absolute differences.\n    \"\"\"\n    return [abs(num - mean) for num in numbers]\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate the Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case).\n    \n    :param numbers: A list of float numbers.\n    :return: The mean absolute deviation of the numbers.\n    \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if len(numbers) == 0:\n        return 0  # Edge case: empty list\n    \n    mean = calculate_mean(numbers)\n    absolute_differences = calculate_absolute_differences(numbers, mean)\n    return calculate_mean(absolute_differences)\n\n\n# Example usage:\n# result = mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# print(result)  # Output: 1.0"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    def xor_bit(bit1: str, bit2: str) -> str:\n        \"\"\"\n        Perform binary XOR operation on two single bit strings.\n        Args:\n        - bit1: A single character string, either '0' or '1'.\n        - bit2: A single character string, either '0' or '1'.\n        \n        Returns:\n        A single character string, either '0' or '1' which is the result of XOR operation.\n        \"\"\"\n        # XOR rules: 1 XOR 0 = 1, 0 XOR 1 = 1, 0 XOR 0 = 0, 1 XOR 1 = 0\n        return '1' if bit1 != bit2 else '0'\n    \n    def pad_strings(a: str, b: str) -> (str, str):\n        \"\"\"\n        Pads the shorter string with leading zeros so that both strings have the same length.\n        Args:\n        - a: First input string\n        - b: Second input string\n\n        Returns:\n        Tuple of the two strings padded to the same length\n        \"\"\"\n        max_length = max(len(a), len(b))\n        return a.zfill(max_length), b.zfill(max_length)\n    \n    # Pad strings to be of equal length\n    a, b = pad_strings(a, b)\n    \n    # Perform XOR operation on each bit\n    result = [xor_bit(a[i], b[i]) for i in range(len(a))]\n    \n    # Join the result list into a string and return\n    return ''.join(result)\n\n# Example usage with doctest:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef generate_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Generate a list of all prefixes from shortest to longest of the input string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    List[str]: A list of all prefixes from shortest to longest.\n    \"\"\"\n    # List to store the prefixes\n    prefixes = []\n    # Iterate through the string to generate prefixes\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    List[str]: A list of all prefixes from shortest to longest.\n\n    Examples:\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    if not string:\n        # Handle edge case where the input string is empty\n        return []\n    # Generate and return all prefixes using the helper function\n    return generate_prefixes(string)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef compute_rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Helper function to compute the rolling maximum from a list of integers.\n    Args:\n        numbers (List[int]): A list of integers.\n    Returns:\n        List[int]: A list containing the rolling maximum values.\n    \"\"\"\n    if not numbers:\n        return []\n\n    rolling_max_list = []\n    current_max = numbers[0]\n    \n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        List[int]: A list of rolling maximums at each index up to the current index.\n    \n    Examples:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    return compute_rolling_max(numbers)\n\n# Simple test run\nif __name__ == \"__main__\":\n    print(rolling_max([1, 2, 3, 2, 3, 4, 2])) # Output should be [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the input string into separate parenthesis groups\n    groups = paren_string.split()\n\n    return [max_nesting_level(group) for group in groups]\n\ndef max_nesting_level(paren_group: str) -> int:\n    \"\"\" Calculate the maximum level of nesting in a single group of parentheses.\n\n    >>> max_nesting_level('(()())')\n    2\n    >>> max_nesting_level('((()))')\n    3\n    >>> max_nesting_level('()')\n    1\n    >>> max_nesting_level('((())()())')\n    3\n    \"\"\"\n    current_level = 0\n    max_level = 0\n    # Traverse through the parenthesis string to calculate nesting levels\n    for char in paren_group:\n        if char == '(':\n            current_level += 1\n            if current_level > max_level:\n                max_level = current_level\n        elif char == ')':\n            if current_level > 0:\n                current_level -= 1\n            else:\n                raise ValueError(\"Unmatched closing parenthesis found.\")\n    \n    if current_level != 0:\n        raise ValueError(\"Unmatched opening parenthesis found.\")\n\n    return max_level"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" \n    Check if in given list of numbers, any two numbers are closer to each other than\n    the given threshold.\n    \n    Parameters:\n    numbers (List[float]): A list of floating point numbers.\n    threshold (float): A floating point threshold value.\n    \n    Returns:\n    bool: True if there are any two numbers in the list closer than the threshold, False otherwise.\n    \n    Examples:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    \n    def closer_than_threshold(num1: float, num2: float, threshold: float) -> bool:\n        \"\"\"\n        Check if the absolute difference between two numbers is less than a given threshold.\n        \n        Parameters:\n        num1 (float): First number\n        num2 (float): Second number\n        threshold (float): The threshold\n        \n        Returns:\n        bool: True if the difference is less than the threshold, False otherwise.\n        \"\"\"\n        return abs(num1 - num2) < threshold\n    \n    def find_close_pairs(numbers: List[float], threshold: float) -> bool:\n        \"\"\"\n        Check if there is any pair of numbers in the list that are closer than the given threshold.\n        \n        Parameters:\n        numbers (List[float]): A list of floating point numbers.\n        threshold (float): The threshold\n        \n        Returns:\n        bool: True if any two numbers are closer than the threshold, False otherwise.\n        \"\"\"\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                if closer_than_threshold(numbers[i], numbers[j], threshold):\n                    return True\n        return False\n\n    # Early exit for empty list or a list with a single element\n    if len(numbers) < 2:\n        return False\n\n    return find_close_pairs(numbers, threshold)\n    \n# Tests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one.\n    Return the first one in case of multiple strings of the same length.\n    Return None in case the input list is empty.\n    \n    Args:\n    strings (List[str]): List of strings to evaluate.\n    \n    Returns:\n    Optional[str]: The longest string in the list, or None if the list is empty.\n    \n    Examples:\n    >>> longest([])\n    None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:  # Handle the edge case of an empty list\n        return None\n    \n    max_length = -1\n    longest_string = None\n    \n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    \n    return longest_string\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \n    Args:\n        n (int): The upper limit of the sequence.\n    \n    Returns:\n        str: A string with space-separated numbers from 0 to n.\n    \n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(generate_number_sequence(n))\n\n\ndef generate_number_sequence(n: int) -> list:\n    \"\"\"Generate a sequence of numbers from 0 to n inclusive.\n    \n    Args:\n        n (int): The upper limit of the sequence.\n    \n    Returns:\n        list: A list of strings representing the numbers from 0 to n.\n    \"\"\"\n    return [str(i) for i in range(n + 1)]\n\n\n# Trade-offs:\n# - The use of list and join operations may not be the most memory efficient for very large numbers of n,\n#   but it ensures simplicity and readability.\n# - Breaking down the code into smaller functions aids in reusability and testing, at the potential cost of\n#   minor overhead due to additional function calls."}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return count_unique_chars(normalize_string(string))\n\n\ndef normalize_string(string: str) -> str:\n    \"\"\"\n    Convert a string to lowercase.\n\n    :param string: The string to normalize\n    :return: The lowercase equivalent of the input string\n\n    >>> normalize_string('AbCDef')\n    'abcdef'\n    >>> normalize_string('Hello!')\n    'hello!'\n    \"\"\"\n    return string.lower()\n\n\ndef count_unique_chars(string: str) -> int:\n    \"\"\"\n    Count the number of distinct characters in a string.\n\n    :param string: The string to process\n    :return: The count of unique characters in the string\n\n    >>> count_unique_chars('abcdef')\n    6\n    >>> count_unique_chars('aabbcc')\n    3\n    \"\"\"\n    return len(set(string))\n\n\n# Testing the main function with provided docstring examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n\n    Parameters:\n    numbers (List[int]): The list of integers to be interspersed\n    delimiter (int): The integer to insert between elements\n\n    Returns:\n    List[int]: The list with delimiter interspersed\n\n    Example:\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # Edge case: If the input list is empty, return an empty list\n    if not numbers:\n        return []\n    \n    # Helper function to intersperse the delimiter\n    def _intersperse_helper(nums: List[int], delim: int) -> List[int]:\n        result = []\n        for i, num in enumerate(nums):\n            result.append(num)\n            # Only add the delimiter if it's not the last element\n            if i < len(nums) - 1:\n                result.append(delim)\n        return result\n\n    return _intersperse_helper(numbers, delimiter)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    def get_beat(note: str) -> int:\n        \"\"\" Returns the number of beats that a note lasts based on the given legend.\n        \n        Args:\n            note (str): A string representing a musical note.\n        \n        Returns:\n            int: The number of beats the note lasts.\n        \"\"\"\n        if note == 'o':\n            return 4\n        elif note == 'o|':\n            return 2\n        elif note == '.|':\n            return 1\n        else:\n            raise ValueError(f\"Unrecognized note: {note}\")\n    \n    # Split the music string into individual note representations (considering spaces as separators)\n    notes = music_string.split()\n    \n    # Map each note to its corresponding beat duration\n    beats = [get_beat(note) for note in notes]\n    \n    return beats\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers.\n    \n    Args:\n    values (List[Any]): List containing elements of any type.\n    \n    Returns:\n    List[int]: A list containing only integer values from the input list.\n\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return list(filter(is_integer, values))\n\ndef is_integer(value: Any) -> bool:\n    \"\"\"\n    Check if the given value is an integer.\n    \n    Args:\n    value (Any): The value to check.\n    \n    Returns:\n    bool: True if value is an integer, False otherwise.\n    \"\"\"\n    return isinstance(value, int)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return the length of the given string.\n    \n    This function calculates the length of the input string by iterating \n    through each character and counting until the end of the string is reached.\n    \n    Args:\n        string (str): The input string whose length is to be calculated.\n    \n    Returns:\n        int: The length of the input string.\n    \n    Examples:\n        >>> strlen('')\n        0\n        >>> strlen('abc')\n        3\n    \"\"\"\n    return _calculate_length(string)\n\ndef _calculate_length(string: str) -> int:\n    \"\"\"Calculate the length of the string by counting each character.\n    \n    This is a helper function that performs the actual length calculation.\n\n    Args:\n        string (str): The input string.\n    \n    Returns:\n        int: The length of the input string.\n    \"\"\"\n    length = 0\n    \n    # Iterate through each character in the string and count\n    for char in string:\n        length += 1\n    \n    return length"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    def flip_char_case(char: str) -> str:\n        \"\"\"\n        Flip the case of a single character. \n        Lowercase becomes uppercase, and uppercase becomes lowercase.\n\n        :param char: A single character\n        :return: The character with its case flipped\n        \"\"\"\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    # Using a list comprehension to efficiently flip each character's case\n    return ''.join(flip_char_case(char) for char in string)\n\n# Demonstration\nprint(flip_case('Hello'))  # Should output 'hELLO'\nprint(flip_case('WORLD'))  # Should output 'world'\nprint(flip_case('Python3.8'))  # Should output 'pYTHON3.8'\nprint(flip_case('12345!'))  # Should output '12345!' (unchanged)"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n# A simple mapping from word form to their respective integer values\nnumber_mapping = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\n# Reverse mapping for easy conversion back from integers to words\nreverse_number_mapping = {v: k for k, v in number_mapping.items()}\n\ndef parse_numbers(numbers: str) -> List[int]:\n    \"\"\" Convert a space-delimited string of numbers in word format to a list of integers.\n    Args:\n        numbers (str): A string containing number words separated by spaces.\n    Returns:\n        List[int]: A list of integers corresponding to the number words.\n    \"\"\"\n    number_words = numbers.split()\n    return [number_mapping[word] for word in number_words]\n\ndef human_readable_number_list(numbers: List[int]) -> str:\n    \"\"\" Convert a list of integers to a space-delimited string of number words.\n    Args:\n        numbers (List[int]): A list of integers.\n    Returns:\n        str: A space-delimited string of number words corresponding to the integers.\n    \"\"\"\n    return ' '.join(reverse_number_mapping[number] for number in numbers)\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Sort the given space-delimited string of number words from smallest to largest.\n    Args:\n        numbers (str): input string with space-delimited numbers in word format.\n    Returns:\n        str: output string with numbers sorted from smallest to largest.\n    \"\"\"\n    # Convert number words to corresponding integer list\n    numeric_values = parse_numbers(numbers)\n\n    # Sort the list of numeric values\n    sorted_values = sorted(numeric_values)\n\n    # Convert the sorted numeric list back to number words\n    return human_readable_number_list(sorted_values)\n\n# Example usage and test\nif __name__ == \"__main__\":\n    example_input = 'three one five'\n    print(sort_numbers(example_input))  # Output: 'one three five'"}
{"task_id": "HumanEval/18", "completion": "def count_overlapping_occurrences(string: str, substring: str) -> int:\n    \"\"\"\n    Helper function to count overlapping occurrences of a substring within a string.\n    \n    Parameters:\n    string (str): The string to be searched.\n    substring (str): The substring to search for.\n    \n    Returns:\n    int: The number of overlapping occurrences of the substring in the string.\n    \"\"\"\n    count = 0\n    start = 0\n\n    while True:\n        # Find next occurrence of substring starting from 'start' index\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        # Count the found occurrence\n        count += 1\n        # Move start position to the next character to count overlapping\n        start += 1\n\n    return count\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \n    Parameters:\n    string (str): The string where the search will be executed.\n    substring (str): The substring to look for in the string.\n    \n    Returns:\n    int: The number of times the substring occurs in the string, including overlapping occurrences.\n    \n    Examples:\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    # Edge case: if either string or substring is empty, return 0 as no occurrences can be found.\n    if not string or not substring:\n        return 0\n\n    return count_overlapping_occurrences(string, substring)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef starts_with_prefix(string: str, prefix: str) -> bool:\n    \"\"\"\n    Check if a given string starts with a specified prefix.\n\n    Args:\n    string (str): The string to check.\n    prefix (str): The prefix to look for.\n\n    Returns:\n    bool: True if the string starts with the prefix, False otherwise.\n    \"\"\"\n    return string.startswith(prefix)\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" \n    Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n    strings (List[str]): The list of strings to filter.\n    prefix (str): The prefix to filter the strings by.\n\n    Returns:\n    List[str]: A list of strings that start with the given prefix.\n\n    Examples:\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [string for string in strings if starts_with_prefix(string, prefix)]"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" \n    Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    # Edge case: An empty list should return an empty string\n    if not strings:\n        return ''\n\n    return _join_strings(strings)\n\n\ndef _join_strings(strings: List[str]) -> str:\n    \"\"\"\n    Helper function that joins list of strings into a single string.\n    \"\"\"\n    # Using ''.join() efficiently concatenates all strings in the list\n    return ''.join(strings)\n\n\n# Trade-off explanation:\n# Using ''.join() is generally more efficient than repeatedly\n# concatenating strings with the `+` operator, especially for larger lists.\n# This is because `+` involves creating new string objects and copying\n# over the characters, whereas `''.join()` computes the final size and\n# concatenates in a single pass."}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return a list of prime factors of the given integer in the order from smallest to largest.\n    Each of the factors should be listed the number of times corresponding to how many times it appears in factorization.\n    The input number should be equal to the product of all factors.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    def get_smallest_prime_factor(n: int) -> int:\n        \"\"\"Return the smallest prime factor of a given integer n.\"\"\"\n        if n <= 1:\n            return n\n        # Check from 2 onwards to find the smallest prime factor\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return i\n        # If no smaller factor found, n itself is prime\n        return n\n    \n    def factorize_recursive(n: int) -> List[int]:\n        \"\"\"Recursively find prime factors of n and return them as a list.\"\"\"\n        if n <= 1:\n            return []\n        smallest_factor = get_smallest_prime_factor(n)\n        return [smallest_factor] + factorize_recursive(n // smallest_factor)\n    \n    # Edge case for 1\n    if n == 1:\n        return []\n\n    return factorize_recursive(n)"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(remove_duplicates(l))\n\ndef remove_duplicates(l: list) -> list:\n    \"\"\"\n    Remove duplicates from the list. \n    This function leverages the properties of sets to eliminate duplicates efficiently.\n    \n    Args:\n        l: A list of integers.\n    \n    Returns:\n        A list containing unique elements from the input list.\n    \n    Trade-offs:\n        Using a set for duplicate removal means that the order of the \n        original elements is not preserved.\n    \"\"\"\n    return list(set(l))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef find_min_max(numbers: List[float]) -> (float, float):\n    \"\"\" Find the minimum and maximum values in a list of numbers.\n    Args:\n        numbers (List[float]): List of numbers.\n    Returns:\n        (float, float): A tuple containing the minimum and maximum values.\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return min_val, max_val\n\ndef scale_number(num: float, min_val: float, max_val: float) -> float:\n    \"\"\" Scale a number to the range [0, 1].\n    Args:\n        num (float): The number to scale.\n        min_val (float): The minimum value of the original range.\n        max_val (float): The maximum value of the original range.\n    Returns:\n        float: The scaled number.\n    \"\"\"\n    if max_val == min_val:\n        # Prevent division by zero and any unnecessary scaling if all numbers are the same\n        return 0.0\n    return (num - min_val) / (max_val - min_val)\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    Args:\n        numbers (List[float]): List of numbers to be rescaled.\n    Returns:\n        List[float]: The rescaled list of numbers.\n    \"\"\"\n    min_val, max_val = find_min_max(numbers)\n    rescaled_numbers = [scale_number(num, min_val, max_val) for num in numbers]\n    return rescaled_numbers\n\n# Example usage:\n# rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    A prime number is a number greater than 1 that has no divisors other than 1 and itself.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        # 0 and 1 are not prime numbers\n        return False\n    if n <= 3:\n        # 2 and 3 are prime numbers\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        # numbers divisible by 2 or 3 are not primes (except 2 and 3, which are covered above)\n        return False\n    \n    # check for factors from 5 up to the square root of n\n    return is_prime_helper(n)\n\ndef is_prime_helper(n):\n    \"\"\"\n    Helper function to check for prime status for numbers greater than 3\n    and not divisible by 2 or 3. Utilizes the 6k +/- 1 optimization.\n    \n    Args:\n    n: int - The number to be checked for primality.\n    \n    Returns:\n    bool: True if n is prime, False otherwise.\n    \"\"\"\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            # If divisible by current i or i+2, it is not a prime\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    def find_divisor(n: int) -> int:\n        \"\"\"\n        Find the largest divisor of n that is smaller than n.\n\n        This function starts checking from n//2 because no number greater than n//2 will\n        evenly divide n (besides n itself, which we exclude).\n\n        Parameters:\n        n (int): The number for which to find the largest divisor.\n\n        Returns:\n        int: The largest divisor of n smaller than n.\n        \"\"\"\n        for i in range(n//2, 0, -1):\n            if n % i == 0:\n                return i\n        return 1  # In case no divisor is found, which shouldn't happen for n > 1\n\n    # Edge case handling\n    if n <= 1:\n        raise ValueError(\"Input must be an integer greater than 1.\")\n    \n    # Find and return the largest divisor\n    return find_divisor(n)\n\n# Example code to test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import fsolve\n\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    \n    Args:\n    xs (list): Coefficients of the polynomial.\n    x (float): The point at which to evaluate the polynomial.\n\n    Returns:\n    float: The value of the polynomial at point x.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Finds a zero of the polynomial with coefficients xs.\n    \n    Args:\n    xs (list): Coefficients of the polynomial.\n    \n    Returns:\n    float: A zero of the polynomial.\n    \n    Raises:\n    ValueError: If the list of coefficients has an odd length or\n                if all coefficients are zero.\n                \n    Example:\n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    if all(coeff == 0 for coeff in xs):\n        raise ValueError(\"The polynomial cannot be all zeros.\")\n    \n    def polynomial_root(x):\n        return poly(xs, x)\n    \n    # Use fsolve to find the root starting from an initial guess of 0\n    result = fsolve(polynomial_root, 0)\n    \n    return result[0]\n\n\n# Examples and testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    \n    Args:\n    l (list): A list containing integers.\n    \n    Returns:\n    list: A list with only positive integers from the input list.\n    \n    Examples:\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    def is_positive(n: int) -> bool:\n        \"\"\"\n        Check if a number is positive.\n        \n        Args:\n        n (int): The number to be checked.\n        \n        Returns:\n        bool: True if the number is positive, False otherwise.\n        \n        Examples:\n        >>> is_positive(5)\n        True\n        >>> is_positive(0)\n        False\n        >>> is_positive(-3)\n        False\n        \"\"\"\n        return n > 0\n\n    def filter_positive_numbers(l: list) -> list:\n        \"\"\"\n        Filter and return the positive numbers from a list.\n        \n        Args:\n        l (list): A list containing integers.\n        \n        Returns:\n        list: A list containing only positive integers from the input list.\n        \n        Examples:\n        >>> filter_positive_numbers([-1, 2, -4, 5, 6])\n        [2, 5, 6]\n        >>> filter_positive_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        [5, 3, 2, 3, 9, 123, 1]\n        \"\"\"\n        return [x for x in l if is_positive(x)]\n\n    # Main function logic\n    return filter_positive_numbers(l)\n\n# Test cases for verification\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/37", "completion": "def extract_even_indices(l: list) -> list:\n    \"\"\"\n    Extracts the elements from the list that are at even indices.\n    \n    Args:\n        l (list): The input list.\n    \n    Returns:\n        list: A list containing the elements at even indices.\n    \"\"\"\n    return [l[i] for i in range(0, len(l), 2)]\n\ndef insert_sorted_even(l: list, sorted_even: list) -> list:\n    \"\"\"\n    Inserts the sorted even-index elements back into their original positions in the list.\n    \n    Args:\n        l (list): The original list.\n        sorted_even (list): List of sorted elements that were at even indices.\n    \n    Returns:\n        list: A list with the odd-index elements unchanged and even-index elements sorted.\n    \"\"\"\n    result = l[:]  # Create a copy of the original list\n    even_index = 0\n    \n    for i in range(0, len(l), 2):\n        result[i] = sorted_even[even_index]\n        even_index += 1\n    \n    return result\n\ndef sort_even(l: list) -> list:\n    \"\"\"\n    Sort the values at the even indices while keeping values at odd indices unchanged.\n    \n    Args:\n        l (list): The input list.\n    \n    Returns:\n        list: A list where only the values at even indices are sorted.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    if not l:  # If the list is empty, simply return it\n        return l\n    \n    even_elements = extract_even_indices(l)\n    even_elements_sorted = sorted(even_elements)\n    result = insert_sorted_even(l, even_elements_sorted)\n    \n    return result"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    :param num: Integer to check for primality.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci_sequence():\n    \"\"\"\n    Generator function to produce Fibonacci numbers indefinitely.\n    \"\"\"\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        yield a\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \n    :param n: The ordinal indicating which prime Fibonacci number to return.\n    :return: The n-th prime Fibonacci number.\n    \"\"\"\n    count = 0\n    for fib_number in fibonacci_sequence():\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number\n\n# Example usage:\n# print(prime_fib(1)) # Output: 2\n# print(prime_fib(2)) # Output: 3\n# print(prime_fib(3)) # Output: 5\n# print(prime_fib(4)) # Output: 13\n# print(prime_fib(5)) # Output: 89"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    :param n: An integer defining the upper limit (exclusive).\n    :return: The count of digit '7' appearances in the specified range.\n    \n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    def is_divisible_by_11_or_13(num: int) -> bool:\n        \"\"\"\n        Check if a number is divisible by 11 or 13.\n        :param num: The number to check.\n        :return: True if num is divisible by 11 or 13, False otherwise.\n        \"\"\"\n        return num % 11 == 0 or num % 13 == 0\n\n    def count_digit_7(num: int) -> int:\n        \"\"\"\n        Count the number of times digit 7 appears in a number.\n        :param num: The number in which to count digit 7.\n        :return: The count of digit 7 in num.\n        \"\"\"\n        return str(num).count('7')\n\n    count = 0\n    # Iterate over the range from 0 to n-1\n    for i in range(n):\n        if is_divisible_by_11_or_13(i):\n            count += count_digit_7(i)\n    \n    return count"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    Args:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    Tuple[float, float]: A tuple containing the two closest elements, \n                         with the smaller number first.\n                         \n    Examples:\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the list to ensure that closest neighbors are adjacent\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to track the minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(len(sorted_numbers) - 1):\n        current_diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    \n    return closest_pair\n\n\n# Modular functions to add clarity and reusability\n\ndef sort_numbers(numbers: List[float]) -> List[float]:\n    \"\"\" Sorts the list of numbers in ascending order.\n    \n    Args:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    List[float]: Sorted list of numbers.\n    \"\"\"\n    return sorted(numbers)\n\ndef find_min_difference_pair(sorted_numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Finds the pair of adjacent numbers in a sorted list with the smallest difference.\n    \n    Args:\n    sorted_numbers (List[float]): A sorted list of floating-point numbers.\n    \n    Returns:\n    Tuple[float, float]: A tuple containing the two closest elements,\n                         with the smaller number first.\n    \"\"\"\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(sorted_numbers) - 1):\n        current_diff = sorted_numbers[i+1] - sorted_numbers[i]\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])\n    \n    return closest_pair\n\n# Updated implementation with modular functions\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    Args:\n    numbers (List[float]): A list of floating-point numbers.\n    \n    Returns:\n    Tuple[float, float]: A tuple containing the two closest elements, \n                         with the smaller number first.\n                         \n    Examples:\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    \n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers = sort_numbers(numbers)\n    return find_min_difference_pair(sorted_numbers)"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    It returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    \n    # Use a set to store the elements we have seen so far.\n    seen = set()\n    \n    for num in l:\n        # Check if the negative of the current number is in the set.\n        if -num in seen:\n            return True\n        # Add the current number to the set.\n        seen.add(num)\n    \n    return False\n\n\n# Modular breakdown: \n# We could use further modular functions if necessary, e.g., a function\n# to add to the set and perform the check separately, but for this simple\n# problem, the readability is sufficient to keep it within a single loop.\n\n# Edge cases handled:\n# - The list containing only one integer.\n# - Using a set ensures that look-up and insertion operations are efficient (amortized O(1) time complexity).\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Check for an empty list and return None\n    if not l:\n        return None\n\n    # Initialize the first element as the maximum\n    max_elem = l[0]\n\n    # Iterate through the list to find the maximum element\n    for elem in l:\n        if is_greater(elem, max_elem):\n            max_elem = elem\n\n    return max_elem\n\ndef is_greater(a, b):\n    \"\"\"Return True if a is greater than b, otherwise False.\"\"\"\n    return a > b\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/33", "completion": "def extract_and_sort_third_elements(l: list) -> list:\n    \"\"\"\n    Extracts elements from the list l that are at indices divisible by three, \n    sorts them, and returns the sorted list.\n\n    Parameters:\n    l (list): The input list.\n\n    Returns:\n    list: Sorted list of elements from indices divisible by three.\n    \"\"\"\n    # Extract elements at indices divisible by three\n    third_elements = [l[i] for i in range(0, len(l), 3)]\n    # Sort extracted elements\n    third_elements.sort()\n    return third_elements\n\ndef merge_sorted_elements(l: list, sorted_third_elements: list) -> list:\n    \"\"\"\n    Merges the input list l with the sorted third elements list.\n\n    The merged result will have the elements at indices divisible by three \n    replaced by the elements from sorted_third_elements, maintaining the original order of other elements.\n\n    Parameters:\n    l (list): The input list.\n    sorted_third_elements (list): List of sorted elements at indices divisible by three.\n\n    Returns:\n    list: List where elements at indices divisible by three are replaced by the sorted list.\n    \"\"\"\n    sorted_list = l[:]\n    j = 0\n    for i in range(0, len(l), 3):\n        sorted_list[i] = sorted_third_elements[j]\n        j += 1\n    return sorted_list\n\ndef sort_third(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, \n    while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n\n    Parameters:\n    l (list): The input list.\n\n    Returns:\n    list: The rearranged list with every third element sorted.\n    \n    Examples:\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    if not l:\n        return []\n\n    # Step 1: Extract and sort elements at indices divisible by three\n    sorted_third_elements = extract_and_sort_third_elements(l)\n    \n    # Step 2: Merge the sorted third elements back into their positions\n    return merge_sorted_elements(l, sorted_third_elements)"}
{"task_id": "HumanEval/40", "completion": "def find_triplets(l: list) -> bool:\n    \"\"\"\n    find_triplets checks if there are any three distinct elements in the list\n    that sum to zero.\n    \n    Args:\n    l (list): List of integers\n    \n    Returns:\n    bool: True if there are three distinct elements that sum to zero,\n          False otherwise.\n    \"\"\"\n    n = len(l)\n    # If there are less than 3 elements, return False immediately\n    if n < 3:\n        return False\n    \n    # Sort the list to use the two-pointer approach effectively\n    l.sort()\n    \n    # Traverse the list, fixing one element and using two-pointer for the other two\n    for i in range(n - 2):\n        # To avoid duplicate triples, skip the same element\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        # Use two pointers to find the other two numbers\n        left, right = i + 1, n - 1\n        while left < right:\n            cur_sum = l[i] + l[left] + l[right]\n            if cur_sum == 0:\n                return True\n            elif cur_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\ndef triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    It returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    return find_triplets(l)\n\n# Test examples\n# The given examples in the docstring will be tested here for verification\nassert not triples_sum_to_zero([1, 3, 5, 0])\nassert triples_sum_to_zero([1, 3, -2, 1])\nassert not triples_sum_to_zero([1, 2, 3, 7])\nassert triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nassert not triples_sum_to_zero([1])"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \n    Args:\n        x (int): The number to be converted.\n        base (int): The base to convert the number to.\n        \n    Returns:\n        str: The string representation of the number in the new base.\n        \n    Examples:\n        >>> change_base(8, 3)\n        '22'\n        >>> change_base(8, 2)\n        '1000'\n        >>> change_base(7, 2)\n        '111'\n    \"\"\"\n    def to_base(n: int, b: int) -> str:\n        \"\"\"Convert a number n to a given base b, returning the new base representation as a string.\n        \n        Args:\n            n (int): The number to be converted.\n            b (int): The base for the conversion.\n        \n        Returns:\n            str: The base b representation of the number n.\n        \"\"\"\n        if n < b:\n            return str(n)\n        else:\n            return to_base(n // b, b) + str(n % b)\n    \n    # Validate input parameters\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 inclusive.\")\n\n    return to_base(x, base)"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return the area of a triangle.\n    \n    The formula for the area of a triangle is (1/2) * base * height.\n    \n    Args:\n    a (float): The length of the base of the triangle.\n    h (float): The height from the base to the opposite vertex.\n    \n    Returns:\n    float: The area of the triangle.\n    \n    Example:\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    # Validate input parameters\n    if not (isinstance(a, (int, float)) and a > 0):\n        raise ValueError(\"The base 'a' must be a positive number.\")\n    if not (isinstance(h, (int, float)) and h > 0):\n        raise ValueError(\"The height 'h' must be a positive number.\")\n    \n    # Calculate the area using a modular approach\n    return calculate_area(a, h)\n\n\ndef calculate_area(base, height):\n    \"\"\"Helper function to calculate the area of a triangle given the base and height.\n    \n    Args:\n    base (float): The length of the base of the triangle.\n    height (float): The height from the base to the opposite vertex.\n    \n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    return 0.5 * base * height\n\n# Example usage for testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    def clean_text(text: str) -> str:\n        \"\"\"\n        Cleans the input text by removing non-alphanumeric characters\n        and converting it to lowercase.\n        \"\"\"\n        return ''.join(char.lower() for char in text if char.isalnum())\n    \n    def check_palindrome(text: str) -> bool:\n        \"\"\"\n        Checks if the cleaned text is a palindrome.\n        \"\"\"\n        return text == text[::-1]\n    \n    cleaned_text = clean_text(text)\n    return check_palindrome(cleaned_text)"}
{"task_id": "HumanEval/42", "completion": "def increment_element(element):\n    \"\"\"\n    Increment a given element by 1.\n    \n    Args:\n    element (int): The element to be incremented.\n    \n    Returns:\n    int: The incremented element.\n    \"\"\"\n    return element + 1\n\ndef incr_list(l: list):\n    \"\"\"\n    Return list with elements incremented by 1.\n    \n    Args:\n    l (list): List of integers to be incremented.\n    \n    Returns:\n    list: New list with each element incremented by 1.\n    \n    Examples:\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [increment_element(elem) for elem in l]\n\n# Edge Cases Considered:\n# 1. Empty list should return an empty list.\n# 2. List with one element should return a list with that element incremented.\n# 3. Large numbers should be incremented accurately without overflow in Python's arbitrary-precision int."}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    \n    def count_occurrences(numbers: List[int]) -> dict:\n        \"\"\"\n        Count the occurrences of each number in the list.\n        \n        :param numbers: List of integers to count occurrences.\n        :return: A dictionary with numbers as keys and their counts as values.\n        \"\"\"\n        occurrence_dict = {}\n        for number in numbers:\n            if number in occurrence_dict:\n                occurrence_dict[number] += 1\n            else:\n                occurrence_dict[number] = 1\n        return occurrence_dict\n    \n    def filter_single_occurrences(numbers: List[int], occurrence_dict: dict) -> List[int]:\n        \"\"\"\n        Filter out numbers that occur more than once in the list.\n        \n        :param numbers: List of integers to filter.\n        :param occurrence_dict: Dictionary with numbers as keys and their counts as values.\n        :return: List of integers that occur exactly once.\n        \"\"\"\n        return [number for number in numbers if occurrence_dict[number] == 1]\n    \n    # Get the occurrences of each number\n    occurrences = count_occurrences(numbers)\n    \n    # Filter out numbers that occur more than once\n    return filter_single_occurrences(numbers, occurrences)\n\n\n# To ensure the edge cases, such as an empty list or a list with all elements the same, are handled:\n# Uncomment below to test\n# print(remove_duplicates([]))             # Output: []\n# print(remove_duplicates([5, 5, 5, 5]))   # Output: []\n# print(remove_duplicates([1, 2, 2, 3]))   # Output: [1, 3]\n# print(remove_duplicates([1, 1, 1, 1]))   # Output: []\n# print(remove_duplicates([1, 2, 3, 4]))   # Output: [1, 2, 3, 4]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    \n    def sort_list(lst):\n        \"\"\"Return a sorted version of the given list.\"\"\"\n        return sorted(lst)\n    \n    def get_middle_indices(lst):\n        \"\"\"Return the middle index or indices of the list.\"\"\"\n        n = len(lst)\n        if n % 2 == 1:\n            return [n // 2]\n        else:\n            return [n // 2 - 1, n // 2]\n    \n    def calculate_median(lst):\n        \"\"\"Calculate and return the median of the list.\"\"\"\n        sorted_lst = sort_list(lst)\n        mid_indices = get_middle_indices(sorted_lst)\n        \n        if len(mid_indices) == 1:  # odd number of elements\n            return sorted_lst[mid_indices[0]]\n        else:  # even number of elements\n            return (sorted_lst[mid_indices[0]] + sorted_lst[mid_indices[1]]) / 2\n    \n    # Handle edge case of an empty list\n    if not l:\n        raise ValueError(\"Cannot compute median of an empty list.\")\n    \n    return calculate_median(l)"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\n    This function computes the n-th element of the fib4 number sequence without using recursion.\n\n    Args:\n    - n (int): The index of the sequence to compute.\n\n    Returns:\n    - int: The n-th element of the fib4 number sequence.\n    \n    Examples:\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # Handling edge cases directly\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Base cases for the sequence\n    values = [0, 0, 2, 0]\n\n    # Iteratively compute the n-th value\n    for i in range(4, n + 1):\n        next_value = values[-1] + values[-2] + values[-3] + values[-4]\n        values.append(next_value)\n        values.pop(0)  # Remove the oldest value to maintain only the last 4\n\n    return values[-1]"}
{"task_id": "HumanEval/38", "completion": "def split_to_groups_of_three(s: str):\n    \"\"\"\n    Splits the input string into groups of three characters.\n    If the string length is not a multiple of three, the last group may have fewer characters.\n\n    Args:\n        s (str): The input string to be split.\n\n    Returns:\n        list: A list of string groups, each up to three characters long.\n    \"\"\"\n    return [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n\n\ndef cycle_group(group: str):\n    \"\"\"\n    Cycles the characters in the group of three.\n    For example, 'abc' becomes 'bca'.\n\n    Args:\n        group (str): A group of characters (up to three).\n\n    Returns:\n        str: The cycled group.\n    \"\"\"\n    return group[1:] + group[0] if len(group) == 3 else group\n\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n\n    Args:\n        s (str): The input string to encode.\n\n    Returns:\n        str: The encoded string.\n    \"\"\"\n    # Split string into groups of three characters\n    groups = split_to_groups_of_three(s)\n\n    # Cycle each group\n    cycled_groups = [cycle_group(group) for group in groups]\n\n    # Join the cycled groups back together\n    return \"\".join(cycled_groups)\n\n\ndef uncycle_group(group: str):\n    \"\"\"\n    Uncycles the characters in the group of three.\n    For example, 'bca' becomes 'abc'.\n\n    Args:\n        group (str): A group of characters (up to three).\n\n    Returns:\n        str: The uncycled group.\n    \"\"\"\n    return group[-1] + group[:-1] if len(group) == 3 else group\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with `encode_cyclic` function. Returns decoded string.\n\n    Args:\n        s (str): The encoded string.\n\n    Returns:\n        str: The decoded string.\n    \"\"\"\n    # Split string into groups of three characters\n    groups = split_to_groups_of_three(s)\n\n    # Uncycle each group\n    uncycled_groups = [uncycle_group(group) for group in groups]\n\n    # Join the uncycled groups back together\n    return \"\".join(uncycled_groups)\n\n\n# Unit tests to ensure correctness\nassert encode_cyclic(\"abcdef\") == \"bcadef\"\nassert decode_cyclic(\"bcadef\") == \"abcdef\"\nassert encode_cyclic(\"abcde\") == \"bcade\"\nassert decode_cyclic(\"bcade\") == \"abcde\"\nassert encode_cyclic(\"ab\") == \"ab\"\nassert decode_cyclic(\"ab\") == \"ab\""}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y.\n    \n    Args:\n    x (int): The first number to add.\n    y (int): The second number to add.\n    \n    Returns:\n    int: The sum of x and y.\n    \n    Examples:\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    def validate_input(value):\n        \"\"\"\n        Validate that the input is an integer.\n        \n        Args:\n        value: The value to validate.\n        \n        Returns:\n        bool: True if the value is an integer, False otherwise.\n        \"\"\"\n        return isinstance(value, int)\n\n    def sum_two_numbers(a, b):\n        \"\"\"\n        Sum two integers.\n        \n        Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        \n        Returns:\n        int: The sum of the two integers.\n        \"\"\"\n        return a + b\n    \n    # Validate both inputs\n    if not validate_input(x):\n        raise ValueError(f\"Invalid input: {x}. Both arguments must be integers.\")\n    if not validate_input(y):\n        raise ValueError(f\"Invalid input: {y}. Both arguments must be integers.\")\n    \n    # Compute the sum using a helper function\n    return sum_two_numbers(x, y)\n\n# Examples for testing\nprint(add(2, 3))  # Expected output: 5\nprint(add(5, 7))  # Expected output: 12"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars moving in opposite directions.\n    \n    Arguments:\n    n -- Number of cars in each set (int).\n    \n    Returns:\n    int -- The number of collisions.\n    \"\"\"\n    return n * n\n\n# Since each car will collide with all n cars from the opposite direction,\n# the total number of collisions will be n * n, or n squared."}
{"task_id": "HumanEval/50", "completion": "def shift_character(ch: str, shift: int) -> str:\n    \"\"\"\n    Shifts a given character by the specified shift amount within the alphabet.\n    \n    Args:\n        ch (str): The character to be shifted. Assumed to be a lowercase letter.\n        shift (int): The number of positions to shift the character.\n        \n    Returns:\n        str: The shifted character.\n    \"\"\"\n    # ASCII value of the new character after shifting\n    new_char = chr(((ord(ch) - ord('a') + shift) % 26) + ord('a'))\n    return new_char\n\ndef encode_shift(s: str) -> str:\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n\n    Args:\n        s (str): The input string to be encoded.\n\n    Returns:\n        str: The encoded string with each character shifted by 5.\n    \"\"\"\n    # Shift each character in the string by 5\n    return \"\".join(shift_character(ch, 5) for ch in s)\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n\n    Args:\n        s (str): The encoded input string to be decoded.\n\n    Returns:\n        str: The decoded string with each character shifted by -5.\n    \"\"\"\n    # Shift each character in the string by -5 to decode\n    return \"\".join(shift_character(ch, -5) for ch in s)"}
{"task_id": "HumanEval/52", "completion": "def is_below_threshold(value: int, threshold: int) -> bool:\n    \"\"\"Check if a single value is below the given threshold.\n    Args:\n        value (int): The value to check.\n        threshold (int): The threshold to compare against.\n        \n    Returns:\n        bool: True if value is below threshold, False otherwise.\n    \"\"\"\n    return value < threshold\n\ndef below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    Args:\n        l (list): The list of numbers to check.\n        t (int): The threshold value.\n\n    Returns:\n        bool: True if all numbers in the list are below threshold t, False otherwise.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for number in l:\n        if not is_below_threshold(number, t):\n            return False\n    return True\n\n# Edge case handling notes:\n# 1. An empty list l should return True since there are no elements that exceed the threshold.\n# 2. A list with negative numbers should correctly assess these based on the threshold.\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    def fib_recursive(a, b, k):\n        \"\"\"Helper function to compute Fibonacci using tail recursion.\n        \n        Args:\n            a (int): (n-2)th Fibonacci number in the sequence.\n            b (int): (n-1)th Fibonacci number in the sequence.\n            k (int): Current position in the sequence, up to `n`.\n\n        Returns:\n            int: The n-th Fibonacci number.\n        \"\"\"\n        if k == 0:\n            return a\n        elif k == 1:\n            return b\n        else:\n            return fib_recursive(b, a + b, k - 1)\n\n    # Handle the edge case where n is less than 0\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    # Special cases for first two Fibonacci numbers\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    return fib_recursive(0, 1, n)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    def modular_exponentiation(base: int, exponent: int, modulus: int) -> int:\n        \"\"\"Use the method of exponentiation by squaring to compute base^exponent % modulus.\n        \n        Args:\n            base (int): The base number.\n            exponent (int): The exponent to raise the base to.\n            modulus (int): The modulus to take after exponentiation.\n\n        Returns:\n            int: The result of (base^exponent) % modulus\n        \"\"\"\n        result = 1\n        base = base % modulus  # Ensure base is within bounds of modulus\n        \n        while exponent > 0:\n            # If exponent is odd, multiply base with result\n            if (exponent % 2) == 1:\n                result = (result * base) % modulus\n            # Exponent is halved\n            exponent = exponent >> 1\n            # Base is squared\n            base = (base * base) % modulus\n        \n        return result\n\n    return modular_exponentiation(2, n, p)"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n    :param n: The number up to which the sum is calculated.\n    :return: The sum of numbers from 1 to n.\n\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    # Helper function to compute the sum using the formula for arithmetic series.\n    def sum_formula(n: int) -> int:\n        \"\"\"\n        Calculate the sum of the first n natural numbers using the formula n * (n + 1) // 2.\n        :param n: The number up to which the sum is calculated.\n        :return: The sum of numbers from 1 to n.\n        \"\"\"\n        return n * (n + 1) // 2\n\n    # Ensure the input is a positive integer.\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the sum using the helper function.\n    return sum_formula(n)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    \n    def is_valid_bracket_sequence(brackets: str) -> bool:\n        \"\"\"\n        Validates that the bracket sequence is correctly nested.\n        \n        :param brackets: string consisting of '<' and '>'\n        :return: True if the sequence is valid, False otherwise\n        \"\"\"\n        open_count = 0  # To keep track of currently open brackets\n        \n        for bracket in brackets:\n            if bracket == '<':\n                open_count += 1\n            elif bracket == '>':\n                if open_count == 0:  # No matching opening bracket\n                    return False\n                open_count -= 1\n        \n        return open_count == 0  # All opening brackets should be closed\n    \n    return is_valid_bracket_sequence(brackets)"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" checks if the brackets string has valid pairing of opening and closing brackets.\n    \n    A string of brackets is valid if every opening bracket \"(\" has a corresponding\n    closing bracket \")\" appearing in the correct order.\n\n    Args:\n    brackets (str): Input string consisting of \"(\" and \")\"\n\n    Returns:\n    bool: True if every opening bracket has a corresponding closing bracket,\n          otherwise False.\n\n    Examples:\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    def is_valid_bracket_sequence(sequence: str) -> bool:\n        \"\"\" Helper function to validate bracket sequence using a counter.\n        \n        Args:\n        sequence (str): A string of brackets to be validated\n        \n        Returns:\n        bool: True if the sequence is valid, False otherwise.\n        \"\"\"\n        balance = 0\n        for bracket in sequence:\n            if bracket == \"(\":\n                balance += 1\n            elif bracket == \")\":\n                balance -= 1\n            # If balance goes negative, there's a closing bracket without an opening bracket\n            if balance < 0:\n                return False\n        # If balance is not zero, there are unmatched opening brackets\n        return balance == 0\n\n    return is_valid_bracket_sequence(brackets)\n\n# Example function calls for documentation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    def reverse_string(s):\n        \"\"\"Reverse and return the given string.\"\"\"\n        return s[::-1]\n    \n    def circular_right_shift(s, shift):\n        \"\"\"Perform a circular right shift on string s by shift positions and return the result.\"\"\"\n        shift = shift % len(s)  # Ensure shift is within bounds of string length\n        return s[-shift:] + s[:-shift]\n    \n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        return reverse_string(x_str)\n    else:\n        return circular_right_shift(x_str, shift)\n\n# Example usage and edge cases\nprint(circular_shift(12, 1))  # \"21\"\nprint(circular_shift(12, 2))  # \"12\"\nprint(circular_shift(12345, 3))  # \"34512\"\nprint(circular_shift(12345, 8))  # \"54321\" (since 8 > 5)"}
{"task_id": "HumanEval/62", "completion": "def scalar_multiply(index: int, coefficient: int) -> int:\n    \"\"\"\n    Multiplies a given coefficient by its corresponding power of x.\n\n    Args:\n    index: The power of x in the polynomial.\n    coefficient: The coefficient associated with x**index.\n    \n    Returns:\n    The product of the index and the coefficient.\n    \n    >>> scalar_multiply(1, 3)\n    3\n    >>> scalar_multiply(2, 1)\n    2\n    \"\"\"\n    return index * coefficient\n\ndef derivative(xs: list) -> list:\n    \"\"\"\n    Computes the derivative of a polynomial represented by a list of coefficients.\n\n    Args:\n    xs: A list of coefficients where each index represents the power of x.\n        xs[0] + xs[1] * x + xs[2] * x^2 + ....\n\n    Returns:\n    A list of coefficients representing the derivative of the polynomial.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    >>> derivative([4])\n    []\n    >>> derivative([])\n    []\n    \"\"\"\n    # Skip the first coefficient (constant term) as its derivative is 0\n    return [scalar_multiply(i, xs[i]) for i in range(1, len(xs))]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/64", "completion": "def is_vowel(char, is_end=False):\n    \"\"\"Determine if a character is a vowel.\n    \n    Args:\n    char (str): The character to check.\n    is_end (bool): A flag indicating if the character is at the end of the word.\n    \n    Returns:\n    bool: True if the character is a vowel, or 'y' at the end of the word.\n    \"\"\"\n    vowels = \"aeiou\"\n    char = char.lower()\n    if char in vowels:\n        return True\n    if char == 'y' and is_end:\n        return True\n    return False\n\ndef count_vowels(s):\n    \"\"\"Count the number of vowels in a given string.\n    \n    Args:\n    s (str): The string to evaluate.\n    \n    Returns:\n    int: The number of vowels found in the string.\n    \"\"\"\n    count = 0\n    for i, char in enumerate(s):\n        if is_vowel(char, is_end=(i == len(s) - 1)):\n            count += 1\n    return count\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    return count_vowels(s)\n\n# Test cases to validate the implementation\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"YELLOW\")) # Expected output: 2 ('e', 'o')\nprint(vowels_count(\"sky\"))    # Expected output: 1 ('y' at the end)\nprint(vowels_count(\"why\"))    # Expected output: 1 ('y' at the end)\nprint(vowels_count(\"rhythm\")) # Expected output: 0 (no vowels)\nprint(vowels_count(\"bcdfghjklmnpqrstvwxyz\")) # Expected output: 1 ('y' at the end)"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    \n    Args:\n        l1 (list): The first list of elements.\n        l2 (list): The second list of elements.\n\n    Returns:\n        list: A sorted list of unique elements that are common to both l1 and l2.\n    \n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    \"\"\"\n    def get_unique_elements(lst: list) -> set:\n        \"\"\"Return unique elements from a list as a set.\n        \n        Args:\n            lst (list): The list from which to extract unique elements.\n\n        Returns:\n            set: A set of unique elements from the list.\n        \"\"\"\n        return set(lst)\n\n    def find_common_elements(set1: set, set2: set) -> set:\n        \"\"\"Return common elements between two sets.\n        \n        Args:\n            set1 (set): The first set of elements.\n            set2 (set): The second set of elements.\n\n        Returns:\n            set: A set of elements that are common to both set1 and set2.\n        \"\"\"\n        return set1.intersection(set2)\n\n    def sort_elements(elements: set) -> list:\n        \"\"\"Return a sorted list of elements from a set.\n        \n        Args:\n            elements (set): The set of elements to sort.\n\n        Returns:\n            list: A sorted list of elements.\n        \"\"\"\n        return sorted(elements)\n\n    # Step 1: Get unique elements from both lists\n    unique_l1 = get_unique_elements(l1)\n    unique_l2 = get_unique_elements(l2)\n\n    # Step 2: Find common unique elements\n    common_elements = find_common_elements(unique_l1, unique_l2)\n\n    # Step 3: Sort the common unique elements\n    sorted_common_elements = sort_elements(common_elements)\n\n    return sorted_common_elements"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns the string without vowels.\n    \n    Args:\n    text (str): The input string from which vowels need to be removed.\n    \n    Returns:\n    str: A string with all vowels removed.\n    \n    Examples:\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    def is_vowel(char):\n        \"\"\"\n        Checks if a given character is a vowel.\n        \n        Args:\n        char (str): A single character.\n        \n        Returns:\n        bool: Returns True if the character is a vowel (case insensitive), otherwise False.\n        \"\"\"\n        return char.lower() in 'aeiou'\n    \n    def remove_vowels_from_char_list(char_list):\n        \"\"\"\n        Filters out vowels from a list of characters.\n        \n        Args:\n        char_list (list): A list of characters.\n        \n        Returns:\n        list: A list of characters with vowels removed.\n        \"\"\"\n        return [char for char in char_list if not is_vowel(char)]\n    \n    # Convert the input text to a list of characters\n    char_list = list(text)\n    \n    # Filter out vowels using the helper function\n    filtered_char_list = remove_vowels_from_char_list(char_list)\n    \n    # Join the list back to a string and return\n    return ''.join(filtered_char_list)"}
{"task_id": "HumanEval/57", "completion": "def is_increasing(l: list) -> bool:\n    \"\"\"Check if the list is monotonically increasing.\"\"\"\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\ndef is_decreasing(l: list) -> bool:\n    \"\"\"Check if the list is monotonically decreasing.\"\"\"\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            return False\n    return True\n\ndef monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    Args:\n        l (list): The list to be checked.\n    \n    Returns:\n        bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \n    Examples:\n        >>> monotonic([1, 2, 4, 20])\n        True\n        >>> monotonic([1, 20, 4, 10])\n        False\n        >>> monotonic([4, 1, 0, -10])\n        True\n    \"\"\"\n    if not l:  # Edge case: empty list\n        return True\n    \n    return is_increasing(l) or is_decreasing(l)\n\n# Test cases for validation\nprint(monotonic([1, 2, 4, 20]))    # Expected True\nprint(monotonic([1, 20, 4, 10]))   # Expected False\nprint(monotonic([4, 1, 0, -10]))   # Expected True\nprint(monotonic([]))               # Expected True (edge case)\nprint(monotonic([5]))              # Expected True (edge case with single element)\nprint(monotonic([5, 5, 5, 5]))     # Expected True (constant values are considered monotonic)"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    from collections import Counter\n\n    def get_char_counts(s: str) -> Counter:\n        \"\"\"\n        Return a Counter object with the count of each character in the string.\n        :param s: Input string\n        :return: Counter object\n        \"\"\"\n        return Counter(s)\n\n    # Get character counts for both strings\n    char_counts_s0 = get_char_counts(s0)\n    char_counts_s1 = get_char_counts(s1)\n\n    # Check if the sets of characters are the same\n    return char_counts_s0.keys() == char_counts_s1.keys()\n\n# For the purpose of testing the example usage in docstring.\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    This function computes the n-th element of the fibfib number sequence efficiently.\n    \n    Args:\n    n (int): The index of the desired FibFib sequence element.\n    \n    Returns:\n    int: The n-th element of the FibFib sequence.\n    \n    Examples:\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    \n    def compute_fibfib(n: int) -> int:\n        \"\"\"\n        Compute the n-th FibFib number using an iterative approach to avoid the \n        excessive recursion depth and time complexity associated with a naive recursive solution.\n        \n        Args:\n        n (int): The index of the desired FibFib sequence element.\n\n        Returns:\n        int: The n-th element of the FibFib sequence.\n        \"\"\"\n        # Handle base cases directly\n        if n == 0 or n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        \n        # Initialize the base cases\n        a, b, c = 0, 0, 1\n        \n        # Compute the sequence iteratively\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n            \n        return c\n    \n    # Validate the input\n    if n < 0:\n        raise ValueError(\"The input must be a non-negative integer.\")\n    \n    return compute_fibfib(n)"}
{"task_id": "HumanEval/68", "completion": "def find_smallest_even(arr):\n    \"\"\"\n    This function takes an array of non-negative integers and returns \n    a tuple with the smallest even value and its index. If no even values\n    are found, it returns None.\n    \n    Args:\n    arr (list): List of non-negative integers.\n\n    Returns:\n    tuple: (smallest even value, index) or None if no even value exists.\n    \"\"\"\n    smallest_even = None\n    smallest_index = None\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            # If it's the first even number we're seeing or it's smaller than the current smallest_even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is None:\n        return None\n    else:\n        return (smallest_even, smallest_index)\n\ndef pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    return the node with the smallest even value in the form of a list [value, index].\n    If no even values are present, return an empty list.\n    \n    Args:\n    arr (list): List of non-negative integers.\n\n    Returns:\n    list: [smallest even value, index] or [] if no even value exists.\n    \"\"\"\n    result = find_smallest_even(arr)\n    if result is None:\n        return []\n    else:\n        return list(result)\n\n# Examples\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))         # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef frequency_counter(lst):\n    \"\"\"\n    Takes a list of positive integers and returns a dictionary of the counts of each integer.\n    \n    Args:\n    lst (list): List of positive integers.\n    \n    Returns:\n    dict: A dictionary where the keys are integers from the list, and the values are their counts.\n    \"\"\"\n    return Counter(lst)\n\ndef find_valid_numbers(counter):\n    \"\"\"\n    Finds numbers that have count greater than or equal to their value.\n    \n    Args:\n    counter (dict): Dictionary with integers as keys and their counts as values.\n    \n    Returns:\n    list: List of integers that satisfy the condition count >= value.\n    \"\"\"\n    valid_numbers = []\n    for number, count in counter.items():\n        if count >= number:\n            valid_numbers.append(number)\n    return valid_numbers\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    \n    If no such a value exist, return -1.\n    \n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    # Step 1: Calculate frequency of each number in the list\n    counter = frequency_counter(lst)\n    \n    # Step 2: Find valid numbers based on the condition count >= value\n    valid_numbers = find_valid_numbers(counter)\n    \n    # Step 3: Return the greatest valid number, or -1 if no valid numbers\n    if valid_numbers:\n        return max(valid_numbers)\n    else:\n        return -1"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n\n    def is_power(num, base):\n        \"\"\"\n        Checks if num is a power of base.\n        \n        Args:\n        num (int): The number to check.\n        base (int): The base to use.\n        \n        Returns:\n        bool: True if num is a power of base, False otherwise.\n        \"\"\"\n        if num < 1 or base < 1:\n            return False\n\n        # Edge case: 1 is a power of any number because base^0 = 1\n        if num == 1:\n            return True\n\n        # Loop to check if num can be obtained by base raised to some integer power\n        current_value = base\n        while current_value <= num:\n            if current_value == num:\n                return True\n            current_value *= base\n\n        return False\n\n    return is_power(x, n)"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    def is_palindrome(lst):\n        \"\"\"\n        Check if the provided list is palindromic (balanced).\n\n        A palindromic list reads the same forwards and backwards.\n\n        Args:\n            lst (list): The list to be checked.\n\n        Returns:\n            bool: True if the list is palindromic, False otherwise.\n        \"\"\"\n        return lst == lst[::-1]\n    \n    def sum_of_elements(lst):\n        \"\"\"\n        Calculate the sum of elements in the provided list.\n\n        Args:\n            lst (list): The list whose elements are to be summed.\n\n        Returns:\n            int: The sum of the list's elements.\n        \"\"\"\n        return sum(lst)\n\n    # Check if the object is palindromic (balanced).\n    if not is_palindrome(q):\n        return False\n\n    # Check if the sum of elements is less than or equal to the maximum weight.\n    if sum_of_elements(q) > w:\n        return False\n\n    return True\n\n# Example usages:\nprint(will_it_fly([1, 2], 5))  # False\nprint(will_it_fly([3, 2, 3], 1))  # False\nprint(will_it_fly([3, 2, 3], 9))  # True\nprint(will_it_fly([3], 5))  # True"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    \n    def cube_root(n):\n        \"\"\"\n        Find the integer cube root of a number if it exists.\n        For positive numbers, this is straightforward using methods from the math module.\n        For negative numbers, we need to account for the cube root of a negative number being negative.\n        \n        :param n: Integer input whose cube root is needed\n        :return: Integer cube root of n, or None if n is not a perfect cube\n        \"\"\"\n        if n == 0:\n            return 0\n        \n        # Determine the cube root for positive and negative numbers\n        if n > 0:\n            root = int(round(n ** (1/3)))\n        else:\n            root = -int(round(abs(n) ** (1/3)))\n\n        # Check if this root, when cubed, equals the original number\n        if root ** 3 == n:\n            return root\n        else:\n            return None\n\n    # Calculate the cube root of the given input\n    result = cube_root(a)\n    \n    # If result is not None, it means the number is a perfect cube\n    return result is not None"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n    def smallest_prime_factor(x: int):\n        \"\"\"Return the smallest prime factor of x.\n        >>> smallest_prime_factor(13195)\n        5\n        >>> smallest_prime_factor(2048)\n        2\n        \"\"\"\n        if x % 2 == 0:\n            return 2\n        # Check odd numbers starting from 3\n        for i in range(3, int(x**0.5) + 1, 2):\n            if x % i == 0:\n                return i\n        return x  # x is prime itself\n\n    def find_largest_prime_factor(x: int):\n        \"\"\"Find and return the largest prime factor of x by iterative division.\n        >>> find_largest_prime_factor(13195)\n        29\n        >>> find_largest_prime_factor(2048)\n        2\n        \"\"\"\n        factor = 1\n        while x > 1:\n            spf = smallest_prime_factor(x) # Get the smallest prime factor\n            factor = spf  # Update factor to the smallest prime factor found in this iteration\n            x //= spf    # Divide x by its smallest prime factor and update x\n        return factor\n\n    return find_largest_prime_factor(n)\n\n# Add your test cases within the prints to see results when executing the code outside the module\nif __name__ == \"__main__\":\n    print(largest_prime_factor(13195))  # Expected: 29\n    print(largest_prime_factor(2048))   # Expected: 2\n    print(largest_prime_factor(100))    # Expected: 5\n    print(largest_prime_factor(56))     # Expected: 7"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    def total_chars(lst):\n        \"\"\"\n        Calculate the total number of characters in all strings of the list.\n\n        Args:\n            lst: A list of strings.\n            \n        Returns:\n            int: Total number of characters in the list.\n        \"\"\"\n        return sum(len(s) for s in lst)\n    \n    # Calculate total characters for both lists\n    total1 = total_chars(lst1)\n    total2 = total_chars(lst2)\n    \n    # Compare totals and return the appropriate list\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2\n    \n    # Note: If totals are equal, the function will return lst1 as per the problem statement.\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    def count_mismatches(arr):\n        \"\"\"\n        Counts the number of mismatches between elements at symmetric positions in the array.\n        \n        Args:\n        arr (list of int): The input array.\n        \n        Returns:\n        int: The number of mismatches found.\n        \"\"\"\n        mismatches = 0\n        n = len(arr)\n        for i in range(n // 2):\n            if arr[i] != arr[n - 1 - i]:\n                mismatches += 1\n        return mismatches\n\n    # Handle edge cases\n    if not arr:\n        return 0\n\n    # Calculate the number of mismatches which corresponds to the minimum changes required\n    return count_mismatches(arr)\n\n# Example Test Cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output should be 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output should be 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output should be 0"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # If the list is empty, return it as is\n    if not lst:\n        return lst\n\n    # Split lst into two sorted lists:\n    # min_lst will store values in ascending order\n    # max_lst will store values in descending order\n    min_lst = sorted(lst)\n    max_lst = min_lst[::-1]\n\n    result = []\n\n    # We use two indices to track the positions in min_lst and max_lst\n    min_index = 0\n    max_index = 0\n\n    # We use a flag to toggle between mins and maxs\n    use_min = True\n\n    # Generate the result list by toggling between min and max values\n    for _ in range(len(lst)):\n        if use_min:\n            result.append(min_lst[min_index])\n            min_index += 1\n        else:\n            result.append(max_lst[max_index])\n            max_index += 1\n        \n        # Toggle the flag\n        use_min = not use_min\n\n    return result"}
{"task_id": "HumanEval/78", "completion": "def is_hex_prime_digit(digit):\n    \"\"\"\n    Checks if a hexadecimal digit is a prime number.\n    \n    Parameters:\n    digit (str): A single character representing a hexadecimal digit.\n    \n    Returns:\n    bool: True if the digit is a hexadecimal prime, False otherwise.\n    \"\"\"\n    hex_prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return digit in hex_prime_digits\n\ndef hex_key(num):\n    \"\"\"\n    Counts the number of prime hexadecimal digits in a given hexadecimal number string.\n    \n    Parameters:\n    num (str): A string representing a hexadecimal number.\n    \n    Returns:\n    int: The count of hexadecimal prime digits.\n    \"\"\"\n    if not num:\n        return 0\n    \n    prime_count = 0\n    \n    for digit in num:\n        if is_hex_prime_digit(digit):\n            prime_count += 1\n    \n    return prime_count\n\n# Test cases to validate the implementation\nprint(hex_key(\"AB\"))           # Output should be 1\nprint(hex_key(\"1077E\"))        # Output should be 2\nprint(hex_key(\"ABED1A33\"))     # Output should be 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output should be 6\nprint(hex_key(\"2020\"))         # Output should be 2"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"\n    Task:\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    \n    def is_upper(char):\n        \"\"\"\n        Check if the character is an uppercase letter.\n\n        Parameters:\n        char (str): A single character.\n\n        Returns:\n        bool: True if char is uppercase, False otherwise.\n        \"\"\"\n        # ASCII values for 'A' to 'Z' are 65 to 90\n        return 'A' <= char <= 'Z'\n    \n    def ascii_value(char):\n        \"\"\"\n        Get the ASCII value of a single character.\n\n        Parameters:\n        char (str): A single character.\n\n        Returns:\n        int: The ASCII value of the character.\n        \"\"\"\n        return ord(char)\n    \n    def sum_upper_ascii(string):\n        \"\"\"\n        Calculate the sum of ASCII values of uppercase characters in the string.\n\n        Parameters:\n        string (str): The input string.\n\n        Returns:\n        int: The sum of ASCII values of uppercase characters.\n        \"\"\"\n        # Initialize sum to 0\n        total = 0\n        \n        # Iterate through each character in the string\n        for char in string:\n            # Check if the character is uppercase\n            if is_upper(char):\n                # Add its ASCII value to the total sum\n                total += ascii_value(char)\n        \n        return total\n    \n    # Get the sum of ASCII values of upper cases in the input string\n    return sum_upper_ascii(s)"}
{"task_id": "HumanEval/67", "completion": "def extract_fruit_counts(fruit_string):\n    \"\"\"\n    Extract the number of apples and oranges from the given string.\n    \n    Args:\n    fruit_string: str - A string in the format \"{x} apples and {y} oranges\"\n    \n    Returns:\n    Tuple[int, int] - A tuple containing the count of apples and oranges.\n    \"\"\"\n    # Split the string to isolate the counts of apples and oranges\n    parts = fruit_string.split()\n    apples = int(parts[0])  # First number corresponds to apples\n    oranges = int(parts[3]) # Fourth part corresponds to oranges (after \"and\")\n    \n    return (apples, oranges)\n\ndef fruit_distribution(s, n):\n    \"\"\"\n    Compute the number of mango fruits in the basket given the counts of apples and oranges\n    and the total number of fruits.\n    \n    Args:\n    s : str - String representing the number of apples and oranges in the format \"{x} apples and {y} oranges\"\n    n : int - Total number of fruits in the basket\n    \n    Returns:\n    int - The number of mango fruits in the basket.\n    \"\"\"\n    # Extract the counts of apples and oranges\n    apples, oranges = extract_fruit_counts(s)\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Test cases to verify the solution\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))   # should return 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))    # should return 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))  # should return 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # should return 19"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"\n    Determines if a string s is happy.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    Args:\n    s (str): The input string.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    def has_distinct_triplet(substring):\n        \"\"\"\n        Checks if three consecutive characters in the substring are all distinct.\n        \n        Args:\n        substring (str): A string of length 3.\n        \n        Returns:\n        bool: True if all characters are distinct, False otherwise.\n        \"\"\"\n        return len(set(substring)) == 3\n\n    # The length of string should be at least 3 to check triplets\n    if len(s) < 3:\n        return False\n\n    # Check each triplet in the string\n    for i in range(len(s) - 2):\n        if not has_distinct_triplet(s[i:i+3]):\n            return False\n\n    return True\n\n# Test cases\nprint(is_happy('a'))       # Expected output: False\nprint(is_happy('aa'))      # Expected output: False\nprint(is_happy('abcd'))    # Expected output: True\nprint(is_happy('aabb'))    # Expected output: False\nprint(is_happy('adb'))     # Expected output: True\nprint(is_happy('xyy'))     # Expected output: False"}
{"task_id": "HumanEval/81", "completion": "def gpa_to_letter_grade(gpa):\n    \"\"\"Convert an individual GPA to a letter grade based on the given grading table.\n    \n    Args:\n        gpa (float): The GPA of a student.\n        \n    Returns:\n        str: The corresponding letter grade.\n    \"\"\"\n    if gpa == 4.0:\n        return 'A+'\n    elif gpa > 3.7:\n        return 'A'\n    elif gpa > 3.3:\n        return 'A-'\n    elif gpa > 3.0:\n        return 'B+'\n    elif gpa > 2.7:\n        return 'B'\n    elif gpa > 2.3:\n        return 'B-'\n    elif gpa > 2.0:\n        return 'C+'\n    elif gpa > 1.7:\n        return 'C'\n    elif gpa > 1.3:\n        return 'C-'\n    elif gpa > 1.0:\n        return 'D+'\n    elif gpa > 0.7:\n        return 'D'\n    elif gpa > 0.0:\n        return 'D-'\n    else:\n        return 'E'\n\ndef numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs to their corresponding letter grades.\n    \n    Args:\n        grades (list of float): A list of GPAs.\n        \n    Returns:\n        list of str: A list of corresponding letter grades.\n    \"\"\"\n    # Convert each GPA to a letter grade using the helper function\n    letter_grades = [gpa_to_letter_grade(gpa) for gpa in grades]\n    return letter_grades\n\n# Example usage of the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # ==> ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/86", "completion": "def sort_word(word):\n    \"\"\"\n    Sorts characters in a word in ascending order based on their ASCII values.\n    \n    Parameters:\n    word (str): The word to be sorted.\n    \n    Returns:\n    str: A new string with characters of the original word sorted.\n    \"\"\"\n    return ''.join(sorted(word, key=lambda c: ord(c)))\n\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ASCII value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \n    Parameters:\n    s (str): The input string containing words and spaces.\n    \n    Returns:\n    str: A new string with each word's characters sorted in ascending ASCII order.\n    \"\"\"\n    \n    def sort_each_word_in_sentence(sentence):\n        \"\"\"\n        Splits a sentence into words, sorts each word's characters,\n        and rejoins them to form a new sentence.\n        \n        Parameters:\n        sentence (str): The sentence to process.\n        \n        Returns:\n        str: The sentence with each word's characters sorted.\n        \"\"\"\n        # Split the sentence using spaces as delimiters, keeping spaces intact\n        words = sentence.split(' ')\n        # Sort characters within each word\n        sorted_words = [sort_word(word) for word in words]\n        # Rejoin words by spaces\n        return ' '.join(sorted_words)\n\n    return sort_each_word_in_sentence(s)"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    \n    # Helper function to remove duplicates from a list\n    def remove_duplicates(lst):\n        return list(set(lst))\n    \n    # Helper function to find the second smallest element in a list\n    def find_second_smallest(lst):\n        if len(lst) < 2:\n            return None\n        lst.sort()\n        return lst[1]\n    \n    lst_no_duplicates = remove_duplicates(lst)\n    return find_second_smallest(lst_no_duplicates)\n    \n# Testing the function with the provided test cases\nprint(next_smallest([1, 2, 3, 4, 5])) # Expected output: 2\nprint(next_smallest([5, 1, 4, 3, 2])) # Expected output: 2\nprint(next_smallest([])) # Expected output: None\nprint(next_smallest([1, 1])) # Expected output: None"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to \n    binary format. The function should return a string, with each character representing a binary \n    number. Each character in the string will be '0' or '1'.\n    \n    There will be an extra couple of characters 'db' at the beginning and at the end of the string. \n    The extra characters are there to help with the format.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    \n    def convert_to_binary(n):\n        \"\"\"Converts a decimal number to binary representation as a string.\"\"\"\n        if n == 0:\n            return \"0\"\n        binary = []\n        while n > 0:\n            binary.append(str(n % 2))\n            n = n // 2\n        binary.reverse()\n        return ''.join(binary)\n    \n    # Convert the decimal number to binary\n    binary_representation = convert_to_binary(decimal)\n    \n    # Adding 'db' at the beginning and the end\n    formatted_binary_representation = f\"db{binary_representation}db\"\n    \n    return formatted_binary_representation\n\n# Example usage:\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\nprint(decimal_to_binary(0))    # Output: \"db0db\""}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Edge case for single-digit number\n    if n == 1:\n        return 1  # Only the digit '1'\n\n    def count_starting_with_1(digits):\n        \"\"\"\n        Given the number of digits, return the count of numbers that start with 1.\n        \"\"\"\n        # First digit is '1', remaining digits can be anything from 0-9\n        return 9 ** (digits - 1)\n\n    def count_ending_with_1(digits):\n        \"\"\"\n        Given the number of digits, return the count of numbers that end with 1.\n        \"\"\"\n        # Last digit is '1', preceding digits can be anything from 1-9 for the first digit and 0-9 for the rest\n        return 9 * 10 ** (digits - 2)\n\n    def count_starting_and_ending_with_1(digits):\n        \"\"\"\n        Given the number of digits, return the count of numbers that start and end with 1.\n        \"\"\"\n        # Both first and last digit are '1', remaining digits can be anything from 0-9\n        return 10 ** (digits - 2)\n\n    # Total starts with 1 + ends with 1 - starts and ends with 1 (to avoid double counting)\n    count_start_1 = count_starting_with_1(n)\n    count_end_1 = count_ending_with_1(n)\n    count_start_and_end_1 = count_starting_and_ending_with_1(n)\n    \n    # Summing up and subtracting the double-counted cases\n    return count_start_1 + count_end_1 - count_start_and_end_1\n\n# Example usage\n# print(starts_one_ends(2))  # expected output: 18\n# print(starts_one_ends(3))  # expected output: 180"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    def rotate_char(c, shift_amount):\n        \"\"\"Rotate a character by the given shift amount, wrapping around the alphabet.\n        \n        Args:\n            c (str): The character to rotate.\n            shift_amount (int): The amount to shift the character.\n        \n        Returns:\n            str: The rotated character.\n        \"\"\"\n        if 'a' <= c <= 'z':  # Ensure the character is a lowercase letter\n            new_pos = (ord(c) - ord('a') + shift_amount) % 26\n            return chr(ord('a') + new_pos)\n        else:\n            return c  # Return the character unchanged if it's not a lowercase letter\n\n    shift_amount = 4  # We are rotating the alphabet by 8 positions (2 * 2 = 4)\n    encrypted_chars = [rotate_char(c, shift_amount) for c in s]\n    return ''.join(encrypted_chars)\n\n# Example usage:\n# print(encrypt('hi'))  # Output should be 'lm'\n# print(encrypt('asdfghjkl'))  # Output should be 'ewhjklnop'\n# print(encrypt('gf'))  # Output should be 'kj'\n# print(encrypt('et'))  # Output should be 'ix'"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef is_valid_triangle(a, b, c):\n    \"\"\"\n    Check if three sides can form a valid triangle.\n    A valid triangle should satisfy the condition that the sum of any two sides\n    is greater than the third side.\n    \n    Args:\n    a (float): The length of the first side.\n    b (float): The length of the second side.\n    c (float): The length of the third side.\n\n    Returns:\n    bool: True if the sides form a valid triangle, False otherwise.\n    \"\"\"\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\ndef calculate_area(a, b, c):\n    \"\"\"\n    Calculate the area of a triangle using Heron's formula.\n    Heron's formula states that the area of a triangle whose sides have lengths\n    a, b, and c is sqrt(s * (s - a) * (s - b) * (s - c)), where s is the \n    semi-perimeter of the triangle.\n\n    Args:\n    a (float): The length of the first side.\n    b (float): The length of the second side.\n    c (float): The length of the third side.\n    \n    Returns:\n    float: The area of the triangle.\n    \"\"\"\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise, return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n\n    Args:\n    a (float): The length of the first side.\n    b (float): The length of the second side.\n    c (float): The length of the third side.\n\n    Returns:\n    float: The area of the triangle rounded to 2 decimal points if valid, -1 otherwise.\n\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if not is_valid_triangle(a, b, c):\n        return -1\n    area = calculate_area(a, b, c)\n    return round(area, 2)"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: Sum of the even integers present at odd indices in the list.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n    def is_even(n):\n        \"\"\"Check if a number is even.\n\n        Args:\n            n (int): The number to check.\n\n        Returns:\n            bool: True if the number is even, False otherwise.\n        \"\"\"\n        return n % 2 == 0\n\n    def is_odd_index(i):\n        \"\"\"Check if the index is odd.\n\n        Args:\n            i (int): The index to check.\n\n        Returns:\n            bool: True if the index is odd, False otherwise.\n        \"\"\"\n        return i % 2 != 0\n\n    def sum_even_at_odd_indices(lst):\n        \"\"\"Sum even numbers that are found at odd indices in the list.\n\n        Args:\n            lst (list): List of integers.\n\n        Returns:\n            int: Sum of even numbers at odd indices.\n        \"\"\"\n        total = 0\n        for i in range(len(lst)):\n            if is_odd_index(i) and is_even(lst[i]):\n                total += lst[i]\n        return total\n\n    # Main function execution\n    return sum_even_at_odd_indices(lst)\n\n# Example usage:\n# result = add([4, 2, 6, 7])\n# print(result)  # Output: 2"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example:\n        For N = 1000, the sum of digits will be 1, the output should be \"1\".\n        For N = 150, the sum of digits will be 6, the output should be \"110\".\n        For N = 147, the sum of digits will be 12, the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \n    def sum_of_digits(number):\n        \"\"\"\n        Calculate the sum of the digits of the given number.\n        \n        @number: integer, the given number\n                  Constraints: 0 \u2264 number \u2264 10000\n\n        Returns: integer, the sum of its digits\n        \"\"\"\n        # Convert number to string to iterate over its digits\n        return sum(int(digit) for digit in str(number))\n\n    def int_to_binary(number):\n        \"\"\"\n        Convert an integer to its binary representation as a string.\n        \n        @number: integer, the given number\n\n        Returns: string, the binary representation of the number\n        \"\"\"\n        return bin(number)[2:]  # bin() returns a string prefixed with '0b', so we slice off the first two characters\n\n    # Main logic\n    sum_digits = sum_of_digits(N)\n    binary_representation = int_to_binary(sum_digits)\n\n    return binary_representation\n\n# Example Usage:\n# print(solve(1000))  # Output: \"1\"\n# print(solve(150))   # Output: \"110\"\n# print(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \n    A prime number is defined as a number greater than 1 that is not a product\n    of two smaller natural numbers. This function returns True if the number \n    is prime, else False.\n    \n    Parameters:\n    n (int): The number to check for primality.\n    \n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True  # 2 is the only even prime number\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\n    Determine if the length of a string is a prime number.\n    \n    This function takes a string as input and returns True if the length of the\n    string is prime, and False otherwise.\n    \n    Parameters:\n    string (str): The input string to check.\n    \n    Returns:\n    bool: True if the length of the string is prime, False otherwise.\n    \n    Examples:\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n    False\n    \"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Example usage:\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\n    \n    Arguments:\n    n -- integer to be checked for primality\n    \n    Returns:\n    True if n is a prime number, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_factors(n):\n    \"\"\"Generate a list of prime factors of a number.\n    \n    Arguments:\n    n -- integer to factorize\n    \n    Returns:\n    A list of prime factors of n\n    \"\"\"\n    factors = []\n    # Check for number of 2s in n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for other primes\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication\n    of 3 prime numbers and false otherwise. Knowing that (a) is less then 100.\n    \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    factors = prime_factors(a)\n    # We need exactly 3 prime factors\n    if len(factors) != 3:\n        return False\n    # Each of the 3 factors should be a prime\n    return all(is_prime(factor) for factor in factors)\n\n# Example Usage\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(60)) # True (2 * 2 * 3 * 5, but this should return False because there is 2 twice)\nprint(is_multiply_prime(29)) # False (Since it's a prime number not a product of 3 primes)"}
{"task_id": "HumanEval/92", "completion": "def is_integer_number(n):\n    \"\"\"\n    Check if the given number is an integer.\n    \n    :param n: Number to be checked.\n    :return: True if n is an integer, otherwise False.\n    \"\"\"\n    return isinstance(n, int)\n\ndef is_sum_of_others(a, b, c):\n    \"\"\"\n    Check if any one of the three numbers is equal to the sum of the other two.\n    \n    :param a: First number.\n    :param b: Second number.\n    :param c: Third number.\n    :return: True if any one number is the sum of the other two, otherwise False.\n    \"\"\"\n    return a == b + c or b == a + c or c == a + b\n\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all numbers are integers\n    if not (is_integer_number(x) and is_integer_number(y) and is_integer_number(z)):\n        return False\n    \n    # Check if one number is the sum of the other two\n    return is_sum_of_others(x, y, z)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    def split_into_sentences(text):\n        \"\"\"\n        Splits the text into individual sentences based on '.', '?' or '!'.\n        \n        Args:\n        text (str): The input string containing sentences.\n        \n        Returns:\n        list: List of sentences.\n        \"\"\"\n        import re\n        # Using regex to split text by '.', '?' or '!'\n        sentences = re.split(r'[.!?]', text)\n        return sentences\n\n    def starts_with_i(sentence):\n        \"\"\"\n        Checks if a sentence starts with the word \"I\".\n        \n        Args:\n        sentence (str): A single sentence.\n        \n        Returns:\n        bool: True if the sentence starts with \"I\", otherwise False.\n        \"\"\"\n        # Strip leading and trailing spaces and check if it starts with \"I\"\n        return sentence.strip().startswith(\"I\")\n    \n    # Split the input string into sentences\n    sentences = split_into_sentences(S)\n    \n    # Count the sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if starts_with_i(sentence))\n    \n    return boredom_count\n\n# Example usages:\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested list,\n    which is similar to a matrix. However, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integer x in the list,\n    and return a list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, column), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n    def find_coordinates(matrix, target):\n        \"\"\"\n        Find all coordinates of the target value in the matrix.\n        \n        Args:\n        matrix (list of lists): The 2D list to search within.\n        target (int): The value to search for.\n        \n        Returns:\n        list of tuples: List of (row, column) coordinates where the target is found.\n        \"\"\"\n        coordinates = []\n        for row_index, row in enumerate(matrix):\n            for col_index, value in enumerate(row):\n                if value == target:\n                    coordinates.append((row_index, col_index))\n        return coordinates\n\n    def sort_coordinates(coords):\n        \"\"\"\n        Sort coordinates first by row in ascending order and then by column in descending order within each row.\n        \n        Args:\n        coords (list of tuples): The coordinates to sort.\n        \n        Returns:\n        list of tuples: Sorted coordinates.\n        \"\"\"\n        from functools import cmp_to_key\n        \n        def compare(c1, c2):\n            # First compare by row (ascending)\n            if c1[0] != c2[0]:\n                return c1[0] - c2[0]\n            # Then compare by column (descending)\n            return c2[1] - c1[1]\n        \n        return sorted(coords, key=cmp_to_key(compare))\n    \n    # Find coordinates of the target value in the matrix\n    coordinates = find_coordinates(lst, x)\n    \n    # Sort the coordinates as per the requirement\n    sorted_coordinates = sort_coordinates(coordinates)\n    \n    return sorted_coordinates"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    def is_upper_vowel(c):\n        \"\"\"\n        Check if a character is an uppercase vowel.\n        \n        Parameters:\n            c (str): Single character to check.\n            \n        Returns:\n            bool: True if c is an uppercase vowel, False otherwise.\n        \"\"\"\n        return c in 'AEIOU'\n    \n    def is_even_index(index):\n        \"\"\"\n        Check if an index is even.\n        \n        Parameters:\n            index (int): Index to check.\n            \n        Returns:\n            bool: True if index is even, False otherwise.\n        \"\"\"\n        return index % 2 == 0\n    \n    count = 0\n    for i, char in enumerate(s):\n        if is_even_index(i) and is_upper_vowel(char):\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n\n    Examples:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    def is_prime(num):\n        \"\"\"Check if the given number is a prime number.\"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def get_primes_less_than(max_num):\n        \"\"\"Return a list of prime numbers less than a given max number.\"\"\"\n        primes = []\n        for i in range(2, max_num):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n    \n    # Handle edge case for n = 0 or n = 1\n    if n <= 1:\n        return []\n    \n    # Get prime numbers less than n\n    primes = get_primes_less_than(n)\n    \n    return primes"}
{"task_id": "HumanEval/97", "completion": "def get_unit_digit(number):\n    \"\"\"\n    Helper function to get the unit digit of a given integer.\n    \n    Args:\n    number (int): The integer number from which to extract the unit digit.\n    \n    Returns:\n    int: The unit digit of the given number.\n    \"\"\"\n    # The unit digit is the remainder when the number is divided by 10.\n    # `abs` is used to handle negative numbers correctly.\n    return abs(number) % 10\n\ndef multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    \n    Assume the input is always valid.\n    \n    Args:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The product of the unit digits.\n    \n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Get the unit digits of both numbers\n    unit_digit_a = get_unit_digit(a)\n    unit_digit_b = get_unit_digit(b)\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Example usage:\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))    # should return 72\nprint(multiply(2020, 1851))# should return 0\nprint(multiply(14, -15))   # should return 20"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    def round_away_from_zero(number):\n        \"\"\"\n        Rounds a float number away from zero if it is equidistant\n        from two integers. Otherwise, performs regular rounding.\n\n        Args:\n            number (float): The number to round.\n\n        Returns:\n            int: The rounded integer.\n        \"\"\"\n        if number > 0:\n            return int(number + 0.5)\n        else:\n            return int(number - 0.5)\n    \n    # Convert the string value to a float\n    float_value = float(value)\n    \n    # Round the number using the custom rounding function\n    rounded_value = round_away_from_zero(float_value)\n    \n    return rounded_value\n\n# Test cases\nprint(closest_integer(\"10\"))   # Outputs: 10\nprint(closest_integer(\"15.3\")) # Outputs: 15\nprint(closest_integer(\"14.5\")) # Outputs: 15\nprint(closest_integer(\"-14.5\")) # Outputs: -15"}
{"task_id": "HumanEval/93", "completion": "def swap_case(char):\n    \"\"\"\n    Swap the case of a given character.\n    \n    :param char: A single character.\n    :return: The character with its case swapped.\n    \"\"\"\n    if char.islower():\n        return char.upper()\n    else:\n        return char.lower()\n\ndef shift_vowel(char):\n    \"\"\"\n    Shift vowels 2 places ahead in the alphabet.\n    \n    :param char: A single vowel character.\n    :return: The character that is 2 places ahead of the vowel in the alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    shifts = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    if char in vowels:\n        return shifts[char]\n    return char\n\ndef encode(message):\n    \"\"\"\n    Encode the message by swapping the case of all letters and \n    replacing all vowels with the letter that appears 2 places \n    ahead of that vowel in the English alphabet.\n    \n    :param message: The input string message.\n    :return: The encoded message as a string.\n    \"\"\"\n    encoded_message = []\n\n    for char in message:\n        swapped_char = swap_case(char)\n        encoded_char = shift_vowel(swapped_char)\n        encoded_message.append(encoded_char)\n\n    return ''.join(encoded_message)\n\n# Example usage:\n# print(encode('test')) # outputs: 'TGST'\n# print(encode('This is a message')) # outputs: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/102", "completion": "def is_even(n):\n    \"\"\"\n    Check if a number is even.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0\n\ndef choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the biggest \n    even integer number that is in the range [x, y] inclusive. If there's no \n    such number, then the function should return -1.\n\n    Args:\n    x (int): The lower bound of the range.\n    y (int): The upper bound of the range.\n\n    Returns:\n    int: The biggest even integer in the range [x, y], or -1 if no such number exists.\n    \"\"\"\n    # Ensure x is smaller or equal to y for range checking\n    if x > y:\n        return -1\n    \n    # Start from the upper bound and move down to the lower bound\n    for num in range(y, x-1, -1):\n        if is_even(num):\n            return num\n    \n    # If no even number is found in the range\n    return -1\n\n# Example Usage:\n# choose_num(12, 15) = 14\n# choose_num(13, 12) = -1"}
{"task_id": "HumanEval/103", "completion": "def compute_sum(n, m):\n    \"\"\"Calculate the sum of integers from n to m inclusive.\"\"\"\n    return sum(range(n, m + 1))\n\ndef count_numbers(n, m):\n    \"\"\"Count the number of integers from n to m inclusive.\"\"\"\n    return m - n + 1\n\ndef calculate_average(total, count):\n    \"\"\"Compute the average, rounded to the nearest integer.\"\"\"\n    return round(total / count)\n\ndef convert_to_binary(num):\n    \"\"\"Convert a given integer to its binary representation.\"\"\"\n    return bin(num)\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    \n    total_sum = compute_sum(n, m)\n    count = count_numbers(n, m)\n    avg = calculate_average(total_sum, count)\n    \n    return convert_to_binary(avg)\n\n# Test cases\nprint(rounded_avg(1, 5))  # Expected output: \"0b11\"\nprint(rounded_avg(7, 5))  # Expected output: -1\nprint(rounded_avg(10, 20))  # Expected output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Expected output: \"0b11010\""}
{"task_id": "HumanEval/95", "completion": "def are_keys_uniform_case(dict):\n    \"\"\"\n    Determine if all keys in the dictionary are uniformly in lower case or\n    upper case.\n\n    Parameters:\n    dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are uniformly lower case or uniformly upper case,\n          False otherwise.\n    \"\"\"\n    if not dict:\n        return False\n\n    keys = dict.keys()\n\n    # Determine the casing of the first string key (lower, upper, or mixed)\n    first_string_key = next((key for key in keys if isinstance(key, str)), None)\n    if first_string_key is None:\n        return False\n\n    all_lower = first_string_key.islower()\n    all_upper = first_string_key.isupper()\n\n    # Check if all other string keys match the casing of the first string key\n    for key in keys:\n        if isinstance(key, str):\n            if all_lower and not key.islower():\n                return False\n            if all_upper and not key.isupper():\n                return False\n\n    return True\n\n\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n\n    Parameters:\n    dict (dict): The dictionary to check.\n\n    Returns:\n    bool: True if all keys are uniformly lower case or upper case, and\n          the dictionary is non-empty, False otherwise.\n          \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return are_keys_uniform_case(dict)\n\n# Example test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # True"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime.\n    \n    Args:\n        n (int): The number to check.\n    \n    Returns:\n        bool: True if the number is a prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of digits of a number.\n    \n    Args:\n        n (int): The input number.\n    \n    Returns:\n        int: The sum of the digits of the number.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Args:\n        lst (list): A list of integers.\n    \n    Returns:\n        int: The sum of the digits of the largest prime number in the list, or 0 if no prime is found.\n    \"\"\"\n    max_prime = -1\n    for num in lst:\n        if is_prime(num):\n            if num > max_prime:\n                max_prime = num\n    \n    if max_prime == -1:\n        return 0\n    \n    return sum_of_digits(max_prime)\n\n# Examples:\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21])) # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7])) # Output: 7"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Step 1: Remove commas and split the string by spaces to get all possible words\n    words = split_string(remove_commas(s))\n    \n    # Step 2: Filter out any empty strings that may have been included in the list\n    words = filter_empty_strings(words)\n    \n    return words\n\ndef remove_commas(s):\n    \"\"\"\n    Helper function to remove commas from the input string.\n    \n    Args:\n    s (str): Input string possibly containing commas\n    \n    Returns:\n    str: String with commas removed\n    \"\"\"\n    return s.replace(',', '')\n\ndef split_string(s):\n    \"\"\"\n    Helper function to split the input string by spaces.\n    \n    Args:\n    s (str): Input string separated by spaces\n    \n    Returns:\n    list: List of words split by spaces\n    \"\"\"\n    return s.split()\n\ndef filter_empty_strings(word_list):\n    \"\"\"\n    Helper function to remove empty strings from a list of words.\n    \n    Args:\n    word_list (list): List of words that may contain empty strings\n    \n    Returns:\n    list: List of words with empty strings removed\n    \"\"\"\n    return [word for word in word_list if word]\n\n# Example usage:\n# print(words_string(\"Hi, my name is John\")) # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# print(words_string(\"One, two, three, four, five, six\")) # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    \n    def sum_of_digits(n):\n        \"\"\"\n        Given an integer n, return the sum of its digits considering signs.\n        \"\"\"\n        # Convert to string to iterate over digits\n        digits = str(n)\n        total_sum = 0\n        # Iterate over each digit\n        for i, ch in enumerate(digits):\n            if ch == '-':\n                continue\n            if i == 0 and digits[0] == '-':\n                total_sum += -int(ch)  # First digit is negative if number is negative\n            else:\n                total_sum += int(ch)  # All other digits are positive\n        return total_sum\n    \n    count = 0\n    # Count how many numbers have a sum of digits greater than zero\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n\n# Test cases\nprint(count_nums([]))  # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))  # Output: 3"}
{"task_id": "HumanEval/106", "completion": "def factorial(num):\n    \"\"\"Calculate the factorial of a given number num.\n    \n    Args:\n    num (int): The number to calculate the factorial of.\n    \n    Returns:\n    int: The factorial of the number.\n    \"\"\"\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef sum_of_numbers(num):\n    \"\"\"Calculate the sum of all numbers from 1 to a given number num.\n    \n    Args:\n    num (int): The number to which the sum should be calculated.\n    \n    Returns:\n    int: The sum of numbers from 1 to num.\n    \"\"\"\n    return num * (num + 1) // 2\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \n    Args:\n    n (int): The size of the list to be returned.\n    \n    Returns:\n    list: A list of size n where elements are either factorial or sum of numbers based on the index parity.\n    \n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    \n    return result\n\n# Example usage:\nprint(f(5))  # Output should be [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/104", "completion": "def has_even_digit(n):\n    \"\"\"\n    Check if the given integer has any even digit.\n    \n    Parameters:\n    n (int): The integer to check\n    \n    Returns:\n    bool: True if the integer has any even digit, False otherwise\n    \"\"\"\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            return True\n        n //= 10\n    return False\n\n\ndef unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Parameters:\n    x (list of int): The list of positive integers to filter\n    \n    Returns:\n    list of int: A sorted list of integers that do not contain any even digits\n    \n    Note: Returned list should be sorted in increasing order.\n    \n    Examples:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Filter out numbers that contain any even digit\n    result = [num for num in x if not has_even_digit(num)]\n    # Sort the result in increasing order\n    result.sort()\n    return result\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Expected: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Expected: []\nprint(unique_digits([135, 337, 977, 123]))  # Expected: [135, 337, 977]\nprint(unique_digits([240, 404, 1235, 44555]))  # Expected: []\nprint(unique_digits([]))  # Expected: []"}
{"task_id": "HumanEval/112", "completion": "def is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome.\n    \n    Parameters:\n    s (str): The string to check.\n    \n    Returns:\n    bool: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef remove_characters(s, c):\n    \"\"\"\n    Remove all characters in s that are found in c.\n    \n    Parameters:\n    s (str): The original string.\n    c (str): The set of characters to remove from s.\n    \n    Returns:\n    str: The resulting string after removal.\n    \"\"\"\n    return ''.join(char for char in s if char not in c)\n\ndef reverse_delete(s, c):\n    \"\"\"\n    Task:\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the resultant string is a palindrome.\n    A string is called a palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \n    Parameters:\n    s (str): The original string.\n    c (str): The set of characters to remove from s.\n    \n    Returns:\n    tuple: A tuple containing the resultant string and a boolean indicating if the resultant string is a palindrome.\n    \n    Example:\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    # Remove characters present in c from s\n    modified_string = remove_characters(s, c)\n    \n    # Check if the modified string is a palindrome\n    palindrome_check = is_palindrome(modified_string)\n    \n    # Return the resultant string and the palindrome check\n    return modified_string, palindrome_check"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Helper function to filter valid integers and sort/reverse them\n    def filter_sort_reverse(arr):\n        \"\"\"\n        Filters integers between 1 and 9 inclusive from the array, sorts them,\n        and then reverses the sorted array.\n        \n        :param arr: List of integers\n        :return: Reversed list of filtered and sorted integers\n        \"\"\"\n        valid_numbers = [num for num in arr if 1 <= num <= 9]  # Filter valid integers\n        valid_numbers.sort()  # Sort the valid numbers\n        valid_numbers.reverse()  # Reverse the sorted list\n        return valid_numbers\n    \n    # Helper function to map integers to their corresponding names\n    def map_number_to_name(arr):\n        \"\"\"\n        Maps integers to their corresponding names.\n        \n        :param arr: List of integers between 1 and 9 inclusive\n        :return: List of corresponding names as strings\n        \"\"\"\n        number_to_name = {\n            1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n            6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n        }\n        return [number_to_name[num] for num in arr]\n    \n    # Main logic\n    filtered_sorted_reversed = filter_sort_reverse(arr)\n    return map_number_to_name(filtered_sorted_reversed)\n\n# Example call\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # Output: ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"}
{"task_id": "HumanEval/109", "completion": "def is_sorted(arr):\n    \"\"\"\n    Helper function to check if the given array is sorted in non-decreasing order.\n\n    Parameters:\n    arr (list): List of integers to be checked.\n    \n    Returns:\n    bool: True if the list is sorted in non-decreasing order, False otherwise.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:\n        return True\n    \n    n = len(arr)\n    \n    for i in range(n):\n        # Perform right shift\n        shifted_arr = arr[-i:] + arr[:-i]\n        if is_sorted(shifted_arr):\n            return True\n\n    return False\n\n# Example Usages\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    Args:\n        lst (list): List of strings where each string consists of only digits.\n\n    Returns:\n        list: List of formatted strings with odd element counts.\n    \n    Examples:\n        >>> odd_count(['1234567'])\n        [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        >>> odd_count(['3',\"11111111\"])\n        [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n         \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    def count_odd_digits(s):\n        \"\"\"Counts the number of odd digits in a string of digits.\n\n        Args:\n            s (str): A string of digits.\n\n        Returns:\n            int: The count of odd digits.\n        \"\"\"\n        return sum(1 for char in s if char in '13579')\n    \n    def format_output_string(count):\n        \"\"\"Formats the output string based on the count of odd digits.\n\n        Args:\n            count (int): The count of odd digits.\n\n        Returns:\n            str: The formatted string with odd digit counts.\n        \"\"\"\n        return f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"\n\n    # Calculate the list of counts of odd digits for each input string\n    counts = [count_odd_digits(s) for s in lst]\n    \n    # Generate the final formatted outputs using the counts\n    result = [format_output_string(count) for count in counts]\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(odd_count(['1234567']))\n    print(odd_count(['3', \"11111111\"]))"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n\n    def should_sort_ascending(array):\n        \"\"\"\n        Determine if the array should be sorted in ascending order.\n        \n        Parameters:\n        array (list of int): The input array.\n        \n        Returns:\n        bool: True if the sum of the first and last element is odd, False otherwise.\n        \"\"\"\n        first_val = array[0]\n        last_val = array[-1]\n        return (first_val + last_val) % 2 == 1\n\n    def copy_sort(array, ascending=True):\n        \"\"\"\n        Return a sorted copy of the array.\n        \n        Parameters:\n        array (list of int): The input array.\n        ascending (bool): Flag to determine if sorting should be ascending or descending.\n        \n        Returns:\n        list of int: A sorted copy of the array.\n        \"\"\"\n        return sorted(array, reverse=not ascending)\n\n    # Determine if the array should be sorted in ascending order\n    ascending = should_sort_ascending(array)\n\n    # Return the sorted copy of the array\n    return copy_sort(array, ascending)\n\n# Examples\nprint(sort_array([]))              # => []\nprint(sort_array([5]))             # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6])) # => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"\n    Given a string representing space-separated lowercase letters, return a dictionary\n    of the letter with the most repetition and its corresponding count. If several letters\n    have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    def count_occurrences(letters):\n        \"\"\"\n        Create a frequency dictionary for the given list of letters.\n        \n        Args:\n        letters (list): A list of single character strings\n        \n        Returns:\n        dict: A dictionary where keys are letters and values are their respective counts\n        \"\"\"\n        freq_dict = {}\n        for letter in letters:\n            if letter:\n                freq_dict[letter] = freq_dict.get(letter, 0) + 1\n        return freq_dict\n\n    def get_max_occurrence_letters(freq_dict):\n        \"\"\"\n        Get all letters with the highest occurrence from a frequency dictionary.\n        \n        Args:\n        freq_dict (dict): A dictionary where keys are letters and values are their counts\n\n        Returns:\n        dict: A dictionary containing the letters with the highest occurrence and their counts\n        \"\"\"\n        if not freq_dict:\n            return {}\n        \n        max_count = max(freq_dict.values())\n        return {letter: count for letter, count in freq_dict.items() if count == max_count}\n    \n    # Split the input string by space to get individual letters\n    letters = test.split()\n\n    # Edge case: if the input string is empty or contains only spaces\n    if not letters:\n        return {}\n\n    # Step 1: Create the frequency dictionary\n    freq_dict = count_occurrences(letters)\n    \n    # Step 2: Identify the letters with the highest occurrences\n    max_occurrence_letters = get_max_occurrence_letters(freq_dict)\n    \n    return max_occurrence_letters"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input array must not be empty\")\n    \n    def kadane_min_subarray(nums):\n        \"\"\"\n        Helper function to implement Kadane's algorithm for finding the minimum sum subarray.\n        \"\"\"\n        min_ending_here = float('inf')\n        min_so_far = float('inf')\n\n        for num in nums:\n            min_ending_here = min(min_ending_here + num, num)  # Extend the current subarray or start a new one\n            min_so_far = min(min_so_far, min_ending_here)      # Update the minimum sum found so far\n\n        return min_so_far\n    \n    # Edge case check: single element array\n    if len(nums) == 1:\n        return nums[0]\n\n    # Applying Kadane's algorithm to find the minimum sum subarray\n    return kadane_min_subarray(nums)\n\n# Example usages:\n# print(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\n# print(minSubArraySum([-1, -2, -3]))        # Output: -6"}
{"task_id": "HumanEval/100", "completion": "def next_odd(num):\n    \"\"\"\n    Given a number, return the next odd number.\n    If the number is odd, return the number + 2.\n    If the number is even, return the number + 1.\n    \n    :param num: Integer, the starting number.\n    :return: Integer, the next odd number.\n    \"\"\"\n    return num + 2 if num % 2 != 0 else num + 1\n\ndef next_even(num):\n    \"\"\"\n    Given a number, return the next even number.\n    If the number is odd, return the number + 1.\n    If the number is even, return the number + 2.\n    \n    :param num: Integer, the starting number.\n    :return: Integer, the next even number.\n    \"\"\"\n    return num + 1 if num % 2 != 0 else num + 2\n\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \n    :param n: Positive integer, the number of levels in the pile.\n    :return: List of integers, each representing the number of stones in a level.\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    current_stones = n\n    \n    for _ in range(1, n):\n        if n % 2 == 0:\n            current_stones = next_even(current_stones)\n        else:\n            current_stones = next_odd(current_stones)\n        pile.append(current_stones)\n    \n    return pile"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \n    A number is considered a palindrome if it reads the same backward as forward.\n    \n    :param num: An integer to be checked.\n    :return: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef count_even_odd_palindromes(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that counts the number of even and odd \n    integer palindromes that fall within the range(1, n), inclusive.\n    \n    :param n: Positive integer range endpoint\n    :return: A tuple of the counts of even and odd integer palindromes respectively \n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    \n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n    \n    :param n: Positive integer range endpoint\n    :return: A tuple of the counts of even and odd integer palindromes respectively\n    \n    Example:\n    \n    even_odd_palindrome(3)\n    -> (1, 2)\n    \"\"\"\n    if n < 1 or n > 1000:\n        raise ValueError(\"Input should be between 1 and 1000, inclusive.\")\n    \n    return count_even_odd_palindromes(n)\n    \n# Example usage:\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, return a list of all words from\n    string s that contain exactly n consonants, in the order these words appear\n    in the string s. If the string s is empty, return an empty list.\n    \n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    def count_consonants(word):\n        \"\"\"Count the number of consonants in a given word.\n        \n        Args:\n            word (str): The word to count consonants in.\n        \n        Returns:\n            int: The number of consonants in the word.\n        \"\"\"\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n    \n    def is_valid_word(word, n):\n        \"\"\"Check if a word has exactly n consonants.\n        \n        Args:\n            word (str): The word to check.\n            n (int): The exact number of consonants the word should have.\n        \n        Returns:\n            bool: True if the word has exactly n consonants, False otherwise.\n        \"\"\"\n        return count_consonants(word) == n\n    \n    # Edge case: if the input string is empty, return an empty list\n    if not s:\n        return []\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Filter and return the words that have exactly n consonants\n    return [word for word in words if is_valid_word(word, n)]\n\n# Example usage:\n# result = select_words(\"Mary had a little lamb\", 4)\n# print(result)  # Output: [\"little\"]"}
{"task_id": "HumanEval/110", "completion": "def is_all_even(lst):\n    \"\"\"\n    Check if all elements in the list are even.\n\n    Parameters:\n    lst (list of int): The list to check.\n\n    Returns:\n    bool: True if all elements are even, False otherwise.\n    \"\"\"\n    return all(x % 2 == 0 for x in lst)\n\ndef can_find_even(lst):\n    \"\"\"\n    Determine if there is at least one even number in the list.\n\n    Parameters:\n    lst (list of int): The list to check.\n\n    Returns:\n    bool: True if there is at least one even number, False otherwise.\n    \"\"\"\n    return any(x % 2 == 0 for x in lst)\n\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Check if lst1 already contains only even numbers\n    if is_all_even(lst1):\n        return \"YES\"\n    \n    # Check if lst2 contains any even numbers that can be swapped into lst1\n    if can_find_even(lst2):\n        return \"YES\"\n    \n    # If no even number in lst2 and lst1 is not all even, return \"NO\"\n    return \"NO\"\n\n# Example usage:\n# print(exchange([1, 2, 3, 4], [1, 2, 3, 4])) => Output: \"YES\"\n# print(exchange([1, 2, 3, 4], [1, 5, 3, 4])) => Output: \"NO\""}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    def is_two_digit_number(num):\n        \"\"\"\n        Checks if a given number is a two-digit number.\n\n        Args:\n        num: Integer\n\n        Returns:\n        Boolean indicating if num has at most two digits\n        \"\"\"\n        return -99 <= num <= 99\n\n    def sum_of_two_digit_elements(arr, k):\n        \"\"\"\n        Sums up elements with at most two digits from the first k elements of arr.\n\n        Args:\n        arr: List of integers\n        k: Integer, number of elements to consider from the start of the array\n\n        Returns:\n        Sum of the elements with at most two digits within the first k elements.\n        \"\"\"\n        sum_elements = 0\n        for i in range(k):\n            if is_two_digit_number(arr[i]):\n                sum_elements += arr[i]\n        return sum_elements\n\n    return sum_of_two_digit_elements(arr, k)\n\n# Example usage\nprint(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4))  # Output: 24"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace. If no whitespaces exist in the text, split on commas ','\n    If no commas exist, return the number of lower-case letters with odd order in the alphabet.\n    \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    '''\n    def has_whitespace(s):\n        # Check if the string contains any whitespace character\n        return any(c.isspace() for c in s)\n\n    def split_on_whitespace(s):\n        # Split the string on any whitespace character\n        return s.split()\n\n    def has_comma(s):\n        # Check if the string contains any commas\n        return ',' in s\n\n    def split_on_comma(s):\n        # Split the string on commas\n        return s.split(',')\n\n    def count_odd_letters(s):\n        # Count the number of lowercase letters with odd position in the alphabet\n        odd_count = 0\n        for c in s:\n            if c.islower():\n                if (ord(c) - ord('a')) % 2 != 0:\n                    odd_count += 1\n        return odd_count\n    \n    # Main function logic\n    if has_whitespace(txt):\n        return split_on_whitespace(txt)\n    elif has_comma(txt):\n        return split_on_comma(txt)\n    else:\n        return count_odd_letters(txt)"}
{"task_id": "HumanEval/118", "completion": "def is_vowel(char):\n    \"\"\"\n    Check if a character is a vowel (case sensitive).\n\n    Parameters:\n    char (str): A single character to check.\n\n    Returns:\n    bool: True if the character is a vowel, False otherwise.\n    \"\"\"\n    return char in 'aeiouAEIOU'\n\ndef find_vowel_between_consonants(word):\n    \"\"\"\n    Find the first vowel from the right that is between two consonants.\n\n    Parameters:\n    word (str): The word to search within.\n\n    Returns:\n    str: The vowel found or an empty string if no such vowel exists.\n    \"\"\"\n    for i in range(len(word) - 2, 0, -1):  # Start checking from the third last character to the second character\n        if not is_vowel(word[i]) and is_vowel(word[i - 1]) and not is_vowel(word[i - 2]):\n            return word[i - 1]\n    return \"\"\n\ndef get_closest_vowel(word):\n    \"\"\"\n    You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"  # No space for a vowel between two consonants\n    \n    # Check consonants at both ends and remove if necessary\n    word = word.lstrip(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    word = word.rstrip(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n\n    if len(word) < 3:\n        return \"\"  # No valid space left for a vowel between consonants\n\n    return find_vowel_between_consonants(word)"}
{"task_id": "HumanEval/119", "completion": "def is_balanced(s):\n    \"\"\"\n    Helper function to check if a given string of parentheses is balanced.\n\n    Parameters:\n    s (str): The string containing parentheses to check.\n\n    Returns:\n    bool: True if the string is balanced, otherwise False.\n    \"\"\"\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\ndef can_form_balanced(lst):\n    \"\"\"\n    Check if there exists an order of concatenation of the two strings\n    such that the resulting string is balanced.\n\n    Parameters:\n    lst (list): List of two strings of parentheses.\n\n    Returns:\n    bool: True if a good string can be formed, otherwise False.\n    \"\"\"\n    # Concatenate first string first and then second\n    option1 = lst[0] + lst[1]\n    # Concatenate second string first and then first\n    option2 = lst[1] + lst[0]\n    \n    # Check both concatenation options for being balanced\n    return is_balanced(option1) or is_balanced(option2)\n\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if can_form_balanced(lst):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/115", "completion": "def count_water_units(grid):\n    \"\"\"\n    Counts the total number of units of water (1s) in the grid.\n\n    Parameters:\n    grid (list of list of ints): The grid representing wells and water units.\n\n    Returns:\n    int: The total number of water units in the grid.\n    \"\"\"\n    total_units = 0\n    for row in grid:\n        total_units += sum(row)\n    return total_units\n\ndef calculate_bucket_drops(water_units, capacity):\n    \"\"\"\n    Calculates the number of times the bucket needs to be lowered \n    to extract all the water units given the bucket capacity.\n\n    Parameters:\n    water_units (int): The total number of water units to be extracted.\n    capacity (int): The capacity of the bucket.\n\n    Returns:\n    int: The number of times the bucket needs to be lowered.\n    \"\"\"\n    import math\n    if capacity == 0:\n        raise ValueError(\"Bucket capacity must be greater than 0\")\n    return math.ceil(water_units / capacity)\n\ndef max_fill(grid, capacity):\n    \"\"\"\n    Calculates the number of times the bucket needs to be lowered to empty \n    all the wells in the grid.\n\n    Parameters:\n    grid (list of list of ints): The grid representing wells and water units.\n    capacity (int): The capacity of the bucket.\n\n    Returns:\n    int: The number of times the bucket needs to be lowered.\n    \"\"\"\n    if capacity < 1:\n        return 0  # buckets with zero capacity cannot be lowered\n\n    # Count total water units in the grid\n    total_water_units = count_water_units(grid)\n\n    # Calculate the number of times buckets need to be lowered\n    bucket_drops = calculate_bucket_drops(total_water_units, capacity)\n    \n    return bucket_drops\n\n# Example 1\ngrid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\ncapacity1 = 1\nprint(max_fill(grid1, capacity1)) # Output: 6\n\n# Example 2\ngrid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\ncapacity2 = 2\nprint(max_fill(grid2, capacity2)) # Output: 5\n\n# Example 3\ngrid3 = [[0,0,0], [0,0,0]]\ncapacity3 = 5\nprint(max_fill(grid3, capacity3)) # Output: 0"}
{"task_id": "HumanEval/121", "completion": "def is_odd(num):\n    \"\"\"\n    Check if a given number is odd.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\ndef solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements \n    that are in even positions.\n\n    Args:\n        lst (list of int): A list of integers.\n\n    Returns:\n        int: The sum of all odd integers that are in even positions in the list.\n        \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    def sum_odd_in_even_positions(lst):\n        \"\"\"\n        Sum all odd elements in even positions of the list.\n        \n        Args:\n            lst (list): The list of integers.\n            \n        Returns:\n            int: The sum of the odd elements at even positions.\n        \"\"\"\n        total_sum = 0\n        for index in range(0, len(lst), 2):\n            if is_odd(lst[index]):\n                total_sum += lst[index]\n        return total_sum\n    \n    return sum_odd_in_even_positions(lst)\n\n# Example usage:\n# print(solution([5, 8, 7, 1])) # Expected output: 12\n# print(solution([3, 3, 3, 3, 3])) # Expected output: 9\n# print(solution([30, 13, 24, 321])) # Expected output: 0"}
{"task_id": "HumanEval/126", "completion": "def has_more_than_one_duplicate(lst):\n    \"\"\"\n    Check if the list has more than one duplicate of any number.\n    \n    Args:\n        lst (list): A list of integers.\n        \n    Returns:\n        bool: True if there are more than one duplicates of any number,\n              False otherwise.\n    \"\"\"\n    from collections import Counter\n    counts = Counter(lst)\n    for count in counts.values():\n        if count > 2:\n            return True\n    return False\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        bool: True if the list is sorted in ascending order and has no\n              more than one duplicate of any number, False otherwise.\n    \n    Examples:\n        is_sorted([5]) \u279e True\n        is_sorted([1, 2, 3, 4, 5]) \u279e True\n        is_sorted([1, 3, 2, 4, 5]) \u279e False\n        is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n        is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n        is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n        is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n        is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    # Edge case: if the list has only one element, it is sorted by default\n    if len(lst) <= 1:\n        return True\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    # Check for more than one duplicate of any number\n    if has_more_than_one_duplicate(lst):\n        return False\n    \n    return True"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n\n    # Function to sort the array in descending order and fetch the top k elements\n    def get_top_k_elements(arr, k):\n        \"\"\"Return the top k elements from the array in descending order\"\"\"\n        arr.sort(reverse=True)  # Sort the array in descending order\n        return arr[:k]  # Fetch the first k elements\n\n    top_k_elements = get_top_k_elements(arr, k)\n    top_k_elements.sort()  # Sort the result in ascending order\n\n    return top_k_elements\n\n# Example Usage\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))  # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/116", "completion": "def count_ones_in_binary(n):\n    \"\"\"\n    Count number of '1's in the binary representation of a non-negative integer.\n    \n    Parameters:\n    n (int): Non-negative integer\n    \n    Returns:\n    int: Count of '1's in the binary representation of n\n    \"\"\"\n    # Using bin() to get binary representation and count() to count '1's\n    return bin(n).count('1')\n\ndef sort_key(n):\n    \"\"\"\n    Generate a tuple key for sorting based on:\n    1. Number of ones in binary representation (primary criterion)\n    2. Value of the number itself (secondary criterion)\n    \n    Parameters:\n    n (int): Non-negative integer\n    \n    Returns:\n    tuple: (count of '1's in binary representation, the number itself)\n    \"\"\"\n    return (count_ones_in_binary(n), n)\n\ndef sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers based on the number of '1's\n    in their binary representations. If two integers have the same \n    number of '1's, they should be sorted by their decimal values.\n    \n    Parameters:\n    arr (list of int): Array of non-negative integers to be sorted\n    \n    Returns:\n    list of int: Sorted array based on the given criteria\n    \"\"\"\n    # Using the custom sorting key defined above\n    return sorted(arr, key=sort_key)\n\n# Test cases\nif __name__ == \"__main__\":\n    assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    print(\"All test cases passed!\")"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    # Handle the edge case of an empty array\n    if not arr:\n        return None\n    \n    # Calculate the product of signs\n    sign_product = calculate_sign_product(arr)\n    \n    # Calculate the sum of magnitudes\n    magnitude_sum = sum(abs(num) for num in arr)\n    \n    # Return the required product\n    return sign_product * magnitude_sum\n\ndef calculate_sign_product(arr):\n    \"\"\"\n    Calculate the product of signs of the elements in the array.\n    The sign of a number is 1 if it's positive, -1 if it's negative, \n    and 0 if it's zero.\n    \n    Parameters:\n    arr: list of integers\n    \n    Returns:\n    int: The product of signs of the array elements\n    \"\"\"\n    sign_product = 1  # Initialize with neutral element for multiplication\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n            break  # As soon as we hit a zero, the product will be zero\n    return sign_product"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    \n    def collatz_sequence(num):\n        \"\"\"\n        Generate the Collatz sequence for a given number.\n        \n        Arguments:\n        num -- the starting number for the Collatz sequence\n        \n        Returns:\n        list -- the full sequence of numbers as per Collatz conjecture\n        \"\"\"\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return sequence\n    \n    def filter_odd_numbers(sequence):\n        \"\"\"\n        Filter the odd numbers from a given sequence and return them in a sorted list.\n        \n        Arguments:\n        sequence -- list of numbers, representing the Collatz sequence\n        \n        Returns:\n        list -- sorted list of odd numbers from the sequence\n        \"\"\"\n        return sorted(num for num in sequence if num % 2 != 0)\n    \n    # Generate Collatz sequence for n\n    sequence = collatz_sequence(n)\n    \n    # Filter out the odd numbers and sort them\n    odd_numbers = filter_odd_numbers(sequence)\n    \n    return odd_numbers"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\n    \n    Parameters:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while (i * i) <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_intersection(interval1, interval2):\n    \"\"\"Get the intersection of two intervals if any.\n    \n    Parameters:\n    interval1 (tuple): The first interval as a tuple (start, end).\n    interval2 (tuple): The second interval as a tuple (start, end).\n    \n    Returns:\n    tuple: A tuple representing the intersection (start, end) if it exists, otherwise (None, None).\n    \"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start <= end:\n        return (start, end)\n    return (None, None)\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine whether the length of the intersection of two intervals is a prime number.\n    \n    Parameters:\n    interval1 (tuple): The first interval as a tuple (start, end).\n    interval2 (tuple): The second interval as a tuple (start, end).\n    \n    Returns:\n    str: \"YES\" if the length of the intersection is a prime number, \"NO\" otherwise or if there is no intersection.\n    \"\"\"\n    inter = get_intersection(interval1, interval2)\n    if inter == (None, None):\n        return \"NO\"\n    \n    length = inter[1] - inter[0] + 1  # +1 because interval is inclusive\n    return \"YES\" if is_prime(length) else \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\""}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    \n    def is_balanced(s):\n        \"\"\"\n        Helper function to check if a string of brackets is balanced.\n        Returns True if the string is balanced, False otherwise.\n        \"\"\"\n        stack = []\n        for char in s:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    def contains_nested(s):\n        \"\"\"\n        Helper function to check if a string contains at least one nested pair of brackets.\n        Returns True if there is at least one nested pair, False otherwise.\n        \"\"\"\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '[':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ']':\n                depth -= 1\n                if depth < 0:\n                    return False\n        return max_depth > 1\n\n    if not string:\n        return False\n\n    # Using the helper functions to check the conditions\n    return is_balanced(string) and contains_nested(string)"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n    for example: \n    valid_date('03-11-2000') => True\n    valid_date('15-01-2012') => False\n    valid_date('04-0-2040') => False\n    valid_date('06-04-2020') => True\n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    def check_format(date):\n        \"\"\"Check if the date string matches the required format: mm-dd-yyyy.\"\"\"\n        parts = date.split('-')\n        if len(parts) != 3:\n            return False\n        if not (len(parts[0]) == 2 and len(parts[1]) == 2 and len(parts[2]) == 4):\n            return False\n        return all(part.isdigit() for part in parts)\n\n    def get_month_days(month):\n        \"\"\"Return the maximum number of days based on the given month.\"\"\"\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        elif month == 2:\n            return 29\n        return 0\n    \n    def is_valid_parts(month, day, year):\n        \"\"\"Validate month, day, and year parts individually.\"\"\"\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > get_month_days(month):\n            return False\n        return True\n    \n    # Main validation logic\n    if not date:\n        return False\n    \n    if not check_format(date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if not is_valid_parts(month, day, year):\n        return False\n    \n    return True\n\n# Testing the function with provided examples\nprint(valid_date('03-11-2000')) # True\nprint(valid_date('15-01-2012')) # False\nprint(valid_date('04-0-2040'))  # False\nprint(valid_date('06-04-2020')) # True\nprint(valid_date('06/04/2020')) # False"}
{"task_id": "HumanEval/129", "completion": "from queue import PriorityQueue\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n   \n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def is_valid(x, y, n):\n        \"\"\"\n        Check if the cell (x, y) is within the grid bounds.\n        \"\"\"\n        return 0 <= x < n and 0 <= y < n\n\n    def get_neighbors(x, y, n):\n        \"\"\"\n        Get the valid neighboring cells (up, down, left, right) of the cell (x, y).\n        \"\"\"\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # up, down, left, right\n        neighbors = []\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny, n):\n                neighbors.append((nx, ny))\n        return neighbors\n\n    n = len(grid)\n    pq = PriorityQueue()\n    \n    # Initialize the priority queue with each cell in the grid\n    for i in range(n):\n        for j in range(n):\n            pq.put((grid[i][j], i, j, [grid[i][j]])) # (current_value, x, y, path)\n\n    while not pq.empty():\n        current_value, x, y, path = pq.get()\n        \n        # If the path has length k, return it\n        if len(path) == k:\n            return path\n        \n        # Add neighbors to the queue\n        for nx, ny in get_neighbors(x, y, n):\n            new_path = path + [grid[nx][ny]]\n            pq.put((grid[nx][ny], nx, ny, new_path))\n\n    return []\n\n# Example usage:\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/138", "completion": "def is_divisible_by_four(n):\n    \"\"\"\n    Check if a number is divisible by four.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is divisible by four, False otherwise.\n    \"\"\"\n    return n % 4 == 0\n\ndef is_greater_or_equal_to_eight(n):\n    \"\"\"\n    Check if a number is greater than or equal to eight.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is greater than or equal to eight, False otherwise.\n    \"\"\"\n    return n >= 8\n\ndef is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n\n    Parameters:\n    n (int): The number to evaluate.\n\n    Returns:\n    bool: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise.\n    \n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is divisible by four and is greater than or equal to eight\n    return is_divisible_by_four(n) and is_greater_or_equal_to_eight(n)"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    def is_last_char_alpha(txt):\n        \"\"\"\n        Check if the last non-space character in the string is an alphabetical character.\n        Return the character if it is, or None otherwise.\n        \"\"\"\n        txt = txt.rstrip()\n        if not txt:\n            return None\n        last_char = txt[-1]\n        return last_char if last_char.isalpha() else None\n    \n    def is_isolated_letter(txt):\n        \"\"\"\n        Check if the last character of the string is an isolated alphabetical character,\n        not a part of a word. An isolated alphabetical character is defined as a \n        character that is not part of a consecutive sequence of letters.\n        \"\"\"\n        last_char = is_last_char_alpha(txt)\n        if not last_char:\n            return False\n        \n        # Find the position of the last character and check characters around it\n        last_position = len(txt.rstrip()) - 1\n        \n        # Check if the character before and after are spaces (or non-existent)\n        if (last_position == 0 or txt[last_position - 1] == ' ') and \\\n           (last_position == len(txt) - 1 or txt[last_position + 1] == ' '):\n            return True\n        \n        return False\n    \n    return is_isolated_letter(txt)"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef ceiling_and_square(n):\n    \"\"\"\n    Given a number `n`, round it up to the nearest integer (ceiling) and return its square.\n    \n    Args:\n    n (float): A number to be rounded up and squared.\n    \n    Returns:\n    int: The square of the ceiling of `n`.\n    \"\"\"\n    rounded = math.ceil(n)\n    squared = rounded ** 2\n    return squared\n\n\ndef sum_squares(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of the squares of each number,\n    where each number is first rounded up to the nearest integer.\n    \n    Args:\n    lst (list of float): A list of numbers to be processed.\n    \n    Returns:\n    int: The sum of the squares of the ceiling of each number in `lst`.\n    \n    Examples:\n    For lst = [1, 2, 3] the output should be 14.\n    For lst = [1, 4, 9] the output should be 98.\n    For lst = [1, 3, 5, 7] the output should be 84.\n    For lst = [1.4, 4.2, 0] the output should be 29.\n    For lst = [-2.4, 1, 1] the output should be 6.\n    \"\"\"\n    return sum(ceiling_and_square(num) for num in lst)\n\n\n# Example usages for validation\nif __name__ == \"__main__\":\n    print(sum_squares([1, 2, 3]))  # Should output 14\n    print(sum_squares([1, 4, 9]))  # Should output 98\n    print(sum_squares([1, 3, 5, 7]))  # Should output 84\n    print(sum_squares([1.4, 4.2, 0]))  # Should output 29\n    print(sum_squares([-2.4, 1, 1]))  # Should output 6"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \n    Examples:\n    can_arrange([1, 2, 4, 3, 5]) = 3\n    can_arrange([1, 2, 3]) = -1\n    \"\"\"\n\n    def find_largest_problematic_index(arr):\n        \"\"\"\n        Find the largest index where element is not greater than the element\n        immediately preceding it.\n\n        Args:\n            arr (list of int): The input array of integers.\n\n        Returns:\n            int: The largest index with the condition or -1 if no such element exists.\n        \"\"\"\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i] < arr[i - 1]:\n                return i\n        return -1\n\n    if not arr or len(arr) == 1:\n        # Empty array or single element array can't have a problematic index\n        return -1\n\n    return find_largest_problematic_index(arr)\n\n# Test examples\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1"}
{"task_id": "HumanEval/131", "completion": "def is_odd_digit(digit):\n    \"\"\"\n    Check if a given digit is odd.\n    \n    :param digit: A single character representing a digit.\n    :return: True if the digit is odd, False otherwise.\n    \"\"\"\n    return digit in '13579'\n\n\ndef product_of_odd_digits(n):\n    \"\"\"\n    Calculate the product of the odd digits in a given positive integer.\n    \n    :param n: A positive integer.\n    :return: The product of the odd digits in the integer, or 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n    \n    for char in str(n):\n        if is_odd_digit(char):\n            product *= int(char)\n            has_odd_digit = True\n    \n    # If there were no odd digits, we should return 0\n    if not has_odd_digit:\n        return 0\n    \n    return product\n\n\ndef digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    :param n: A positive integer.\n    :return: The product of the odd digits in the integer, or 0 if all digits are even.\n    \n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    return product_of_odd_digits(n)"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    def replace_multiple_spaces(text):\n        \"\"\"\n        Replace consecutive spaces greater than 2 with a single '-'.\n        \"\"\"\n        import re\n        # Replace groups of 3 or more spaces with '-'\n        return re.sub(r' {3,}', '-', text)\n\n    def replace_individual_spaces(text):\n        \"\"\"\n        Replace single and double spaces with underscores.\n        \"\"\"\n        import re\n        # Replace single or double spaces with underscore\n        text = re.sub(r' {1,2}', '_', text)\n        return text\n\n    # First replace multiple spaces\n    text = replace_multiple_spaces(text)\n    # Then replace individual and double spaces\n    text = replace_individual_spaces(text)\n    return text\n\n# Testing\nprint(fix_spaces(\"Example\")) # should return \"Example\"\nprint(fix_spaces(\"Example 1\")) # should return \"Example_1\"\nprint(fix_spaces(\" Example 2\")) # should return \"_Example_2\"\nprint(fix_spaces(\" Example   3\")) # should return \"_Example-3\""}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef single_factorial(n):\n    \"\"\"Calculate the factorial of a single number.\n\n    Args:\n        n (int): The number to calculate the factorial for.\n\n    Returns:\n        int: The factorial of the given number.\n    \"\"\"\n    return math.factorial(n)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n\n    Args:\n        n (int): The number to calculate the Brazilian factorial for.\n\n    Returns:\n        int: The Brazilian factorial of the given number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer greater than 0\")\n\n    product = 1\n\n    for i in range(1, n + 1):\n        product *= single_factorial(i)\n\n    return product\n\n# Example usage and test\nif __name__ == \"__main__\":\n    print(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n; you have to return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def tribonacci_even(n):\n        \"\"\"Calculate the Tribonacci value for even n.\"\"\"\n        return 1 + n // 2\n\n    def tribonacci_odd(n, cache):\n        \"\"\"Calculate the Tribonacci value for odd n using a cache for memoization.\"\"\"\n        if n in cache:\n            return cache[n]\n        result = tribonacci(n-1, cache) + tribonacci(n-2, cache) + tribonacci(n+1, cache)\n        cache[n] = result\n        return result\n\n    def tribonacci(n, cache):\n        \"\"\"Determine the Tribonacci value for a given n, utilizing cache for optimization.\"\"\"\n        if n in cache:\n            return cache[n]\n        if n == 0:\n            result = 1\n        elif n == 1:\n            result = 3\n        elif n % 2 == 0:\n            result = tribonacci_even(n)\n        else:\n            result = tribonacci_odd(n, cache)\n        cache[n] = result\n        return result\n\n    tribonacci_sequence = []\n    cache = {}\n    \n    for i in range(n + 1):\n        tribonacci_sequence.append(tribonacci(i, cache))\n    \n    return tribonacci_sequence"}
{"task_id": "HumanEval/137", "completion": "def normalize(value):\n    \"\"\"\n    Normalize a given value to its comparable float representation.\n    Parameters:\n    - value: Can be an integer, float, or string.\n    \n    Returns:\n    - A float representation of the value for comparison.\n    \"\"\"\n    if isinstance(value, (int, float)):\n        return value\n    \n    if isinstance(value, str):\n        # Replace comma with dot if present\n        normalized_value = value.replace(',', '.')\n        try:\n            return float(normalized_value)\n        except ValueError:\n            raise ValueError(f\"Cannot convert value {value} to a float\")\n    \n    raise ValueError(f\"Unsupported type: {type(value)}\")\n\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \n    Parameters:\n    - a: Can be an integer, float, or string.\n    - b: Can be an integer, float, or string.\n    \n    Returns:\n    - The larger of the two values in their original type if they are unequal.\n    - None if the values are equal.\n    \"\"\"\n    # Normalize both values to floats for comparison\n    normalized_a = normalize(a)\n    normalized_b = normalize(b)\n    \n    if normalized_a == normalized_b:\n        return None  # Values are equal\n    \n    # Determine the larger value\n    if normalized_a > normalized_b:\n        return a  # Return original `a` as it is larger\n    else:\n        return b  # Return original `b` as it is larger\n\n# Example usage:\nprint(compare_one(1, 2.5))       # \u279e 2.5\nprint(compare_one(1, \"2,3\"))     # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))   # \u279e \"6\"\nprint(compare_one(\"1\", 1))       # \u279e None"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    def get_largest_negative(nums):\n        ''' Return the largest negative integer in the list or None if not present. '''\n        negatives = [num for num in nums if num < 0]\n        return max(negatives, default=None)\n\n    def get_smallest_positive(nums):\n        ''' Return the smallest positive integer in the list or None if not present. '''\n        positives = [num for num in nums if num > 0]\n        return min(positives, default=None)\n\n    # Extract the largest negative integer and smallest positive integer\n    largest_negative = get_largest_negative(lst)\n    smallest_positive = get_smallest_positive(lst)\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    def transform_value(index, value):\n        \"\"\"\n        Transform the value based on its index:\n        - Square the value if the index is a multiple of 3.\n        - Cube the value if the index is a multiple of 4 but not a multiple of 3.\n        - Leave the value unchanged if neither condition is met.\n        \n        Args:\n        index (int): The index of the value in the list.\n        value (int): The value to transform.\n        \n        Returns:\n        int: The transformed value.\n        \"\"\"\n        if index % 3 == 0:\n            return value ** 2\n        elif index % 4 == 0:\n            return value ** 3\n        else:\n            return value\n    \n    # Apply the transformation function to each element in the list based on its index\n    transformed_lst = [transform_value(index, value) for index, value in enumerate(lst)]\n    \n    # Return the sum of the transformed list\n    return sum(transformed_lst)\n\n# Examples\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126"}
{"task_id": "HumanEval/146", "completion": "def has_odd_first_and_last_digit(n):\n    \"\"\"\n    Check if both the first and last digits of the number are odd.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if both first and last digits are odd, otherwise False.\n    \"\"\"\n    # Convert number to string to easily access first and last digits\n    num_str = str(n)\n    \n    # Handle negative numbers by removing the negative sign\n    if num_str[0] == '-':\n        num_str = num_str[1:]\n    \n    # Convert first and last characters back to integers\n    first_digit = int(num_str[0])\n    last_digit = int(num_str[-1])\n    \n    # Check if both digits are odd\n    return first_digit % 2 != 0 and last_digit % 2 != 0\n\ndef specialFilter(nums):\n    \"\"\"\n    Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd.\n    \n    Args:\n    nums (list of int): The array of numbers to filter.\n    \n    Returns:\n    int: The count of numbers that meet the criteria.\n    \n    Examples:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    \n    for num in nums:\n        if abs(num) > 10 and has_odd_first_and_last_digit(num):\n            count += 1\n    \n    return count\n\n# Examples:\n# print(specialFilter([15, -73, 14, -15]))  # Output: 1\n# print(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    \n    def remove_odd_length_strings(strings):\n        \"\"\"Removes strings with odd lengths from the list.\"\"\"\n        return [s for s in strings if len(s) % 2 == 0]\n    \n    def sort_strings(strings):\n        \"\"\"Sorts the strings first by their lengths and then alphabetically.\"\"\"\n        return sorted(strings, key=lambda s: (len(s), s))\n    \n    # Remove strings with odd lengths from the input list\n    even_length_strings = remove_odd_length_strings(lst)\n    \n    # Sort the filtered list both by string length and alphabetically\n    sorted_strings = sort_strings(even_length_strings)\n    \n    return sorted_strings\n\n# Example usage:\n# assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n# assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/144", "completion": "def gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor (GCD) of a and b.\n    \n    Parameters:\n    a (int): First number.\n    b (int): Second number.\n\n    Returns:\n    int: GCD of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef parse_fraction(fraction):\n    \"\"\"\n    Parse a fraction string into its numerator and denominator as integers.\n    \n    Parameters:\n    fraction (str): The fraction string in the format <numerator>/<denominator>.\n\n    Returns:\n    tuple: A tuple containing the numerator and denominator as integers.\n    \"\"\"\n    numerator, denominator = map(int, fraction.split('/'))\n    return numerator, denominator\n\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x and n are valid fractions, and do not have zero as denominator.\n\n    Parameters:\n    x (str): The first fraction string in the format <numerator>/<denominator>.\n    n (str): The second fraction string in the format <numerator>/<denominator>.\n\n    Returns:\n    bool: True if x * n evaluates to a whole number, False otherwise.\n    \"\"\"\n    # Parse fractions\n    x_num, x_den = parse_fraction(x)\n    n_num, n_den = parse_fraction(n)\n\n    # Multiply the fractions: (x_num / x_den) * (n_num / n_den)\n    num_product = x_num * n_num\n    den_product = x_den * n_den\n    \n    # Simplify num_product / den_product\n    common_divisor = gcd(num_product, den_product)\n    \n    simplified_num = num_product // common_divisor\n    simplified_den = den_product // common_divisor\n    \n    # If the simplified denominator is 1, it's a whole number\n    return simplified_den == 1\n\n# Examples\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\n    \n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Args:\n    n (int): The number to check if it is prime.\n    x (any): The return value if n is a prime.\n    y (any): The return value if n is not a prime.\n    \n    Returns:\n    any: x if n is a prime number, y otherwise.\n    \n    Examples:\n    >>> x_or_y(7, 34, 12)\n    34\n    >>> x_or_y(15, 8, 5)\n    5\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Example Usages\nprint(x_or_y(7, 34, 12))  # Should output 34\nprint(x_or_y(15, 8, 5))   # Should output 5"}
{"task_id": "HumanEval/151", "completion": "def is_valid_number(num):\n    \"\"\"\n    Check if a number is a valid integer and non-negative.\n    \n    Parameters:\n    num: any input type\n    \n    Returns:\n    bool: True if the number is a non-negative integer, False otherwise\n    \"\"\"\n    return isinstance(num, int) and num >= 0\n\ndef is_odd(num):\n    \"\"\"\n    Check if a number is odd.\n    \n    Parameters:\n    num (int): an integer\n    \n    Returns:\n    bool: True if the number is odd, False otherwise\n    \"\"\"\n    return num % 2 != 0\n\ndef sum_of_odd_squares(lst):\n    \"\"\"\n    Calculate the sum of squares of odd numbers from the list.\n    \n    Parameters:\n    lst (list): a list of numbers\n    \n    Returns:\n    int: sum of squares of odd numbers\n    \"\"\"\n    sum_squares = 0\n    for num in lst:\n        if is_valid_number(num) and is_odd(num):\n            sum_squares += num ** 2\n    return sum_squares\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    return sum_of_odd_squares(lst)\n\n# You can also add the sample test cases as comments or run them directly:\n\n# print(double_the_difference([1, 3, 2, 0])) # Expected: 10\n# print(double_the_difference([-1, -2, 0]))  # Expected: 0\n# print(double_the_difference([9, -2]))      # Expected: 81\n# print(double_the_difference([0]))          # Expected: 0"}
{"task_id": "HumanEval/145", "completion": "def digit_sum(n):\n    \"\"\"\n    Calculate and return the sum of the digits of an integer n.\n    \n    If n is negative, consider the digits without the sign.\n    \n    Args:\n    n (int): The integer whose digit sum is to be calculated.\n    \n    Returns:\n    int: The sum of the digits of n.\n    \n    Examples:\n    >>> digit_sum(123)\n    6\n    >>> digit_sum(-123)\n    6\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    \"\"\"\n    Sort the given list of integers in ascending order according to the sum of their digits.\n    If there are several items with the same sum of their digits, they should be ordered\n    based on their index in the original list.\n    \n    Args:\n    nums (list of int): List of integers to be sorted.\n    \n    Returns:\n    list of int: List of integers sorted by the sum of their digits.\n    \n    Examples:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n    # Create a lambda function that returns a tuple of (digit sum, original index)\n    # Sorting is stable in Python, so elements with the same sum maintain their original order.\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n# Example usage and test cases:\nif __name__ == \"__main__\":\n    print(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\n    print(order_by_points([]))                    # Output: []\n    print(order_by_points([123, 45, 6, 78, 90]))  # Output: [6, 45, 123, 78, 90]"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    Check if a number is a prime number.\n    Args:\n    n (int): The number to check.\n    \n    Returns:\n    bool: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef filter_prime_length_words(words):\n    \"\"\"\n    Filter the words whose lengths are prime numbers.\n    Args:\n    words (list of str): The list of words to filter.\n    \n    Returns:\n    list of str: The list of words with prime lengths.\n    \"\"\"\n    return [word for word in words if is_prime(len(word))]\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a string representing a sentence, return a string containing words from the original sentence\n    whose lengths are prime numbers, maintaining the original order.\n    \n    Args:\n    sentence (str): The input sentence.\n    \n    Returns:\n    str: The words with prime lengths, concatenated into a single string separated by spaces.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = filter_prime_length_words(words)\n    return ' '.join(prime_length_words)\n\n# Example usage:\n# print(words_in_sentence(\"This is a test\"))  # Output should be \"is\"\n# print(words_in_sentence(\"lets go for swimming\"))  # Output should be \"go for\""}
{"task_id": "HumanEval/147", "completion": "def generate_array(n):\n    \"\"\"\n    Generates an array 'a' where for each i (1 \u2264 i \u2264 n),\n    the value of a[i] = i * i - i + 1.\n    \n    Parameters:\n    n (int): The length of the array to generate.\n\n    Returns:\n    list: The generated array.\n    \"\"\"\n    return [(i * i - i + 1) for i in range(1, n+1)]\n\ndef count_valid_triples(array):\n    \"\"\"\n    Counts the number of triples (a[i], a[j], a[k]) where i < j < k \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Parameters:\n    array (list): The array to analyze.\n\n    Returns:\n    int: The number of valid triples.\n    \"\"\"\n    n = len(array)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (array[i] + array[j] + array[k]) % 3 == 0:\n                    count += 1\n    return count\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1. \n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n    Parameters:\n    n (int): The length of the array to create and analyze.\n\n    Returns:\n    int: The number of valid triples.\n    \"\"\"\n    # Generate the array a\n    array = generate_array(n)\n    \n    # Count the number of valid triples\n    return count_valid_triples(array)\n\n# Example usage:\n# print(get_max_triples(5))  # Output: 1"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n    \n    def has_valid_extension(name):\n        \"\"\"Check if the file has a valid extension.\"\"\"\n        valid_extensions = ['txt', 'exe', 'dll']\n        return name[name.rfind('.') + 1:] in valid_extensions  # Extract after the last dot\n    \n    def starts_with_letter(name):\n        \"\"\"Check if the file starts with a Latin alphabet letter.\"\"\"\n        return name[0].isalpha()\n    \n    def valid_digit_count(name):\n        \"\"\"Check if the file contains no more than three digits.\"\"\"\n        return sum(c.isdigit() for c in name) <= 3\n    \n    def only_one_dot(name):\n        \"\"\"Check if the file contains exactly one dot.\"\"\"\n        return name.count('.') == 1\n    \n    # Check if the file name meets all criteria\n    if only_one_dot(file_name):\n        name_before_dot = file_name.split('.')[0]\n        return (\n            len(name_before_dot) > 0 and\n            starts_with_letter(name_before_dot) and\n            has_valid_extension(file_name) and\n            valid_digit_count(file_name)\n        )\n    else:\n        return 'No'\n\n    # Initial Error Handling\n    if any([\n        not file_name,\n        not isinstance(file_name, str),\n        ' ' in file_name,  # Just an extra check if names should not contain spaces\n    ]):\n        return 'No'  # For invalid types or empty input.\n\n    # Evaluate all conditions for the file name\n    \n    result = all([\n        only_one_dot(file_name),\n        starts_with_letter(file_name.split('.')[0]),\n        has_valid_extension(file_name),\n        valid_digit_count(file_name.split('.')[0])\n    ])\n    \n    return 'Yes' if result else 'No'\n\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'\nprint(file_name_check(\"example1.txt\"))  # => 'Yes'\nprint(file_name_check(\"example123.txt\"))  # => 'No'\nprint(file_name_check(\".txt\"))  # => 'No'"}
{"task_id": "HumanEval/158", "completion": "def count_unique_characters(word):\n    \"\"\"Count the number of unique characters in a word.\n    \n    Args:\n        word (str): The word to analyze.\n        \n    Returns:\n        int: The number of unique characters in the word.\n    \"\"\"\n    return len(set(word))\n\ndef find_max(words):\n    \"\"\"Find the word with the maximum number of unique characters from the list.\n    \n    Args:\n        words (list of str): List of words to analyze.\n        \n    Returns:\n        str: The word with the maximum number of unique characters. If \n             multiple words have the maximum number of unique characters,\n             the one which comes first in lexicographical order is returned.\n    \"\"\"\n    \n    if not words:\n        return \"\"\n    \n    max_unique = 0\n    best_word = \"\"\n    \n    for word in words:\n        num_unique_chars = count_unique_characters(word)\n        \n        # Find the word with the maximum number of unique characters\n        if num_unique_chars > max_unique:\n            max_unique = num_unique_chars\n            best_word = word\n        # In case of a tie, choose the lexicographically smallest word\n        elif num_unique_chars == max_unique:\n            if word < best_word:\n                best_word = word\n\n    return best_word\n\n# Examples\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))  # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    def is_valid_triangle(a, b, c):\n        '''\n        Check if the given sides can form a triangle.\n        According to the triangle inequality theorem, for any triangle,\n        the sum of the lengths of any two sides must be greater than or\n        equal to the length of the remaining side.\n        '''\n        return a + b > c and b + c > a and a + c > b\n\n    def is_right_angle(a, b, c):\n        '''\n        Check if the triangle with given sides follows the Pythagorean theorem.\n        The theorem states that in a right-angled triangle, the square of\n        the hypotenuse is equal to the sum of the squares of the other two sides.\n        '''\n        sides = sorted([a, b, c])\n        return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n    \n    # First, check if it's a valid triangle\n    if not is_valid_triangle(a, b, c):\n        return False\n    \n    # Then, check if it's a right-angled triangle\n    return is_right_angle(a, b, c)\n\n# Example test cases\nassert right_angle_triangle(3, 4, 5) == True  # Expected output: True\nassert right_angle_triangle(1, 2, 3) == False  # Expected output: False"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Define roman numeral mapping\n    numeral_map = [\n        ('M', 1000),\n        ('CM', 900),\n        ('D', 500),\n        ('CD', 400),\n        ('C', 100),\n        ('XC', 90),\n        ('L', 50),\n        ('XL', 40),\n        ('X', 10),\n        ('IX', 9),\n        ('V', 5),\n        ('IV', 4),\n        ('I', 1),\n    ]\n    \n    def to_roman(n):\n        \"\"\"\n        Helper function to convert the integer to a roman numeral.\n        \n        Parameters:\n        - n (int): The number to convert to a roman numeral.\n        \n        Returns:\n        - str: The roman numeral representation of the number.\n        \"\"\"\n        result = ''\n        for numeral, value in numeral_map:\n            while n >= value:\n                result += numeral\n                n -= value\n        return result\n    \n    # Convert to roman numeral\n    roman_numeral = to_roman(number)\n    \n    # Return lowercase representation\n    return roman_numeral.lower()\n\n# Example Usage:\n# print(int_to_mini_roman(19))  # Should print 'xix'\n# print(int_to_mini_roman(152)) # Should print 'clii'\n# print(int_to_mini_roman(426)) # Should print 'cdxxvi'"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"\n    Determines how far off each guess was from the actual game scores.\n\n    Parameters:\n    game (list of int): A list of actual game scores.\n    guess (list of int): A list of guessed scores.\n\n    Returns:\n    list of int: A list where each element represents the absolute difference between the guess and actual score.\n                 If the guess was correct, the value at that index is 0.\n    \n    Examples:\n    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) -> [0, 0, 0, 0, 3, 3]\n    compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]) -> [4, 4, 1, 0, 0, 6]\n    \"\"\"\n\n    def calculate_difference(actual, predicted):\n        \"\"\"Calculates the absolute difference between actual and predicted scores.\"\"\"\n        return abs(actual - predicted) if actual != predicted else 0\n    \n    # Utilizing list comprehension to produce the result list\n    differences = [calculate_difference(game[i], guess[i]) for i in range(len(game))]\n\n    return differences\n\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/148", "completion": "def get_planet_index(planet):\n    \"\"\"\n    Given a planet name, return its index in the list of planets sorted by proximity to the Sun.\n    If the planet name is invalid, return -1.\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet in planets:\n        return planets.index(planet)\n    return -1\n\ndef planets_between(planet1_idx, planet2_idx):\n    \"\"\"\n    Given the indices of two planets, return a list of all planet names that orbit\n    between the two planets, sorted by proximity to the Sun.\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Identify the start and end indices for the range\n    start_idx = min(planet1_idx, planet2_idx) + 1\n    end_idx = max(planet1_idx, planet2_idx)\n    \n    # Slice the list to get the planets between the given indices\n    return planets[start_idx:end_idx]\n\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    # Get the indices of planet1 and planet2\n    idx1 = get_planet_index(planet1)\n    idx2 = get_planet_index(planet2)\n    \n    # Return an empty tuple if either planet1 or planet2 is invalid\n    if idx1 == -1 or idx2 == -1:\n        return ()\n    \n    # Get the planets between the indices\n    result = planets_between(idx1, idx2)\n    \n    return tuple(result)\n\n# Example usage\n# print(bf(\"Jupiter\", \"Neptune\"))  # ==> (\"Saturn\", \"Uranus\")\n# print(bf(\"Earth\", \"Mercury\"))    # ==> (\"Venus\")\n# print(bf(\"Mercury\", \"Uranus\"))   # ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    def calculate_strength(extension):\n        \"\"\"Calculate the strength of an extension.\n        \n        Strength is defined as the difference between the number of uppercase\n        and lowercase letters in the extension name.\n        \n        Args:\n            extension (str): The extension name.\n        \n        Returns:\n            int: The strength of the extension.\n        \"\"\"\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    def get_strongest_extension(extensions):\n        \"\"\"Determine the strongest extension from the list.\n        \n        Args:\n            extensions (List[str]): A list of extension names.\n        \n        Returns:\n            str: The strongest extension.\n        \"\"\"\n        max_strength = float('-inf')\n        strongest_extension = None\n\n        for extension in extensions:\n            strength = calculate_strength(extension)\n            if strength > max_strength:\n                max_strength = strength\n                strongest_extension = extension\n        \n        return strongest_extension\n\n    strongest_extension = get_strongest_extension(extensions)\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\n# result = Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n# print(result)  # Should output 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def is_rotation(word, candidate):\n    \"\"\"Check if one word is a rotation of another word.\n    \n    Args:\n    word (str): The original word.\n    candidate (str): The word to check as a rotation.\n    \n    Returns:\n    bool: True if candidate is a rotation of word, False otherwise.\n    \"\"\"\n    if len(word) != len(candidate):\n        return False\n    doubled_word = word + word  # By doubling the word, all rotations become substrings\n    return candidate in doubled_word\n\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    \n    Args:\n    a (str): The original word to search within.\n    b (str): The word or any of its rotations to search for.\n    \n    Returns:\n    bool: True if b or any of its rotations is a substring in a, False otherwise.\n    \n    Examples:\n    >>> cycpattern_check(\"abcd\", \"abd\")\n    False\n    \n    >>> cycpattern_check(\"hello\", \"ell\")\n    True\n    \n    >>> cycpattern_check(\"whassup\", \"psus\")\n    False\n    \n    >>> cycpattern_check(\"abab\", \"baa\")\n    True\n    \n    >>> cycpattern_check(\"efef\", \"eeff\")\n    False\n    \n    >>> cycpattern_check(\"himenss\", \"simen\")\n    True\n    \"\"\"\n    b_length = len(b)\n    # Check all rotations of `b`\n    for i in range(b_length):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False\n\n# Modular approach allows us to reuse is_rotation if needed for other purposes\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    return compute_md5_hash(text)\n\ndef compute_md5_hash(text):\n    \"\"\"\n    Given a non-empty string 'text', return its md5 hash equivalent string.\n    \"\"\"\n    hasher = hashlib.md5()\n    hasher.update(text.encode('utf-8'))\n    return hasher.hexdigest()\n\n# Test cases\nassert string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\nassert string_to_md5('') == None"}
{"task_id": "HumanEval/161", "completion": "def reverse_case(char):\n    \"\"\"\n    Reverses the case of a given letter.\n    \n    Args:\n    char: str : Single character whose case is to be reversed.\n    \n    Returns:\n    str : Character with reversed case if it's a letter, otherwise the same character.\n    \"\"\"\n    if char.isalpha():  # Check if the character is a letter\n        if char.islower():\n            return char.upper()\n        else:\n            return char.lower()\n    else:\n        return char\n\ndef solve(s):\n    \"\"\"\n    Given a string s, this function:\n    1. Reverses the case of each character if it's a letter.\n    2. If the string contains no letters, reverses the entire string.\n    \n    Args:\n    s: str : Input string\n    \n    Returns:\n    str : Resultant string after performing the above operations\n    \n    Examples:\n    solve(\"1234\") -> \"4321\"\n    solve(\"ab\") -> \"AB\"\n    solve(\"#a@C\") -> \"#A@c\"\n    \"\"\"\n    # Check if the string contains any letters\n    contains_letter = any(char.isalpha() for char in s)\n    \n    if contains_letter:\n        return ''.join(reverse_case(char) for char in s)\n    else:\n        return s[::-1]\n\n# Test cases\nprint(solve(\"1234\"))  # Expected output: \"4321\"\nprint(solve(\"ab\"))  # Expected output: \"AB\"\nprint(solve(\"#a@C\"))  # Expected output: \"#A@c\""}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    def count_even_odd(digits):\n        \"\"\"Count the number of even and odd digits in a list of digits.\n\n        Args:\n            digits (list): A list of digit strings.\n\n        Returns:\n            tuple: A tuple containing count of even digits followed by count of odd digits.\n        \"\"\"\n        even_count = 0\n        odd_count = 0\n        \n        # Check each digit and tally even or odd counts\n        for digit in digits:\n            # Convert the digit string to an integer\n            d = int(digit)\n            if d % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n        return even_count, odd_count\n\n    # Convert the number to its string representation and handle negative sign\n    digit_str = str(abs(num))\n\n    # Get the list of digits in the number\n    digits_list = list(digit_str)\n\n    # Utilize the helper function to get the counts\n    return count_even_odd(digits_list)\n\n# Example usage\nprint(even_odd_count(-12))   # Output: (1, 1)\nprint(even_odd_count(123))   # Output: (1, 2)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    # Helper function to calculate total eaten carrots\n    def total_eaten(number, need, remaining):\n        \"\"\"\n        Calculate the total number of carrots eaten after the meal.\n        \n        @param number : integer : Carrots already eaten\n        @param need : integer : Carrots needed to eat\n        @param remaining : integer : Remaining carrots in stock\n        \n        @return : integer : Total carrots eaten after the meal\n        \"\"\"\n        return number + min(need, remaining)\n\n    # Helper function to calculate remaining carrots after the meal\n    def carrots_left(need, remaining):\n        \"\"\"\n        Calculate the number of carrots left after the meal.\n        \n        @param need : integer : Carrots needed to eat\n        @param remaining : integer : Remaining carrots in stock\n        \n        @return : integer : Carrots left after the meal\n        \"\"\"\n        return max(remaining - need, 0)\n\n    # Calculate results using helper functions\n    total_carrots_eaten = total_eaten(number, need, remaining)\n    carrots_remaining = carrots_left(need, remaining)\n\n    # Return the results as an array\n    return [total_carrots_eaten, carrots_remaining]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Should output: [11, 4]\nprint(eat(4, 8, 9))   # Should output: [12, 1]\nprint(eat(1, 10, 10)) # Should output: [11, 0]\nprint(eat(2, 11, 5))  # Should output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def apply_operator(a, b, op):\n    \"\"\"\n    Takes two operands and an operator and applies the operator to the operands.\n    \n    Args:\n        a (int): The first operand.\n        b (int): The second operand.\n        op (str): The operator (must be one of '+', '-', '*', '//', '**').\n    \n    Returns:\n        int: The result of applying the operator to the operands.\n\n    Raises:\n        ValueError: If the operator is not recognized.\n    \"\"\"\n    if op == '+':\n        return a + b\n    elif op == '-':\n        return a - b\n    elif op == '*':\n        return a * b\n    elif op == '//':\n        return a // b\n    elif op == '**':\n        return a ** b\n    else:\n        raise ValueError(f\"Unsupported operator '{op}'\")\n\n\ndef build_expression(operator, operand):\n    \"\"\"\n    Takes lists of operators and operands and constructs a list of tuples representing the order of operations.\n    \n    Args:\n        operator (list): List of operators as strings.\n        operand (list): List of integers.\n    \n    Returns:\n        list: List of tuples, each containing two operands and an operator.\n    \"\"\"\n    assert len(operator) == len(operand) - 1, \"Operator list must be one less than operand list\"\n    \n    # Initialize the expression with the first operand\n    expression = [operand[0]]\n    \n    # Build the expression in the form [operand, (operator, operand), ...]\n    for i in range(len(operator)):\n        expression.append((operator[i], operand[i + 1]))\n    \n    return expression\n\n\ndef evaluate_expression(expression):\n    \"\"\"\n    Takes an algebraic expression in tuple form and evaluates it from left to right.\n    \n    Args:\n        expression (list): List of alternating operands and tuples of (operator, operand)\n    \n    Returns:\n        int: The result of the evaluated expression.\n    \"\"\"\n    # Start with the first operand\n    result = expression[0]\n    \n    for i in range(1, len(expression)):\n        op, next_operand = expression[i]\n        result = apply_operator(result, next_operand, op)\n    \n    return result\n\n\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand, build the algebraic expression and return the evaluation of this expression.\n    \n    Args:\n        operator (list): List of algebraic operators as strings.\n        operand (list): List of integers.\n    \n    Returns:\n        int: The result of the evaluated algebraic expression.\n    \"\"\"\n    expression = build_expression(operator, operand)\n    result = evaluate_expression(expression)\n    return result"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    def is_even(n):\n        \"\"\"Check if a number is even.\"\"\"\n        return n % 2 == 0\n\n    def get_even_digits_in_range(start, end):\n        \"\"\"\n        Generate even digits between start and end inclusive.\n        \n        Even digits are 0, 2, 4, 6, 8. Since a single digit number can only be one digit,\n        we will only collect those within the range.\n        \"\"\"\n        even_digits = [digit for digit in range(10) if is_even(digit)]\n        return sorted([digit for digit in even_digits if start <= digit <= end])\n\n    # Ensure that a is less than or equal to b by swapping if necessary\n    if a > b:\n        a, b = b, a\n\n    # Generate even digits within the specified range\n    even_digits = get_even_digits_in_range(a, b)\n    \n    return even_digits\n\n# Test cases\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # => []\nprint(generate_integers(5, 5))  # => []"}
