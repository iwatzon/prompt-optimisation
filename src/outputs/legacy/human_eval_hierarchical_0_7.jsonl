{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))\n\n# Example usage:\n# print(string_xor('010', '110'))  # Output should be '100'"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Example usage\n# print(truncate_number(3.5))  # Output should be 0.5"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    return max(strings, key=len)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" \n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    rolling_max_list = []\n    current_max = float('-inf')\n    \n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    \n    return rolling_max_list"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))  # Should return False\nprint(below_zero([1, 2, -4, 5]))  # Should return True"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            stack.append(char)\n        elif char == ')' and stack:\n            stack.pop()\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result\n\n# Example usage:\n# separate_paren_groups('( ) (( )) (( )( ))')\n# Output should be: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of the absolute deviations\n    mad = sum(absolute_deviations) / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(0, n + 1))"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string\n    \n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return numbers\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimiter)\n    result.append(numbers[-1])\n    \n    return result\n\n# Testing the examples provided\nif __name__ == \"__main__\":\n    print(intersperse([], 4))         # Output: []\n    print(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n\n# Testing the implementation\nprint(make_palindrome(''))       # Output: ''\nprint(make_palindrome('cat'))    # Output: 'catac'\nprint(make_palindrome('cata'))   # Output: 'catac'"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next position to count overlapping\n    return count\n\n# Example usage and test cases\nprint(how_many_times('', 'a'))       # Output: 0\nprint(how_many_times('aaa', 'a'))    # Output: 3\nprint(how_many_times('aaaa', 'aa'))  # Output: 3"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to make the comparison case insensitive\n    lower_string = string.lower()\n    # Use a set to keep track of distinct characters\n    distinct_characters = set(lower_string)\n    # The number of distinct characters is the size of the set\n    return len(distinct_characters)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(num - min_number) / (max_number - min_number) for num in numbers]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    from collections import Counter\n\n    counts = Counter(numbers)\n    return [x for x in numbers if counts[x] == 1]\n\n# Example usage\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" \n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    \n    note_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    beats = [note_beats[note] for note in notes]\n    \n    return beats\n\n# Output your answer as:\n# ```python\n# <your answer>"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \n    Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Mapping of number words to their numeric values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into individual number words\n    words = numbers.split()\n    \n    # Sort the words based on their corresponding numeric values\n    sorted_words = sorted(words, key=lambda x: number_map[x])\n    \n    # Join the sorted words back into a single string and return\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    def max_nesting_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n\n# Output\n# ```python\n# from typing import List\n# \n# def parse_nested_parens(paren_string: str) -> List[int]:\n#     \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n#     For each of the group, output the deepest level of nesting of parentheses.\n#     E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# \n#     >>> parse_nested_parens('(()()) ((())) () ((())()())')\n#     [2, 3, 1, 3]\n#     \"\"\"\n#     def max_nesting_level(s: str) -> int:\n#         max_depth = 0\n#         current_depth = 0\n#         for char in s:\n#             if char == '(':\n#                 current_depth += 1\n#                 if current_depth > max_depth:\n#                     max_depth = current_depth\n#             elif char == ')':\n#                 current_depth -= 1\n#         return max_depth\n#     \n#     groups = paren_string.split()\n#     return [max_nesting_level(group) for group in groups]\n# ```"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the numbers first to make it easier to find the closest elements\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to keep track of the smallest difference and the closest pair\n    smallest_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    # Iterate through the sorted numbers and find the smallest difference\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Test cases to validate the function\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\nassert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Testing the function\nprint(fizz_buzz(50))  # Expected output: 0\nprint(fizz_buzz(78))  # Expected output: 2\nprint(fizz_buzz(79))  # Expected output: 3"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Identify elements at even indices\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    # Sort the elements at even indices\n    sorted_even_values = sorted(even_indices_values)\n    \n    # Apply the sorted values back to the even indices of the result list\n    result = l[:]\n    for i, val in zip(range(0, len(l), 2), sorted_even_values):\n        result[i] = val\n    \n    return result"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    fib_sequence = [1, 2]\n    prime_fib_numbers = []\n\n    while len(prime_fib_numbers) < n:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        if is_prime(next_fib):\n            prime_fib_numbers.append(next_fib)\n    \n    return prime_fib_numbers[n - 1]\n\n# Example Usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2\n\n# Example usages:\n# print(median([3, 1, 2, 4, 5]))  # 3\n# print(median([-10, 4, 6, 1000, 10, 20]))  # 15.0"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or base <= 1 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 inclusive, and number x must be non-negative.\")\n\n    if x == 0:\n        return \"0\"\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    \n    # The digits are in reverse order, we need to reverse them.\n    digits.reverse()\n    return ''.join(digits)"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract the elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort those extracted elements\n    divisible_by_three.sort()\n    \n    # Insert the sorted elements back into their respective positions\n    sorted_l = l[:]\n    div_three_index = 0\n    for i in range(len(sorted_l)):\n        if i % 3 == 0:\n            sorted_l[i] = divisible_by_three[div_three_index]\n            div_three_index += 1\n            \n    return sorted_l\n\n# Example usage of the function\nif __name__ == \"__main__\":\n    # Test cases\n    print(sort_third([1, 2, 3]))          # [1, 2, 3]\n    print(sort_third([5, 6, 3, 4, 8, 9, 2]))  # [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string into groups of 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # rotate elements in each group back to original position\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Example usage:\nencoded_string = encode_cyclic(\"abcdefgh\")\nprint(f\"Encoded: {encoded_string}\")  # Output: \"bcadefgh\"\ndecoded_string = decode_cyclic(encoded_string)\nprint(f\"Decoded: {decoded_string}\")  # Output: \"abcdefgh\""}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence. Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    \n    # Initial values of the sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    # Initial array to store fib4 values up to n\n    fib4_values = [0, 0, 2, 0]\n    \n    for i in range(4, n + 1):\n        next_value = fib4_values[-1] + fib4_values[-2] + fib4_values[-3] + fib4_values[-4]\n        fib4_values.append(next_value)\n        \n    return fib4_values[n]"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False  # More closing brackets than opening ones at some point\n    return balance == 0\n\n# Output your answer as:\n# ```python\n# <your answer>"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True \n\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import fsolve  # Importing fsolve for finding roots of the polynomial.\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non-zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n\n    # Check if the list has an even number of coefficients.\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List xs must have an even number of coefficients.\")\n\n    # Create a function based on the polynomial coefficients\n    def func_to_solve(x):\n        return poly(xs, x)\n\n    # Use fsolve to find a root of the polynomial function\n    root = fsolve(func_to_solve, 0)  # Initial guess is 0\n    return root[0]  # Return the first root\n"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)\n\n# Example Usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and find common elements\n    common_elements = set(l1) & set(l2)\n    # Convert the set of common elements to a sorted list\n    sorted_common_elements = sorted(common_elements)\n    return sorted_common_elements"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n     \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    if not xs:\n        return []\n    \n    result = []\n    for power, coeff in enumerate(xs):\n        if power > 0:\n            result.append(coeff * power)\n    \n    return result\n\n# Example usages:\nprint(derivative([3, 1, 2, 4, 5]))  # [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # [2, 6]"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift > num_digits:\n        return x_str[::-1]\n    \n    shift = shift % num_digits\n    return x_str[-shift:] + x_str[:-shift]\n\n# Testing the function with provided examples\nprint(circular_shift(12, 1)) # should return \"21\"\nprint(circular_shift(12, 2)) # should return \"12\""}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n\n    if smallest_index == -1:\n        return []\n\n    return [smallest_even, smallest_index]\n\n# Test cases\nprint(pluck([4, 2, 3]))          # Output: [2, 1]\nprint(pluck([1, 2, 3]))          # Output: [2, 1]\nprint(pluck([]))                 # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2])) # Output: [0, 1]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(x):\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    largest_factor = None\n\n    # Check for smallest prime factors\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    while n % 3 == 0:\n        largest_factor = 3\n        n //= 3\n\n    factor = 5\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        while n % (factor + 2) == 0:\n            largest_factor = factor + 2\n            n //= (factor + 2)\n        factor += 6\n\n    if n > 1:\n        largest_factor = n\n\n    return largest_factor\n\n# Here are the outputs for the examples given in the docstring\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())\n\n# Testing the function with provided examples\nprint(digitSum(\"\"))  # Output: 0\nprint(digitSum(\"abAB\"))  # Output: 131\nprint(digitSum(\"abcCd\"))  # Output: 67\nprint(digitSum(\"helloE\"))  # Output: 69\nprint(digitSum(\"woArBld\"))  # Output: 131\nprint(digitSum(\"aAaaaXa\"))  # Output: 153"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n\n    # Check if the sides can form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1\n\n# Example usage:\n# triangle_area(3, 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Split the string to separate numbers from text\n    words = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Since each left to right car collides with each right to left car, the\n    # number of collisions will be equal to n * n (each car from one set\n    # collides with each car from the other set).\n    return n * n\n    \n# Example Usage\nprint(car_race_collision(3))  # Output should be 9"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    lst = sorted(lst)  # Sort the list initially\n    while lst:\n        result.append(lst.pop(0))  # Append the smallest element\n        if lst:\n            result.append(lst.pop(-1))  # Append the largest element remaining\n    return result\n\n# Examples to test the function\nprint(strange_sort_list([1, 2, 3, 4]))  # Expected == [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Expected == [5, 5, 5, 5]\nprint(strange_sort_list([]))           # Expected == []"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    count = 0\n\n    for index, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char.lower() == 'y' and index == len(s) - 1:\n            count += 1\n            \n    return count\n\n# Adding test cases to ensure the function works as expected.\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"beautiful\"))  # Expected output: 5\nprint(vowels_count(\"sky\"))  # Expected output: 1\nprint(vowels_count(\"try\"))  # Expected output: 1\nprint(vowels_count(\"y\"))  # Expected output: 1\nprint(vowels_count(\"py\"))  # Expected output: 1\nprint(vowels_count(\"python\"))  # Expected output: 1\nprint(vowels_count(\"conditional\"))  # Expected output: 4\nprint(vowels_count(\"vowelssy\"))  # Expected output: 2\nprint(vowels_count(\"\"))  # Expected output: 0\nprint(vowels_count(\"aeiouAEIOU\"))  # Expected output: 10\nprint(vowels_count(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))  # Expected output: 5"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    # Edge cases for n = 0, 1, 2\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize base values\n    a, b, c = 0, 0, 1\n\n    # Use iteration to compute the n-th fibfib number\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    \n    return c\n\n# Note: Ensure to include the function inside proper code block as follows.\n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n\n# Testing the function with the provided examples\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output should be 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))     # Output should be 1\nprint(smallest_change([1, 2, 3, 2, 1]))           # Output should be 0"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    \n    absolute_a = abs(a)\n    cube_root = round(absolute_a ** (1/3))\n    \n    return cube_root**3 == absolute_a\n\n# Test cases\nprint(iscube(1))    # ==> True\nprint(iscube(2))    # ==> False\nprint(iscube(-1))   # ==> True\nprint(iscube(64))   # ==> True\nprint(iscube(0))    # ==> True\nprint(iscube(180))  # ==> False"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    from collections import Counter\n    \n    # Get the frequency of each integer in the list\n    frequency = Counter(lst)\n    \n    # Initialize the result as -1\n    result = -1\n    \n    # Iterate over the frequency dictionary\n    for num, count in frequency.items():\n        if count >= num:\n            result = max(result, num)\n    \n    return result\n\n# Example test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Expected output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Expected output: 3\nprint(search([5, 5, 4, 4, 4]))  # Expected output: -1"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string)\n    return is_prime(length)\n\n# Example usages:\nprint(prime_length('Hello'))   # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange'))  # False"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_representation = bin(decimal)[2:]  # Convert to binary and strip the '0b' prefix\n    return f\"db{binary_representation}db\"\n\n# Test cases\nprint(decimal_to_binary(15))  # \"db1111db\"\nprint(decimal_to_binary(32))  # \"db100000db\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test cases\nprint(add([4, 2, 6, 7]))  # Expected output: 2\nprint(add([1, 2, 3, 4, 5, 6]))  # Expected output: 6\nprint(add([1, 3, 5, 7, 9]))  # Expected output: 0 since there's no even element at odd indices\nprint(add([2, 4, 6, 8, 10, 12]))  # Expected output: 24 (4 + 8 + 12)"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check each group of 3 consecutive characters\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n\n    return True\n\n# Test cases\nprint(is_happy(\"a\"))  # False\nprint(is_happy(\"aa\"))  # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\"xyy\"))  # False"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Iterate over possible combinations of three primes\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Output your answer as:\n# ```python\n# def is_multiply_prime(a):\n#     \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n#     and false otherwise.\n#     Knowing that (a) is less then 100. \n#     Example:\n#     is_multiply_prime(30) == True\n#     30 = 2 * 3 * 5\n#     \"\"\"\n#     \n#     def is_prime(n):\n#         \"\"\"Helper function to check if a number is prime.\"\"\"\n#         if n <= 1:\n#             return False\n#         for i in range(2, int(n**0.5) + 1):\n#             if n % i == 0:\n#                 return False\n#         return True\n#\n#     # Iterate over possible combinations of three primes\n#     primes = [i for i in range(2, 100) if is_prime(i)]\n#     \n#     for i in range(len(primes)):\n#         for j in range(i, len(primes)):\n#             for k in range(j, len(primes)):\n#                 if primes[i] * primes[j] * primes[k] == a:\n#                     return True\n#     return False\n# ```"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # The only 1-digit number that is both starts with 1 and ends with 1 is \"1\"\n\n    total_numbers = 10 ** n\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n\n    if n == 2:\n        overlap = 1\n    else:\n        overlap = 10 ** (n - 2)\n\n    return start_with_1 + end_with_1 - overlap\n\n# Example usage:\n# print(starts_one_ends(1))  # Output: 1\n# print(starts_one_ends(2))  # Output: 19\n# print(starts_one_ends(3))  # Output: 190"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    def sort_word(word):\n        return ''.join(sorted(word))\n\n    return ' '.join(sort_word(word) for word in s.split(' '))\n\n# Testing the function with the given examples\nprint(anti_shuffle('Hi'))            # Expected output: 'Hi'\nprint(anti_shuffle('hello'))         # Expected output: 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # Expected output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    # Handle the case where x is 1 separately since 1 is always 1**any_nonzero_integer\n    if x == 1:\n        return True\n    \n    # Start with an exponent of 1 and increase it\n    power = 1\n    current_power = n\n    \n    # Loop to find if n**some_integer equals x\n    while current_power <= x:\n        if current_power == x:\n            return True\n        power += 1\n        current_power = n ** power\n    \n    return False\n\n# Example test cases\nprint(is_simple_power(1, 4))  # => True\nprint(is_simple_power(2, 2))  # => True\nprint(is_simple_power(8, 2))  # => True\nprint(is_simple_power(3, 2))  # => False\nprint(is_simple_power(3, 1))  # => False\nprint(is_simple_power(5, 3))  # => False"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of the digits of N\n    sum_of_digits = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n\n# Testing the function with the given examples\nprint(solve(1000)) # Should return \"1\"\nprint(solve(150))  # Should return \"110\"\nprint(solve(147))  # Should return \"1100\""}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:\n        return []\n    \n    first_value = array[0]\n    last_value = array[-1]\n    sum_first_last = first_value + last_value\n\n    if sum_first_last % 2 == 0:\n        # Sort in descending order\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # Sort in ascending order\n        sorted_array = sorted(array)\n    \n    return sorted_array\n\n# Examples\n# print(sort_array([])) => []\n# print(sort_array([5])) => [5]\n# print(sort_array([2, 4, 3, 0, 1, 5])) => [0, 1, 2, 3, 4, 5]\n# print(sort_array([2, 4, 3, 0, 1, 5, 6])) => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = []\n    shift = 2 * 2  # 2 multiplied by 2 gives 4 places shift\n\n    for char in s:\n        if 'a' <= char <= 'z':  # Ensure char is a lowercase letter\n            new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            result.append(new_char)\n        else:\n            result.append(char)  # For non-alphabetical characters, leave unchanged\n\n    return ''.join(result)\n\n# Testing the function\n# These are provided test cases in the docstring\nprint(encrypt('hi'))          # should return 'lm'\nprint(encrypt('asdfghjkl'))   # should return 'ewhjklnop'\nprint(encrypt('gf'))          # should return 'kj'\nprint(encrypt('et'))          # should return 'ix'"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check the conditions where one number equals the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Obtain the unit digits by using the modulo operator with 10\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    # Calculate and return the product of the unit digits\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Remove duplicate elements by converting the list to a set\n    unique_lst = set(lst)\n    \n    # Convert set back to list and sort it\n    sorted_unique_lst = sorted(unique_lst)\n    \n    # Return the second smallest element if there are at least two unique elements\n    if len(sorted_unique_lst) >= 2:\n        return sorted_unique_lst[1]\n    else:\n        return None\n\n# Output\ndef next_smallest_test_cases():\n    print(next_smallest([1, 2, 3, 4, 5])) # == 2\n    print(next_smallest([5, 1, 4, 3, 2])) # == 2\n    print(next_smallest([])) # == None\n    print(next_smallest([1, 1])) # == None\n\nnext_smallest_test_cases()"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    \n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n            \n    return count\n\n# Examples to check the function correctness:\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    \n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n            \n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    \n    return all_lower or all_upper\n\n# Test cases based on the provided examples\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))  # True\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))  # False\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))  # False\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))  # False\nprint(check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}))  # True"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define the vowels and their replacements\n    vowels = 'aeiouAEIOU'\n    replacements = 'cgkqwCGKQW'\n    \n    # Create a translation table for the vowels\n    translation_table = str.maketrans(vowels, replacements)\n    \n    # Swap case and apply the translation table\n    encoded_message = message.swapcase().translate(translation_table)\n    \n    return encoded_message\n\n# Examples\nprint(encode('test'))\nprint(encode('This is a message'))"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    return q == q[::-1] and sum(q) <= w\n\n# Sample test cases\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Split the input string into sentences using '.', '?' and '!' as delimiters\n    import re\n    sentences = re.split(r'[.!?]', S)\n    \n    # Count the number of sentences that start with 'I'\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n    \n    return boredom_count\n\n# Testing the function with provided examples\nprint(is_bored(\"Hello world\"))  # Expected output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Expected output: 1"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digit_map = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter out the valid numbers between 1 and 9\n    valid_numbers = [num for num in arr if 1 <= num <= 9]\n\n    # Sort and reverse the valid numbers\n    sorted_reversed_numbers = sorted(valid_numbers)[::-1]\n\n    # Map the numbers to their corresponding names\n    result = [digit_map[num] for num in sorted_reversed_numbers]\n\n    return result\n\n# Examples:\n# arr = [2, 1, 1, 4, 5, 8, 2, 3] -> [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# arr = [] -> []\n# arr = [1, -1 , 55] -> ['One']"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    \n    for row_index, row in enumerate(lst):\n        for col_index in range(len(row)):\n            if row[col_index] == x:\n                coordinates.append((row_index, col_index))\n                \n    coordinates.sort(key=lambda coord: (-coord[1], coord[0]))\n    \n    return coordinates\n\n# Testing the implementation\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1)) # should return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1)) # should return []\n\nprint(get_row([[], [1], [1, 2, 3]], 3)) # should return [(2, 2)]"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    \n    return primes\n\n# Testing the function with given examples\nprint(count_up_to(5))  # => [2, 3]\nprint(count_up_to(11)) # => [2, 3, 5, 7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20)) # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18)) # => [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that have no even digits.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Check if a number has any even digit.\"\"\"\n        while n > 0:\n            if (n % 10) % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)\n\n# Testing the function as per provided examples\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x is the minimum and y is the maximum\n    if x > y:\n        x, y = y, x\n\n    # Find the largest even number in the range [x, y]\n    if y % 2 == 0:\n        return y\n    elif (y - 1) >= x and (y - 1) % 2 == 0:\n        return y - 1\n\n    return -1\n\n# Example usage:\n# choose_num(12, 15) should return 14\n# choose_num(13, 12) should return -1\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1"}
{"task_id": "HumanEval/106", "completion": "def factorial(num):\n    \"\"\"Helper function to compute factorial of a number.\"\"\"\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef sum_of_numbers(num):\n    \"\"\"Helper function to compute sum of numbers from 1 to num.\"\"\"\n    return sum(range(1, num + 1))\n\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result\n\n# Test the function with the example provided\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Replace commas with spaces\n    s = s.replace(\",\", \" \")\n    # Split the string by spaces and filter out any empty strings\n    words = [word for word in s.split() if word]\n    return words\n\n# Example usage\nprint(words_string(\"Hi, my name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    current_stones = n\n    \n    for i in range(1, n):\n        if n % 2 == 0:  # if n is even\n            current_stones += 2  # increase by the next even number\n        else:  # if n is odd\n            current_stones += 2  # increase by the next odd number (odd numbers are also spaced 2 apart)\n        pile.append(current_stones)\n    \n    return pile\n\n# Test the function with the example provided in the docstring\nprint(make_a_pile(3))  # Output should be [3, 5, 7]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Example usages:\n# Input: 3\n# Output: (1, 2)\neven_odd_palindrome(3)\n\n# Input: 12\n# Output: (4, 6)\neven_odd_palindrome(12)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    else:\n        # Compute sum of the integers from n through m\n        total_sum = sum(range(n, m + 1))\n        # Compute the count of integers from n through m\n        count = m - n + 1\n        # Compute the rounded average\n        avg = round(total_sum / count)\n        # Convert the rounded average to binary\n        return bin(avg)\n\n# Examples:\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_signed_digits(number):\n        digits = str(number)\n        sum_digits = int(digits[0])  # The first digit, which might be negative\n        for digit in digits[1:]:\n            sum_digits += int(digit)\n        return sum_digits\n\n    count = 0\n    for number in arr:\n        if sum_of_signed_digits(number) > 0:\n            count += 1\n    return count\n\n# Testing the function with provided examples\nprint(count_nums([]))          # Expected output: 0\nprint(count_nums([-1, 11, -11])) # Expected output: 1\nprint(count_nums([1, 1, 2]))    # Expected output: 3"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    if not test:\n        return {}\n\n    # Splitting the string into a list of characters\n    letters = test.split()\n\n    # Creating a dictionary to count the occurrences of each character\n    letter_counts = {}\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Finding the maximum count\n    max_count = max(letter_counts.values())\n\n    # Preparing the result dictionary with letters having the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return result\n\n# Output your answer as:\n# ```python\n# <your answer>"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_ending_here = float('inf')\n    min_so_far = float('inf')\n    \n    for num in nums:\n        min_ending_here = min(num, min_ending_here + num)\n        min_so_far = min(min_so_far, min_ending_here)\n    \n    return min_so_far\n\n# Testing the function with the provided examples\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Expected output: 1\nprint(minSubArraySum([-1, -2, -3]))        # Expected output: -6"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    # Extract all even numbers from lst1\n    even_in_lst1 = [num for num in lst1 if num % 2 == 0]\n    # Extract all even numbers from lst2\n    even_in_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    # Calculate the number of even numbers required\n    required_evens = len(lst1) - len(even_in_lst1)\n    \n    # Check if lst2 has enough even numbers to fulfil the requirement\n    if required_evens <= len(even_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # \"NO\""}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n    then check if the result string is a palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd', False)\n    For s = \"abcdef\", c = \"b\", the result should be ('acdef', False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc', True)\n    \"\"\"\n    # Remove all characters in s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the result string is a palindrome\n    is_palindrome = (result == result[::-1])\n    \n    return (result, is_palindrome)\n\n# Testing the function with the provided examples\nprint(reverse_delete(\"abcde\", \"ae\"))  # Expected: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # Expected: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Expected: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    def count_odds(s):\n        odd_digits = {'1', '3', '5', '7', '9'}\n        return sum(1 for char in s if char in odd_digits)\n    \n    def construct_sentence(count):\n        return f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"\n    \n    result = []\n    for s in lst:\n        odd_count = count_odds(s)\n        result.append(construct_sentence(odd_count))\n    \n    return result"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Find the largest prime number in the list\n    largest_prime = max((x for x in lst if is_prime(x)), default=None)\n\n    # If there are no prime numbers, return 0\n    if largest_prime is None:\n        return 0\n    \n    # Calculate and return the sum of digits of the largest prime number\n    return sum(int(digit) for digit in str(largest_prime))\n\n\n# Test cases to verify the solution\n# Expected outputs from docstring:\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # 11\nprint(skjkasdkd([0,81,12,3,1,21])) # 3\nprint(skjkasdkd([0,8,1,2,1,7])) # 7"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n\n    # Initialize the total bucket lowering counter\n    total_bucket_lowerings = 0\n\n    # Iterate over each row in the grid\n    for row in grid:\n        # Calculate the total units of water in the current row\n        total_units = sum(row)\n\n        # Calculate the number of bucket lowerings needed for the current row\n        if total_units > 0:\n            lowerings_for_row = math.ceil(total_units / capacity)\n            total_bucket_lowerings += lowerings_for_row\n\n    return total_bucket_lowerings\n\n# Output your answer as:\n# ```python\n# def max_fill(grid, capacity):\n#     import math\n# \n#     total_bucket_lowerings = 0\n#     for row in grid:\n#         total_units = sum(row)\n#         if total_units > 0:\n#             lowerings_for_row = math.ceil(total_units / capacity)\n#             total_bucket_lowerings += lowerings_for_row\n# \n#     return total_bucket_lowerings\n# ```"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    if not arr:  # if the array is empty\n        return True\n    \n    n = len(arr)\n    extended = arr + arr  # extend the array to simulate infinite right shifts\n    \n    # Check if there is any subarray of length n within the extended array that is sorted\n    for i in range(n):\n        if extended[i:i + n] == sorted(extended[i:i + n]):\n            return True\n    \n    return False\n\n# Example use cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \"\"\"\n    \n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n\n    words = s.split()\n    result = []\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el for el in arr[:k] if -99 <= el <= 99)\n\n# Example usage\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(sorted(arr, reverse=True)[:k])\n\n# Testing the function with the given examples\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    \n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check both possible concatenations\n    if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]):\n        return 'Yes'\n    return 'No'\n\nprint(match_parens(['()(', ')']))  # Expected output: 'Yes'\nprint(match_parens([')', ')']))    # Expected output: 'No'"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    odd_numbers = set()  # Using a set to automatically handle duplicates\n    while n != 1:\n        if n % 2 != 0:  # If n is odd\n            odd_numbers.add(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    odd_numbers.add(1)  # Add the final 1 at the end of the sequence\n\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    odd_product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n            has_odd = True\n        n //= 10\n    \n    return odd_product if has_odd else 0"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Traverse the string from right to left, excluding the first and last character\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n\n    # If no such vowel is found\n    return \"\"\n\n# Output the answer\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))    # \"U\"\nprint(get_closest_vowel(\"quick\"))   # \"\"\nprint(get_closest_vowel(\"ab\"))      # \"\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n\n    magnitude_sum = sum(abs(num) for num in arr)\n    sign_product = 1\n\n    for num in arr:\n        if num == 0:\n            return 0\n        sign_product *= (1 if num > 0 else -1)\n\n    return magnitude_sum * sign_product\n\n# Example usage:\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))         # Output: 0\nprint(prod_signs([]))             # Output: None"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Testing the function with examples provided in the docstring\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    \n    # Check for more than 1 duplicate of the same number\n    from collections import Counter\n    count = Counter(lst)\n    \n    for value in count.values():\n        if value > 2:\n            return False\n    \n    # Check if sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    # First, check if there are any whitespace characters in the text\n    if ' ' in txt:\n        return txt.split()\n    \n    # If no whitespaces, check if there are commas\n    if ',' in txt:\n        return txt.split(',')\n    \n    # If no whitespaces or commas, calculate the number of lower-case letters with odd order in the alphabet\n    odd_order_count = 0\n    for char in txt:\n        if char.islower():\n            position = ord(char) - ord('a')\n            if position % 2 == 1:\n                odd_order_count += 1\n    \n    return odd_order_count\n\n# Example usage:\n# split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n# split_words(\"abcdef\") == 3 "}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    stack = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack and not nested_found:\n                    nested_found = True\n            else:\n                return False\n\n    return nested_found and not stack\n\n# Examples\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # A positive even number can be written as the sum of exactly 4 positive even numbers if it's at least 8\n    if n < 8:\n        return False\n    \n    return n % 2 == 0\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True\nprint(is_equal_to_sum_even(10))  # True\nprint(is_equal_to_sum_even(15))  # False\nprint(is_equal_to_sum_even(20))  # True"}
{"task_id": "HumanEval/134", "completion": ""}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    \n    largest_negative = None\n    smallest_positive = None\n\n    for number in lst:\n        if number < 0:\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))  # (None, None)\nprint(largest_smallest_integers([0]))  # (None, None)\nprint(largest_smallest_integers([-3, -1, -4, 2, 7, 5, 3]))  # (-1, 2)\nprint(largest_smallest_integers([-3, -1, -4]))  # (-1, None)\nprint(largest_smallest_integers([2, 4, 1, 3]))  # (None, 1)"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int (Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Example usage:\n# print(sum_squares([1, 2, 3]))  # Output: 14\n# print(sum_squares([1, 4, 9]))  # Output: 98\n# print(sum_squares([1, 3, 5, 7]))  # Output: 84\n# print(sum_squares([1.4, 4.2, 0]))  # Output: 29\n# print(sum_squares([-2.4, 1, 1]))  # Output: 6"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n\n# Example usage:\n# print(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    \n    # Check if date string is empty\n    if not date:\n        return False\n    \n    # Check if date string is in the correct format: mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Extract month, day, and year from the date string\n    try:\n        month = int(date[0:2])\n        day = int(date[3:5])\n        year = int(date[6:10])\n    except ValueError:\n        return False\n    \n    # Check if the month is in the valid range\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the valid range of days based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    # Additional simple year sanity check\n    if year < 1:\n        return False\n    \n    return True\n\n# Test cases\nassert valid_date('03-11-2000') == True\nassert valid_date('15-01-2012') == False\nassert valid_date('04-0-2040') == False\nassert valid_date('06-04-2020') == True\nassert valid_date('06/04/2020') == False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    # Determine the intersection of the intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # Calculate the length of the intersection interval\n    if intersection_start <= intersection_end:\n        length_of_intersection = intersection_end - intersection_start + 1  # +1 because intervals are inclusive\n    else:\n        length_of_intersection = 0\n\n    # Check if the length is a prime number\n    if is_prime(length_of_intersection):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Examples:\n# words_in_sentence(\"This is a test\")\n# Output: \"is\"\n# words_in_sentence(\"lets go for swimming\")\n# Output: \"go for\""}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i, val in enumerate(lst):\n        if i % 3 == 0:\n            result += val ** 2\n        elif i % 4 == 0:\n            result += val ** 3\n        else:\n            result += val\n    return result\n\n# Ensure the function follows the description provided in the docstring."}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    \n    def convert(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return value\n    \n    a_converted = convert(a)\n    b_converted = convert(b)\n    \n    if a_converted == b_converted:\n        return None\n    elif a_converted > b_converted:\n        return a\n    else:\n        return b\n\n# Testing the function with the provided test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with -\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    import re\n\n    # Replace all sequences of three or more spaces with a single '-'\n    text = re.sub(r'\\s{3,}', '-', text)\n    # Replace all remaining single and double spaces with underscores\n    text = re.sub(r' ', '_', text)\n\n    return text\n\n# Example usage\nprint(fix_spaces(\"Example\"))\nprint(fix_spaces(\"Example 1\"))\nprint(fix_spaces(\" Example 2\"))\nprint(fix_spaces(\" Example   3\"))"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    \n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort by sum of digits first, then by original index as secondary sort criterion\n    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))\n\n# Example test case\nprint(order_by_points([1, 11, -1, -11, -12]))  # Expected output: [-1, -11, 1, -12, 11]"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    def fraction_to_float(fraction):\n        num, denom = map(int, fraction.split('/'))\n        return num / denom\n    \n    x_value = fraction_to_float(x)\n    n_value = fraction_to_float(n)\n    \n    result = x_value * n_value\n    \n    return result.is_integer()\n\n# Test cases:\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total += num ** 2\n    return total"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        upper_case = sum(1 for c in extension if c.isupper())\n        lower_case = sum(1 for c in extension if c.islower())\n        return upper_case - lower_case\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    \n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length, and then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_list\n\n# Example usage\nprint(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))  # Output: [\"aa\"]\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))  # Output: [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        sqrt_num = int(num ** 0.5) + 1\n        for divisor in range(3, sqrt_num, 2):\n            if num % divisor == 0:\n                return False\n        return True\n    \n    return x if is_prime(n) else y\n\n# Example usage\nprint(x_or_y(7, 34, 12))  # should return 34\nprint(x_or_y(15, 8, 5))   # should return 5"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    def is_odd_digit(n):\n        return n in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # Convert to string and ignore negative sign\n            if is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    \n    n = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def in_bounds(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    # Initialize a minimal path as infinite for comparison\n    min_path = None\n\n    for i in range(n):\n        for j in range(n):\n            start_value = grid[i][j]\n            queue = deque([(i, j, [start_value])])\n\n            while queue:\n                x, y, path = queue.popleft()\n                \n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path\n                    continue\n                \n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if in_bounds(nx, ny):\n                        new_path = path + [grid[nx][ny]]\n                        queue.append((nx, ny, new_path))\n\n    return min_path\n\n# Example Usage\ngrid_1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk_1 = 3\nprint(minPath(grid_1, k_1))  # Output: [1, 2, 1]\n\ngrid_2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk_2 = 1\nprint(minPath(grid_2, k_2))  # Output: [1]"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n\n# Ensure the function follows the description provided in the docstring.\n# Output your answer as:\n# ```python\n# <your answer>"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    result = []\n    for g, s in zip(game, guess):\n        difference = abs(g - s) if g != s else 0\n        result.append(difference)\n    return result"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Use absolute value to handle negative numbers\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the number\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return even_count, odd_count\n\n# Testing with provided examples\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = max(remaining - need, 0)\n    return [total_eaten, remaining_carrots]\n\n# Example usages:\n# eat(5, 6, 10) -> [11, 4]\n# eat(4, 8, 9) -> [12, 1]\n# eat(1, 10, 10) -> [11, 0]\n# eat(2, 11, 5) -> [7, 0]"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    mod_count = [0, 0, 0]\n\n    for value in a:\n        mod_count[value % 3] += 1\n\n    return (mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6 +\n            mod_count[1] * (mod_count[1] - 1) * (mod_count[1] - 2) // 6 +\n            mod_count[2] * (mod_count[2] - 1) * (mod_count[2] - 2) // 6 +\n            mod_count[0] * mod_count[1] * mod_count[2])"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphabet letter)\n    \"\"\"\n    import re\n    \n    # Check for exactly one dot.\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts based on the dot.\n    name_part, extension = file_name.split('.')\n    \n    # Check the extension validity\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if the name part is not empty and starts with a letter.\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Count digits in the name part.\n    digit_count = sum(c.isdigit() for c in name_part)\n    \n    # Check if there are more than 3 digits in the name part.\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n\n# Example usage\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word.\n    \n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Check all rotations of b to see if any is a substring of a\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n\n    # Sort the sides so that c is the largest\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem: a^2 + b^2 = c^2\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usages:\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if any(c.isalpha() for c in s):\n        # If the string contains any letters, reverse their cases\n        return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    else:\n        # If the string contains no letters, reverse the string\n        return s[::-1]"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Roman numeral mappings\n    roman_numerals = [\n        (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'),\n        (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'),\n        (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I')\n    ]\n\n    result = \"\"\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n\n    # Convert the result to lowercase as required\n    return result.lower()\n\n# Example usage:\n# print(int_to_mini_roman(19))  # Output: 'xix'\n# print(int_to_mini_roman(152))  # Output: 'clii'\n# print(int_to_mini_roman(426))  # Output: 'cdxxvi'"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\n    \"\"\"\n    # Initialize the variables to track the word with the maximum number of unique characters\n    max_unique_chars = 0\n    max_unique_word = \"\"\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Get the count of unique characters in the current word\n        unique_chars = len(set(word))\n        \n        # Compare with the current maximum and update if needed\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_unique_word):\n            max_unique_chars = unique_chars\n            max_unique_word = word\n    \n    return max_unique_word\n\n# Test the function with example inputs\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    \n    def tribonacci_value(m, memo):\n        if m in memo:\n            return memo[m]\n        if m == 1:\n            return 3\n        elif m % 2 == 0:\n            result = 1 + m // 2\n        else:\n            result = (tribonacci_value(m - 1, memo) + \n                      tribonacci_value(m - 2, memo) + \n                      tribonacci_value(m + 1, memo))\n\n        memo[m] = result\n        return result\n\n    memo = {0: 1}\n    result = []\n    for i in range(n + 1):\n        result.append(tribonacci_value(i, memo))\n    return result\n\n# Example\n# tri(3) = [1, 3, 2, 8]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of the operator list is equal to the length of the operand list minus one.\n        Operand is a list of non-negative integers.\n        The operator list has at least one operator, and the operand list has at least two operands.\n\n    \"\"\"\n    # Construct the expression as a string\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    # Evaluate the constructed expression\n    result = eval(expression)\n    \n    return result\n\n# Example usage:\n# operator = ['+', '*', '-']\n# operand = [2, 3, 4, 5]\n# result = do_algebra(operator, operand)\n# print(result)  # Output should be 9"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    even_digits = [2, 4, 6, 8]\n    \n    start = min(a, b)\n    end = max(a, b)\n    \n    return [digit for digit in even_digits if start <= digit <= end]\n\n# Example usage:\n# print(generate_integers(2, 8))  => [2, 4, 6, 8]\n# print(generate_integers(8, 2))  => [2, 4, 6, 8]\n# print(generate_integers(10, 14)) => []"}
