{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than the given number) \n    and a decimal part (leftover part always smaller than 1).\n\n    This function returns the decimal part of the number.\n\n    :param number: A positive floating point number.\n    :return: The decimal part of the given number.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \n    >>> truncate_number(10.123)\n    0.123\n    \"\"\"\n    # Use the modulus operator to get the decimal part\n    decimal_part = number % 1\n    return decimal_part\n\n# Example usage:\n# truncated_decimal = truncate_number(3.5)\n# print(truncated_decimal)  # Output: 0.5"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups of nested parentheses separated by spaces.\n    For each group, output the deepest level of nesting of parentheses.\n    E.g., (()()) has a maximum of two levels of nesting, while ((())) has three.\n\n    :param paren_string: A string of groups of parentheses separated by spaces.\n    :return: A list of integers where each integer represents the deepest level of nesting for the corresponding group of parentheses.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the input string into individual groups based on spaces\n    groups = paren_string.split()\n    \n    results = []\n    \n    for group in groups:\n        max_depth = 0  # Initialize max depth for the current group\n        current_depth = 0  # Current depth counter\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        results.append(max_depth)\n    \n    return results"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" \n    Filters an input list of strings to only include those that contain a given substring.\n    \n    :param strings: List of input strings to filter.\n    :param substring: The substring to look for in each string.\n    :return: A list of strings containing the given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    # Initialize an empty list to store strings containing the substring\n    result = []\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the current string contains the given substring\n        if substring in string:\n            result.append(string)  # If it does, add it to the result list\n\n    return result\n\n\n# Example Usage:\nfiltered_strings = filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\nprint(filtered_strings)  # Output: ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point, the function should return True. Otherwise, it should return False.\n    \n    :param operations: List of integers where positive values represent deposits and negative values represent withdrawals.\n    :return: Boolean indicating if the account balance ever falls below zero.\n    \n    Examples:\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n\n    # Iterate through each operation to update the balance\n    for operation in operations:\n        balance += operation  # Update balance based on the operation\n        if balance < 0:  # Check if the balance has fallen below zero\n            return True\n    \n    return False  # Return False if balance never fell below zero\n\n# Example Usages and Tests\n# print(below_zero([1, 2, 3]))  # Expected Output: False\n# print(below_zero([1, 2, -4, 5]))  # Expected Output: True"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Insert a number `delimiter` between every two consecutive elements of input list `numbers`.\n\n    :param numbers: List of integers.\n    :param delimiter: An integer to be inserted between consecutive elements.\n    :return: A new list with the delimiter inserted between consecutive elements.\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])  # Add the current number\n        result.append(delimiter)  # Add the delimiter after the current number\n\n    result.append(numbers[-1])  # Add the last number without a following delimiter\n    return result\n\n# For initial testing\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in the list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    :param numbers: List of integers.\n    :return: A tuple containing the sum and product of the integers in the list.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n\n    # Initialize sum to 0 and product to 1, handling the empty list case\n    total_sum = 0\n    total_product = 1\n\n    # Iterate through each number in the list to compute the sum and product\n    for num in numbers:\n        total_sum += num        # Incrementally add the current number to the total sum\n        total_product *= num    # Multiply the current number with the total product\n\n    # Return the computed sum and product as a tuple\n    return (total_sum, total_product)\n\n# Example usage:\n# result = sum_product([1, 2, 3, 4])\n# print(result)  # Output: (10, 24)"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \n    Returns the greatest common divisor (GCD) of two integers a and b using \n    the Euclidean algorithm.\n\n    The Euclidean algorithm is an efficient method for computing the GCD of two\n    numbers based on the principle that the GCD of two numbers also divides \n    their difference.\n\n    :param a: First integer\n    :param b: Second integer\n    :return: The GCD of a and b\n    \n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    # Ensure a and b are non-negative; if negative, take their absolute values\n    a, b = abs(a), abs(b)\n\n    # Implementing the Euclidean algorithm: \n    # repeatedly replace the larger number by its remainder when divided by \n    # the smaller number until the remainder is 0.\n    while b != 0:\n        a, b = b, a % b\n\n    # When b becomes 0, a is the GCD\n    return a\n\n# Example usage:\n# print(greatest_common_divisor(3, 5))  # Output: 1\n# print(greatest_common_divisor(25, 15))  # Output: 5"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    The function separates multiple groups of nested parentheses from the given input string.\n\n    :param paren_string: A string containing multiple groups of nested parentheses. \n                         Groups are balanced and non-nested.\n                         Spaces in the input string are ignored.\n    :return: A list of separated substrings, each representing a group of nested parentheses.\n\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    # Remove spaces from the input string as they are to be ignored\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []  # List to hold the separated groups\n    count = 0    # Counter to track the balance of parentheses\n    group = []   # List to accumulate characters of the current group\n\n    for char in paren_string:\n        group.append(char)\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        # When count reaches zero, we have a balanced group\n        if count == 0:\n            result.append(\"\".join(group))\n            group = []  # Reset group for the next set of parentheses\n\n    return result\n\n# Example usage\nprint(separate_paren_groups('( ) (( )) (( )( ))'))\n# Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum elements found until the given moment\n    in the sequence.\n    \n    :param numbers: The list of integers to process.\n    :return: A list containing the rolling maximum values.\n    \n    Example:\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:  # If the input list is empty, return an empty list\n        return []\n\n    result = []\n    current_max = float('-inf')  # Initialize current max to negative infinity to handle all cases\n    \n    for number in numbers:\n        # Update the current maximum if the current number is greater than the current maximum\n        if number > current_max:\n            current_max = number\n        # Append the current maximum to the result list\n        result.append(current_max)\n    \n    return result\n\n# Example usage:\n# rolling = rolling_max([1, 2, 3, 2, 3, 4, 2])\n# print(rolling)  # Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Returns a list of all prefixes of the input string, ordered from shortest to longest.\n    \n    :param string: The input string from which to generate prefixes.\n    :return: A list of prefixes.\n    \n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    # Initialize an empty list to hold the prefixes.\n    prefixes = []\n    \n    # Iterate over the string, creating a new prefix at each step.\n    for i in range(1, len(string) + 1):\n        # Slice the string from the start up to the current position (i) and append to the list.\n        prefixes.append(string[:i])\n    \n    # Return the list of prefixes.\n    return prefixes\n\n# Example usage:\n# prefixes = all_prefixes('hello')\n# print(prefixes)  # Output: ['h', 'he', 'hel', 'hell', 'hello']"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in the given list of numbers, any two numbers are closer to each other than\n    the given threshold.\n    \n    :param numbers: List of floats representing the numbers.\n    :param threshold: A float representing the threshold distance.\n    :return: True if there are any two numbers in the list that are closer to each other than the threshold, False otherwise.\n    \n    Example usage:\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    \n    # Sort the list to make comparison of adjacent elements easy.\n    sorted_numbers = sorted(numbers)\n    \n    # Iterate over the sorted list and check the difference between adjacent elements.\n    for i in range(len(sorted_numbers) - 1):\n        # If the difference between consecutive elements is less than the threshold, return True.\n        if abs(sorted_numbers[i + 1] - sorted_numbers[i]) < threshold:\n            return True\n            \n    # If no such pair is found, return False.\n    return False\n\n# Testing the function\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation (MAD)\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    :param numbers: A list of float numbers.\n    :return: The Mean Absolute Deviation of the numbers.\n    \n    Example:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    \n    if not numbers:\n        raise ValueError(\"The input list cannot be empty\")\n\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of the absolute deviations\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad\n\n# Example usage:\n# mad = mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# print(mad)  # Output: 1.0"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    \n    :param n: An integer indicating the end of the range (inclusive).\n    :return: A space-delimited string of numbers from 0 to n.\n    \"\"\"\n    # Generate a list of numbers from 0 to n\n    numbers = list(range(n + 1))\n    \n    # Convert each number to a string and join them with spaces\n    result = ' '.join(map(str, numbers))\n    \n    return result\n\n# Example usage:\n# print(string_sequence(0))  # Output: '0'\n# print(string_sequence(5))  # Output: '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) it consists of.\n    \n    :param string: The input string from which to count distinct characters.\n    :return: The count of distinct characters in the input string.\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lower case to ensure we are case insensitive.\n    lower_case_string = string.lower()\n    \n    # Use a set to keep track of unique characters found in the string.\n    unique_characters = set(lower_case_string)\n    \n    # Return the length of the set which represents the number of distinct characters.\n    return len(unique_characters)\n\n# Example usage:\n# print(count_distinct_characters('xyzXYZ'))  # Output: 3\n# print(count_distinct_characters('Jerry'))   # Output: 4\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" \n    Return the length of the given string.\n    \n    :param string: The string whose length is to be measured.\n    :return: The length of the string.\n    \n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    # Initialize a counter to 0\n    length = 0\n\n    # Iterate over each character in the string\n    for char in string:\n        # Increment the counter for each character\n        length += 1\n\n    # Return the final length\n    return length\n\n# Example usage:\n# length = strlen(\"hello\")\n# print(length)  # Output: 5"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    :param numbers: List of floating-point numbers to be rescaled.\n    :return: A new list of numbers rescaled to the [0, 1] range.\n    \n    Example:\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Difference between max and min for scaling factor\n    range_val = max_val - min_val\n    \n    # Check for the edge case where all numbers are the same\n    if range_val == 0:\n        # If all numbers are the same, treat them uniformly as 0\n        return [0.0] * len(numbers)\n    \n    # Apply the linear transformation to each number in the list\n    rescaled_list = [(num - min_val) / range_val for num in numbers]\n    \n    return rescaled_list\n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n    \n    :param n: The integer number for which to find the largest divisor smaller than itself.\n    :return: The largest divisor of n that is smaller than n.\n    \n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(16)\n    8\n    >>> largest_divisor(21)\n    7\n    \"\"\"\n    # Starting from n // 2 and going downwards to 1,\n    # check if the number is a divisor of n\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    # If all else fails, return 1 as every number is divisible by 1\n    return 1\n\n# Example usage:\n# print(largest_divisor(15))  # Output: 5\n# print(largest_divisor(16))  # Output: 8\n# print(largest_divisor(100))  # Output: 50"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" \n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n    :param string: The input string whose case needs to be flipped.\n    :return: A new string with each character's case flipped.\n    \n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('WORLD')\n    'world'\n    >>> flip_case('Python3.8')\n    'pYTHON3.8'\n    \"\"\"\n    # Use a list comprehension to iterate over each character in the string.\n    # If it's uppercase, convert to lowercase; if it's lowercase, convert to uppercase.\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n# Example usage:\n# flipped_string = flip_case(\"Hello\")\n# print(flipped_string)  # Output: \"hELLO\"\n\n# flipped_string = flip_case(\"WORLD\")\n# print(flipped_string)  # Output: \"world\"\n\n# flipped_string = flip_case(\"Python3.8\")\n# print(flipped_string)  # Output: \"pYTHON3.8\""}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n    :param numbers: List of integers which may contain duplicates.\n    :return: A list with all duplicates removed, preserving the order of the first occurrence.\n    \n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Dictionary to keep track of the count of each element\n    count = {}\n    \n    # First pass to populate the count dictionary\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Second pass to collect elements that occur only once\n    result = [num for num in numbers if count[num] == 1]\n\n    return result\n\n# Example usage:\nunique_numbers = remove_duplicates([1, 2, 3, 2, 4])\nprint(unique_numbers)  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" \n    Takes a space-delimited string of numerals from 'zero' to 'nine' and returns a string with these numbers sorted \n    from smallest to largest.\n    \n    :param numbers: The input string containing numerals from 'zero' to 'nine'.\n    :return: The sorted string containing these numerals.\n    \n    Example:\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    \n    # Create a mapping from string numerals to their respective integer values\n    numeral_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Sort the list based on the integer values of the numerals using the mapping dictionary\n    sorted_words = sorted(words, key=lambda word: numeral_dict[word])\n    \n    # Join the sorted list into a single space-delimited string\n    sorted_numbers_str = \" \".join(sorted_words)\n    \n    return sorted_numbers_str\n\n# Example usage:\n# result = sort_numbers('three one five')\n# print(result)  # Output: 'one three five'"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string representing musical notes in a special ASCII format and returns a list of integers\n    corresponding to how many beats each note lasts.\n\n    :param music_string: A string containing musical notes in ASCII format.\n                        'o' - whole note, lasts four beats\n                        'o|' - half note, lasts two beats\n                        '.|' - quarter note, lasts one beat\n    :return: List of integers where each integer represents the beats a note lasts.\n    \n    Example:\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Define a mapping from note representations to their respective beats\n    note_to_beats = {\n        'o': 4,   # Whole note\n        'o|': 2,  # Half note\n        '.|': 1   # Quarter note\n    }\n    \n    # Split the input string by spaces to get individual note representations\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beats\n    beats = []\n    \n    # Iterate over each note representation in the split list\n    for note in notes:\n        # Fetch the corresponding beat count from the mapping and append to the beats list\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n        else:\n            raise ValueError(f\"Unrecognized note format: {note}\")\n    \n    return beats\n\n\n# Example usage:\n# print(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# Expected output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two input strings consisting only of '1's and '0's.\n\n    :param a: A binary string, consisting of '1's and '0's.\n    :param b: Another binary string, consisting of '1's and '0's. The length of b is the same as length of a.\n    :return: The binary result of performing XOR on strings a and b.\n\n    :example:\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Initialize the result string\n    result = []\n    \n    # Iterate through each character of the binary strings\n    for char_a, char_b in zip(a, b):\n        # Perform XOR on each corresponding character from a and b\n        if char_a == char_b:\n            result.append('0')\n        else:\n            result.append('1')\n    \n    # Join the list of characters into a single string to get the final result\n    return ''.join(result)\n\n# Example usage:\n# xor_result = string_xor(\"010\", \"110\")\n# print(xor_result)  # Output: \"100\""}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers.\n\n    :param values: List of values of any type.\n    :return: List containing only integer values from the input list.\n    \n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # Use list comprehension to filter only integer values from the input list.\n    return [value for value in values if isinstance(value, int)]\n\n# Example usage:\n# filtered_list = filter_integers(['a', 3.14, 5])\n# print(filtered_list)  # Output: [5]\n\n# filtered_list = filter_integers([1, 2, 3, 'abc', {}, []])\n# print(filtered_list)  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" \n    Concatenate a list of strings into a single string.\n    \n    :param strings: List of strings to concatenate.\n    :return: A single string that is the concatenation of all the strings in the list.\n    \n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    # Use Python's join method for efficient and fast concatenation.\n    return ''.join(strings)\n\n# Example usage:\n# concatenated_string = concatenate(['a', 'b', 'c'])\n# print(concatenated_string)  # Output: \"abc\""}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" \n    Out of a list of strings, return the longest one. \n    Return the first one in case of multiple strings of the same length. \n    Return None in case the input list is empty.\n\n    :param strings: List of strings to evaluate.\n    :return: The longest string from the list. Returns the first one if there are multiple with the same length. Returns None if the list is empty.\n    \n    Examples:\n    >>> longest([])\n    None\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    \n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    # Return None if the input list is empty\n    if not strings:\n        return None\n    \n    # Initialize the longest string as the first string in the list\n    longest_string = strings[0]\n    \n    # Iterate over each string in the list to find the longest one\n    for string in strings:\n        # Check if the current string is longer than the stored longest string\n        if len(string) > len(longest_string):\n            longest_string = string\n        # No need to handle the equal length case because we keep the first one\n        \n    # Return the longest string found\n    return longest_string\n\n# Example usage:\n# print(longest([]))  # Output: None\n# print(longest(['a', 'b', 'c']))  # Output: 'a'\n# print(longest(['a', 'bb', 'ccc']))  # Output: 'ccc'"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" \n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed the number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \n    :param n: The integer to be factorized.\n    :return: A list of prime factors of the integer.\n    \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    \n    # Check for the number of 2's that divide n (2 is the smallest prime number)\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    \n    # After verifying 2, we check for odd numbers starting from 3\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n    \n    # If n is still a prime number and greater than 2 at this point,\n    # then it is a prime factor.\n    if n > 2:\n        factors.append(n)\n    \n    return factors\n\n# Example usage:\n# print(factorize(8))   # Output: [2, 2, 2]\n# print(factorize(25))  # Output: [5, 5]\n# print(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filters an input list of strings to include only those that start with a given prefix.\n\n    :param strings: List of strings to filter.\n    :param prefix: The prefix to filter by.\n    :return: List of strings that start with the given prefix.\n    \n    Example usage:\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Check if the string starts with the given prefix\n        if string.startswith(prefix):\n            # If it does, add it to the result list\n            result.append(string)\n    \n    # Return the filtered list\n    return result\n\n# Example usage:\n# filtered_list = filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n# print(filtered_list)  # Output: ['abc', 'array']"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list) -> list:\n    \"\"\"\n    Return sorted unique elements in a list.\n    \n    :param l: List from which to extract unique elements.\n    :return: A sorted list of unique elements.\n    \n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Use a set to remove duplicates as it only keeps unique elements.\n    unique_elements = set(l)\n    # Convert the set back to a list and then sort it.\n    sorted_unique_elements = sorted(unique_elements)\n    return sorted_unique_elements\n\n# Example usage:\n# unique_list = unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# print(unique_list)  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n\n    :param string: The original string where the search is performed.\n    :param substring: The substring to be counted in the original string.\n    :return: The count of how many times the substring occurs in the original string, including overlapping occurrences.\n\n    Examples:\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    \n    # Iterate through the main string to find all occurrences of the substring\n    while True:\n        # Find the next occurrence of the substring from the current starting position\n        start = string.find(substring, start)\n        if start == -1:\n            break  # No more occurrences found\n        count += 1\n        # Move to the next character after the current match to allow overlapping\n        start += 1\n    \n    return count\n\n# Tests\nimport doctest\ndoctest.testmod()"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    :param n: The upper limit (exclusive) for the integers to check.\n    :return: The count of the digit '7' in numbers less than n that are divisible by 11 or 13.\n    \n    Examples:\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')  # Convert the number to string and count '7's\n\n    return count\n\n# Example usage:\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return the maximum element in the list.\n    \n    :param l: A list of integers.\n    :return: The maximum integer in the list.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Initialize the maximum value to the smallest possible integer or the first element in the list\n    max_val = l[0] if l else float('-inf')\n    \n    # Iterate over each element in the list\n    for num in l:\n        # Update the maximum value if the current number is greater\n        if num > max_val:\n            max_val = num\n    \n    return max_val\n \n# Example usage\n# print(max_element([1, 2, 3]))  # Output: 3\n# print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list) -> list:\n    \"\"\"\n    This function takes a list `l` and returns a list `l'` such that\n    `l'` is identical to `l` at the indices that are not divisible by three, \n    while its values at the indices that are divisible by three are sorted.\n    \n    :param l: The list to be processed.\n    :return: A new list with values at indices divisible by three sorted.\n    \n    Examples:\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    \n    # Collect the elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the collected elements\n    divisible_by_three.sort()\n    \n    # Create a copy of the original list to preserve the indices not divisible by 3\n    result = l.copy()\n    \n    # Replace the elements at indices divisible by 3 with the sorted elements\n    for i, value in enumerate(divisible_by_three):\n        result[i * 3] = value\n    \n    return result\n\n# Examples for testing\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and is also prime.\n    \n    :param n: The index (1-based) of the desired number that is both a Fibonacci number and prime.\n    :return: The n-th prime Fibonacci number.\n    \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \n        :param num: The number to check for primality.\n        :return: True if the number is prime, False otherwise.\n        \"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    a, b = 0, 1\n    count = 0\n    while True:\n        fib = a + b\n        a, b = b, fib\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n    \n# Example usage:\n# To get the n-th prime Fibonacci number\n# print(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are \n    the closest to each other and return them in order (smaller number, larger number).\n\n    :param numbers: List of floating-point numbers.\n    :return: Tuple of two floating-point numbers that are closest to each other.\n    \n    Examples:\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the numbers to bring the closest elements next to each other\n    sorted_numbers = sorted(numbers)\n\n    # Initialize variables to keep track of the minimum difference and the closest pair\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n\n    # Iterate through the sorted list to find the minimum difference\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_pair\n\n# Examples usage:\n# print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\n# print(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    \"\"\"\n    This function takes a list `l` and returns a new list where \n    the values at the even indices are sorted while \n    the values at the odd indices remain unchanged.\n    \n    :param l: List of integers to be processed.\n    :return: New list with even indices' values sorted.\n    \"\"\"\n    # Extract the values at even indices\n    even_indices_values = [l[i] for i in range(len(l)) if i % 2 == 0]\n    \n    # Sort the values that are at even indices\n    sorted_even_indices_values = sorted(even_indices_values)\n    \n    # Initialize a new list to store the result\n    result = []\n    even_index_pointer = 0\n    \n    # Rebuild the list with sorted even indices and unchanged odd indices\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(sorted_even_indices_values[even_index_pointer])\n            even_index_pointer += 1\n        else:\n            result.append(l[i])\n            \n    return result\n\n# Example usage:\n# sorted_list = sort_even([5, 6, 3, 4])\n# print(sorted_list)  # Output: [3, 6, 5, 4]\n\n# Additional test cases:\n# sorted_list = sort_even([1, 2, 3])\n# print(sorted_list)  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    \n    A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.\n    \n    Parameters:\n    n (int): The number to check for primality.\n    \n    Returns:\n    bool: True if the number is prime, False if it is not.\n    \n    Examples:\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False  # Numbers less than or equal to 1 are not prime\n    if n <= 3:\n        return True  # 2 and 3 are prime numbers\n    if n % 2 == 0 or n % 3 == 0:\n        return False  # Eliminate multiples of 2 and 3\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False  # Eliminate multiples of i and (i + 2)\n        i += 6  # Consider next potential factors\n\n    return True  # Return True if no divisible factors were found\n\n\n# Example usage:\n# print(is_prime(6))  # Output: False\n# print(is_prime(101))  # Output: True\n"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    \"\"\"\n    Return only positive numbers in the list.\n    \n    :param l: List of integers.\n    :return: List containing only the positive integers from the input list.\n\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    # Initialize an empty list to store positive numbers\n    positives = []\n    \n    # Iterate through each element in the input list\n    for number in l:\n        # Check if the number is greater than zero (positive)\n        if number > 0:\n            # Append the positive number to the results list\n            positives.append(number)\n    \n    # Return the list of positive numbers\n    return positives\n\n# Example usage:\n# print(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\n# print(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    \n    :param xs: List of coefficients of the polynomial.\n    :param x: The value at which the polynomial is to be evaluated.\n    :return: The evaluated result of the polynomial at point x.\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\"\n    Given the coefficients of a polynomial, finds a zero of the polynomial.\n    The list xs should have an even number of coefficients and the largest\n    non-zero coefficient which guarantees a solution.\n    \n    :param xs: List of integers, representing the coefficients of the polynomial.\n    :return: A float that is a zero of the polynomial described by xs.\n    \"\"\"\n    # We will use the Newton-Raphson method to find a root of the polynomial\n    # Define the derivative of the polynomial\n    def derivative(xs):\n        return [i * coeff for i, coeff in enumerate(xs)][1:]  # Ignore the zero coefficient term\n\n    # Set an initial guess for the root\n    x0 = 0.0\n\n    # Maximum number of iterations\n    max_iter = 1000\n\n    # Tolerance for convergence\n    tolerance = 1e-7\n\n    # Implement the Newton-Raphson iterative method\n    for _ in range(max_iter):\n        y = poly(xs, x0)\n        if abs(y) < tolerance:\n            return x0\n        y_prime = poly(derivative(xs), x0)\n        if y_prime == 0:\n            break  # Avoid division by zero\n        x0 = x0 - y / y_prime\n\n    # If we did not converge, return the best result we'd obtained\n    return x0\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Output: -0.5\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Output: 1.0"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    :param l: List of integers.\n    :return: True if there are two distinct elements that sum to zero, False otherwise.\n    \"\"\"\n    # Create a set to track the elements that have been seen.\n    seen = set()\n    \n    for num in l:\n        # Check if the negation of the number is in the seen set.\n        if -num in seen:\n            return True\n        # Add the current number to the seen set.\n        seen.add(num)\n    \n    # If no such pair is found, return False.\n    return False\n\n# Example usage:\n# pairs_sum_to_zero([1, 3, 5, 0])  # Output: False\n# pairs_sum_to_zero([1, 3, -2, 1])  # Output: False\n# pairs_sum_to_zero([1, 2, 3, 7])  # Output: False\n# pairs_sum_to_zero([2, 4, -5, 3, 5, 7])  # Output: True\n# pairs_sum_to_zero([1])  # Output: False"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return a list with elements incremented by 1.\n    \n    :param l: List of integers to be incremented.\n    :return: A new list with each element in l incremented by 1.\n    \n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    # Using list comprehension for concise and efficient implementation\n    return [x + 1 for x in l]\n\n# Example usage:\n# result = incr_list([1, 2, 3])\n# print(result)  # Output: [2, 3, 4]"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"\n    Given the length of a base (side) and height, return the area for a triangle.\n    \n    :param a: The length of the base (side) of the triangle.\n    :param h: The height of the triangle.\n    :return: The area of the triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n\n    # Formula for the area of a triangle is (1/2) * base * height\n    area = 0.5 * a * h\n    \n    return area\n\n# Example usage for testing:\n# print(triangle_area(5, 3))  # Output: 7.5"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change the numerical base of input number x to base.\n    \n    :param x: The integer number to be converted.\n    :param base: The new base in which the integer should be converted. Base numbers must be less than 10.\n    :return: A string representation of the number in the new base.\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    \n    result = []\n    current = x\n    \n    # While current number is greater than zero\n    while current > 0:\n        remainder = current % base  # Calculate remainder\n        result.append(str(remainder))  # Append remainder as string to result\n        current = current // base  # Divide current by base to get next digit\n    \n    # The base conversion produces digits in reverse order\n    return ''.join(result[::-1])  # Reverse the result and join to form the final string\n\n# Example usage:\n# print(change_base(8, 3))  # Output: '22'\n# print(change_base(8, 2))  # Output: '1000'\n# print(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Outputs the number of collisions between two sets of cars moving in opposite directions.\n    \n    Each car in the first set is driving from left to right, while each car in the second set\n    is driving from right to left. All cars travel at the same speed and start very far from\n    each other. When a car from the left-to-right set collides with a car from the right-to-left\n    set, it is counted as a collision, but the cars continue moving in their respective directions.\n\n    :param n: The number of cars in each set\n    :return: The number of collisions\n    \"\"\"\n    # Each car from the first set will collide with every car from the second set,\n    # because all cars move at the same speed and collide directly in their paths.\n    # Therefore, the number of collisions is the product of the number of cars in both sets.\n    \n    return n * n  # Number of left-to-right cars * Number of right-to-left cars\n\n# Example usage:\n# collisions = car_race_collision(5)\n# print(collisions)  # Output: 25"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if a given string is a palindrome. A palindrome is a string that reads the same forwards and backwards.\n    \n    :param text: The string to check.\n    :return: True if the string is a palindrome, False otherwise.\n\n    Examples:\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Normalize the string to consider only alphanumeric characters and ignore cases.\n    norm_text = ''.join(c.lower() for c in text if c.isalnum())\n\n    # Compare the normalized string with its reverse\n    return norm_text == norm_text[::-1]\n\n# Example usage:\n# print(is_palindrome('A man, a plan, a canal: Panama'))  # Output: True\n# print(is_palindrome('racecar'))  # Output: True\n# print(is_palindrome('hello'))  # Output: False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p.\n    \n    :param n: The exponent to which 2 is raised.\n    :param p: The modulus value.\n    :return: The result of (2^n) % p.\n    \n    Example usage:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    # We use the built-in pow function with three arguments to compute (2^n) % p efficiently.\n    # This function uses modular exponentiation for efficiency, especially useful for large n.\n    return pow(2, n, p)\n\n# Example test cases\nassert modp(3, 5) == 3\nassert modp(1101, 101) == 2\nassert modp(0, 101) == 1\nassert modp(3, 11) == 8\nassert modp(100, 101) == 1"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str) -> str:\n    \"\"\"\n    Given an encoded string by the encode_cyclic function, decodes it back to the original string.\n    \n    :param s: The encoded string.\n    :return: The original decoded string.\n    \"\"\"\n    # Split the string into groups of up to 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # For each group of 3 characters, move the last character to the front\n    decoded_groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    # Combine the decoded groups back into a single string\n    return \"\".join(decoded_groups)\n\n\ndef encode_cyclic(s: str) -> str:\n    \"\"\"\n    Encodes a string by cycling groups of three characters.\n    \n    :param s: The string to be encoded.\n    :return: The encoded string.\n    \"\"\"\n    # Split the string into groups of up to 3 characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # Cycle elements in each group if the group has exactly 3 characters\n    encoded_groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    \n    # Combine the encoded groups back into a single string\n    return \"\".join(encoded_groups)"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Checks if all numbers in the list l are below the threshold t.\n\n    :param l: List of numbers to be checked.\n    :param t: Threshold value.\n    :return: True if all numbers in the list are below the threshold, False otherwise.\n    \n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    # Iterate through every number in the list `l`\n    for number in l:\n        # Check if the current number is greater than or equal to the threshold `t`\n        if number >= t:\n            # If any number is not below the threshold, return False immediately\n            return False\n    # If loop completed, it means all numbers are below the threshold\n    return True\n\n# Example usage:\n# all_below_100 = below_threshold([1, 2, 4, 10], 100)\n# print(all_below_100)  # Output: True\n# all_below_5 = below_threshold([1, 20, 4, 10], 5)\n# print(all_below_5)    # Output: False"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns the string without vowels.\n    \n    :param text: The string from which to remove vowels.\n    :return: The string with vowels removed.\n    \n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    # Define a set of vowels for quick lookup\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Use a list comprehension to filter out characters that are vowels\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/47", "completion": "def median(l: list) -> float:\n    \"\"\"\n    Return median of elements in the list l.\n    \n    The median is the middle number when the list is sorted.\n    If the list has an even number of elements, the median is the average of the two middle numbers.\n    \n    :param l: List of numbers.\n    :return: The median of the list.\n    \n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # First, we need to sort the list\n    l_sorted = sorted(l)\n    \n    # Calculate the length of the list\n    n = len(l_sorted)\n    \n    # If the list length is odd, return the middle element\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    # If the list length is even, return the average of the two middle elements\n    else:\n        mid_index = n // 2\n        return (l_sorted[mid_index - 1] + l_sorted[mid_index]) / 2\n\n# Example usage:\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number using an iterative approach.\n    \n    :param n: The position in the Fibonacci sequence (1-indexed).\n    :return: The n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    \n    >>> fib(1)\n    1\n    \n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n\n    a, b = 1, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b  # Update a to b and b to a + b\n\n    return b\n\n# Example usage:\n# number = fib(10)\n# print(number)  # Output: 55"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Encodes the provided string by shifting every character by 5 positions forward in the alphabet.\n    \n    :param s: The string to be encoded.\n    :return: The encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Decodes the given string that was encoded with the encode_shift function by shifting every character\n    5 positions backward in the alphabet.\n    \n    :param s: The string to be decoded.\n    :return: The decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\n\n# Example usage:\nencoded_string = encode_shift(\"hello\")\nprint(f\"Encoded: {encoded_string}\")  # Encoded: mjqqt\n\ndecoded_string = decode_shift(encoded_string)\nprint(f\"Decoded: {decoded_string}\")  # Decoded: hello"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Determines if every opening bracket '<' has a corresponding closing bracket '>'.\n    \n    :param brackets: A string of '<' and '>'.\n    :return: True if the brackets are properly balanced, otherwise False.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            counter -= 1\n        # If counter goes negative, we have more closing brackets\n        if counter < 0:\n            return False\n    # After processing all brackets, counter should be zero\n    return counter == 0\n\n# Example usage:\n# print(correct_bracketing(\"<\"))       # Output: False\n# print(correct_bracketing(\"<>\"))      # Output: True\n# print(correct_bracketing(\"<<><>>\"))  # Output: True\n# print(correct_bracketing(\"><<>\"))    # Output: False"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    :param l: List of integers.\n    :return: True if three distinct elements in the list sum to zero, False otherwise.\n    \n    Examples:\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    n = len(l)\n    # Sort the list to allow two-pointer traversal\n    l.sort()\n    \n    # Iterate through the list, fixing one element, and use two pointers to find the other two elements\n    for i in range(n - 2):\n        # Avoid duplicates for the fixed element\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n            \n        # Two pointers: one starting right after i, the other one at the end of the list\n        left, right = i + 1, n - 1\n        \n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1  # Move left pointer to the right to increase the sum\n            else:\n                right -= 1  # Move right pointer to the left to decrease the sum\n    \n    return False  # No triplet found\n\n# Example usage:\n# print(triples_sum_to_zero([1, 3, -2, 1]))  # Output: True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"\n    Return sorted unique common elements for two lists.\n    \n    :param l1: The first list of elements.\n    :param l2: The second list of elements.\n    :return: A sorted list of unique common elements from l1 and l2.\n    \n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    \n    # Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find intersection of set1 and set2 which gives unique common elements\n    common_elements = set1.intersection(set2)\n    \n    # Convert the set of common elements to a sorted list before returning\n    return sorted(common_elements)\n\n# Example usage (uncomment to test):\n# print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\n# print(common([5, 3, 2, 8], [3, 2]))                                 # Output: [2, 3]"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    \"\"\"\n    Computes the n-th element of the fib4 number sequence efficiently without using recursion.\n\n    The Fib4 number sequence is similar to the Fibonacci sequence and is defined as follows:\n    - fib4(0) -> 0\n    - fib4(1) -> 0\n    - fib4(2) -> 2\n    - fib4(3) -> 0\n    - fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) for n >= 4\n    \n    :param n: The index of the sequence to compute.\n    :return: The n-th element of the fib4 number sequence.\n    \n    Examples:\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initializes the first four values of the Fib4 sequence\n    fib4_cache = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively up to fib4(n)\n    for i in range(4, n + 1):\n        next_val = fib4_cache[-1] + fib4_cache[-2] + fib4_cache[-3] + fib4_cache[-4]\n        fib4_cache.append(next_val)\n    \n    return fib4_cache[n]\n\n# Example usage:\n# result_5 = fib4(5)\n# print(result_5)  # Output: 4\n# result_6 = fib4(6)\n# print(result_6)  # Output: 8\n# result_7 = fib4(7)\n# print(result_7)  # Output: 14"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that calculates the sum of all numbers from 1 to n.\n    \n    :param n: An integer, the upper limit of the range to sum.\n    :return: The sum of all integers from 1 to n.\n    \n    This function efficiently calculates the sum using the arithmetic series sum formula:\n    sum = n * (n + 1) // 2\n    \n    Examples:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    # Using the arithmetic series sum formula to compute the sum directly.\n    return n * (n + 1) // 2\n\n# Example usage for verification:\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100)) # Output: 5050\nprint(sum_to_n(5))   # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))   # Output: 1"}
{"task_id": "HumanEval/53", "completion": "def merge_sorted_arrays(arr1: list, arr2: list) -> list:\n    \"\"\"\n    Merges two sorted lists into a single sorted list.\n    \n    :param arr1: The first sorted list.\n    :param arr2: The second sorted list.\n    :return: A merged sorted list containing all elements from arr1 and arr2.\n    \n    Example:\n    >>> merge_sorted_arrays([1, 3, 5], [2, 4, 6])\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    # Initialize pointers for arr1 and arr2\n    i, j = 0, 0\n    # Initialize the merged result list\n    merged = []\n\n    # Traverse both arrays until we reach the end of one\n    while i < len(arr1) and j < len(arr2):\n        # Compare elements and add the smaller one to the merged list\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    # If there are remaining elements in arr1, add them to the merged list\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n\n    # If there are remaining elements in arr2, add them to the merged list\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n\n    return merged\n\n# Example usage:\n# merged_list = merge_sorted_arrays([1, 3, 5], [2, 4, 6])\n# print(merged_list)  # Output: [1, 2, 3, 4, 5, 6]"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n\n    A list is considered monotonically increasing if for all indices i, j where i < j,\n    l[i] <= l[j]. Similarly, a list is considered monotonically decreasing if for all\n    indices i, j where i < j, l[i] >= l[j]. \n\n    :param l: List of integers to check for monotonicity.\n    :return: True if the list is monotonically increasing or decreasing, False otherwise.\n\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        # Empty list is considered monotonic.\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, l.length()):\n        if l[i] > l[i - 1]:\n            decreasing = False  # If current element is greater, it can't be decreasing.\n        elif l[i] < l[i - 1]:\n            increasing = False  # If current element is smaller, it can't be increasing.\n\n    return increasing or decreasing\n\n# Example test cases\nprint(monotonic([1, 2, 4, 20]))  # Output: True\nprint(monotonic([1, 20, 4, 10]))  # Output: False\nprint(monotonic([4, 1, 0, -10]))  # Output: True"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Checks if a string of parentheses is correctly balanced.\n    \n    :param brackets: A string consisting of \"(\" and \")\".\n    :return: True if every opening bracket has a corresponding closing bracket, False otherwise.\n    \n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # Initialize a counter to track the balance of parentheses\n    balance = 0\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1  # Increment for an opening bracket\n        elif bracket == \")\":\n            balance -= 1  # Decrement for a closing bracket\n            \n        # If balance goes negative, it means there's a closing bracket without a matching opening bracket\n        if balance < 0:\n            return False\n    \n    # Return True if all opening brackets have matching closing brackets\n    return balance == 0\n\n# Example usage and testing\nif __name__ == \"__main__\":\n    assert correct_bracketing(\"(\") == False\n    assert correct_bracketing(\"()\") == True\n    assert correct_bracketing(\"(()())\") == True\n    assert correct_bracketing(\")(()\") == False\n\n    print(\"All tests passed!\")"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    :param s0: The first string.\n    :param s1: The second string.\n    :return: True if both strings are composed of the same characters, False otherwise.\n\n    The strings are considered to have the same characters if for each unique character \n    in the combined set of characters from both strings, the count of that character in\n    both strings is more than zero.\n\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Create sets of the characters from each string to identify unique characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Check if the sets of unique characters are the same\n    return set_s0 == set_s1\n\n# Example usage\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # Output: True\nprint(same_chars('abcd', 'dddddddabc'))              # Output: True\nprint(same_chars('dddddddabc', 'abcd'))              # Output: True\nprint(same_chars('eabcd', 'dddddddabc'))             # Output: False\nprint(same_chars('abcd', 'dddddddabce'))             # Output: False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # Output: False"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    :param n: The integer to find the largest prime factor of.\n    :return: The largest prime factor of n.\n    \n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    # Helper function to check if a number is prime\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Start with the smallest prime factor\n    factor = 2\n\n    # Divide the number by the smallest prime factor until it's no longer divisible\n    while n % factor == 0:\n        n //= factor\n\n    # Iterate through odd numbers starting from 3 to find factors\n    factor = 3\n    last_factor = factor\n\n    while factor * factor <= n:\n        while n % factor == 0:\n            last_factor = factor\n            n //= factor\n        factor += 2\n\n    # If n becomes a prime number greater than 2 in the end, it is the largest prime factor\n    if n > 2:\n        return n\n    else:\n        return last_factor\n\n# Example usage for testing:\nif __name__ == \"__main__\":\n    print(largest_prime_factor(13195))  # Output: 29\n    print(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    \"\"\" \n    Computes the derivative of a given polynomial.\n    \n    The polynomial is represented by the coefficients in the list `xs`, where \n    xs[i] is the coefficient for the term x^i.\n    \n    :param xs: List of coefficients of the polynomial.\n                E.g., [3, 1, 2, 4, 5] represents the polynomial 3 + x + 2x^2 + 4x^3 + 5x^4.\n    :return: List of coefficients of the derivative of the polynomial.\n             E.g., The derivative of 3 + x + 2x^2 + 4x^3 + 5x^4 is 1 + 4x + 12x^2 + 20x^3\n             which will be returned as [1, 4, 12, 20].\n    \"\"\"\n    # Initialize an empty list to store coefficients of the derivative\n    derivative_coeffs = []\n    \n    # Iterate through the polynomial coefficients starting from the first derivative term\n    for i in range(1, len(xs)):\n        # Each derivative term's coefficient is the original coefficient times its power/exponent\n        derivative_coeffs.append(i * xs[i])\n    \n    return derivative_coeffs\n\n# Example usage:\n# print(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\n# print(derivative([1, 2, 3]))        # Output: [2, 6]\n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"\n    Computes the n-th element of the FibFib number sequence.\n    \n    The FibFib number sequence is defined as follows:\n    fibfib(0) = 0\n    fibfib(1) = 0\n    fibfib(2) = 1\n    fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n > 2.\n    \n    :param n: The position in the FibFib sequence to compute (non-negative integer).\n    :return: The n-th element of the FibFib sequence.\n    \n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    # Handling the base cases directly\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Using a list to store intermediate results, starting with the first three known values\n    fibfib_seq = [0, 0, 1]\n\n    # Compute the sequence iteratively up to the nth element\n    for i in range(3, n + 1):\n        next_value = fibfib_seq[-1] + fibfib_seq[-2] + fibfib_seq[-3]\n        fibfib_seq.append(next_value)\n    \n    return fibfib_seq[n]\n\n# Example usage and testing:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    # Custom tests\n    print(fibfib(0))  # Output: 0\n    print(fibfib(1))  # Output: 0\n    print(fibfib(2))  # Output: 1\n    print(fibfib(3))  # Output: 1\n    print(fibfib(10)) # Output: 169"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    :param s: The input string representing a word.\n    :return: The number of vowels in the input string.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Define the set of standard vowels (lowercase and uppercase for case insensitivity)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    \n    # Check if the last character is 'y' or 'Y'\n    if len(s) > 0 and (s[-1] == 'y' or s[-1] == 'Y'):\n        # Include it in the set of vowels for counting\n        vowels.add('y')\n        vowels.add('Y')\n    \n    # Count occurrences of vowel characters in the input string\n    count = sum(1 for char in s if char in vowels)\n    \n    return count\n\n# Example usage:\n# print(vowels_count(\"abcde\"))  # Outputs: 2\n# print(vowels_count(\"ACEDY\"))  # Outputs: 3"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shifting the digits right by shift\n    and returning the result as a string.\n    If shift is greater than the number of digits, return the digits reversed.\n\n    :param x: The integer whose digits are to be shifted.\n    :param shift: The number of positions to shift the digits to the right.\n    :return: The resulting string after the circular shift.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    \"\"\"\n    digits_str = str(x)\n    num_digits = len(digits_str)\n    \n    # Edge case: if shift is more than the number of digits, return the digits reversed\n    if shift >= num_digits:\n        return digits_str[::-1]\n    \n    # Calculate the effective shift\n    effective_shift = shift % num_digits\n    \n    # Perform the circular shift\n    shifted_str = digits_str[-effective_shift:] + digits_str[:-effective_shift]\n    \n    return shifted_str\n\n# Example usage:\n# result = circular_shift(12345, 2)\n# print(result)  # Output: \"45123\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the sum of the upper characters' ASCII codes.\n\n    :param s: The input string.\n    :return: The sum of the ASCII values of all uppercase characters in the string.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131 (65 ('A') + 66 ('B'))\n        digitSum(\"abcCd\") => 67 (67 ('C'))\n        digitSum(\"helloE\") => 69 (69 ('E'))\n        digitSum(\"woArBld\") => 131 (65 ('A') + 66 ('B'))\n        digitSum(\"aAaaaXa\") => 153 (65 ('A') + 88 ('X'))\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is an uppercase character\n        if 'A' <= char <= 'Z':\n            # Add the ASCII value of the character to the total sum\n            total_sum += ord(char)\n    \n    return total_sum\n\n# Examples\nprint(digitSum(\"\"))  # Output: 0\nprint(digitSum(\"abAB\"))  # Output: 131\nprint(digitSum(\"abcCd\"))  # Output: 67\nprint(digitSum(\"helloE\"))  # Output: 69\nprint(digitSum(\"woArBld\"))  # Output: 131\nprint(digitSum(\"aAaaaXa\"))  # Output: 153"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    :param arr: List of integers to be modified\n    :return: Minimum number of changes to make arr palindromic\n    \"\"\"\n    # Initialize two pointers: one at the beginning and the other at the end of the list\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize a counter for the number of changes\n    changes = 0\n    \n    # Iterate while the left pointer is less than the right pointer\n    while left < right:\n        if arr[left] != arr[right]:\n            # If elements at the current pointers do not match, increment the change counter\n            changes += 1\n        # Move the left pointer forward and the right pointer backward\n        left += 1\n        right -= 1\n        \n    return changes\n\n# Examples of usage:\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Output: 0"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication \n    of 3 prime numbers and false otherwise.\n    Knowing that (a) is less than 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \n    :param a: The integer to test.\n    :return: True if `a` is the product of three prime numbers, False otherwise.\n    \"\"\"\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):  # Check divisibility from 2 to sqrt(n)\n            if n % i == 0:\n                return False\n        return True\n    \n    # Generate all primes less than 100.\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    # Check if `a` can be formed by the product of exactly three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):  # Ensure we don't repeat combinations\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage:\nprint(is_multiply_prime(30))  # Output: True\nprint(is_multiply_prime(60))  # Output: False\nprint(is_multiply_prime(105)) # Output: False"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Accepts two lists of strings and returns the list that has the total number of \n    chars in all strings of the list less than the other list. If the two lists have \n    the same number of chars, returns the first list.\n\n    :param lst1: First list of strings.\n    :param lst2: Second list of strings.\n    :return: The list with fewer total characters. If equal, returns the first list.\n    '''\n    # Calculate the total number of characters in all strings of lst1\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    \n    # Calculate the total number of characters in all strings of lst2\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n\n# Example usage:\n# print(total_match([], []))  # Output: []\n# print(total_match(['hi', 'admin'], ['hI', 'Hi'])) # Output: ['hI', 'Hi']\n# print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])) # Output: ['hi', 'admin']\n# print(total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])) # Output: ['hI', 'hi', 'hi']\n# print(total_match(['4'], ['1', '2', '3', '4', '5'])) # Output: ['4']"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise, return -1.\n    \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n    :param a: length of the first side\n    :param b: length of the second side\n    :param c: length of the third side\n    :return: the area of the triangle rounded to 2 decimal points if valid, otherwise -1\n    \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check for the triangle inequality theorem\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Using Heron's formula to calculate the area of the triangle\n    # s is the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n\n    # Area calculation using the square root function and Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Return the area rounded to 2 decimal places\n    return round(area, 2)\n\n# Example usage:\n# print(triangle_area(3, 4, 5))  # Output: 6.00\n# print(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found, return the node that has the smallest index.\n\n    The plucked node should be returned in a list, [smallest_value, its index].\n    If there are no even values or the given array is empty, return [].\n\n    :param arr: List of non-negative integers representing the branch of a tree.\n    :return: A list with the smallest even value and its index, or an empty list if no even values are present.\n    \"\"\"\n    # Initialize variables to store the smallest even value and its index\n    smallest_even_value = None\n    smallest_index = None\n\n    # Traverse the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even_value is None or value < smallest_even_value:  # Update if it's a smaller even value\n                smallest_even_value = value\n                smallest_index = index\n\n    # If no even value was found, return an empty list\n    if smallest_even_value is None:\n        return []\n\n    # Return the smallest even value and its index\n    return [smallest_even_value, smallest_index]\n\n# Example usage:\n# print(pluck([4, 2, 3]))  # Output: [2, 1]\n# print(pluck([1, 2, 3]))  # Output: [2, 1]\n# print(pluck([]))        # Output: []\n# print(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    \n    :param lst: List of integers to be sorted in strange order.\n    :return: A new list sorted in the strange order described.\n    \n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Corner case: if the input list is empty, return an empty list immediately\n    if not lst:\n        return []\n\n    # Create a sorted copy of the input list\n    sorted_lst = sorted(lst)\n    \n    # Initialize two pointers, one at the beginning and one at the end of the sorted list\n    left, right = 0, len(sorted_lst) - 1\n    \n    # Initialize result list\n    result = []\n    \n    # Toggle between adding minimum and maximum values\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle  # Flip the toggle\n    \n    return result\n\n# Example Usage:\n# Example usage:\n# print(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\n# print(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\n# print(strange_sort_list([]))  # Output: []"}
{"task_id": "HumanEval/69", "completion": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    \n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Use a dictionary to count the frequency of each number in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a variable to store the result\n    result = -1\n\n    # Iterate over the frequency dictionary\n    for num, count in freq.items():\n        # Check if the count is greater than or equal to the number itself\n        if count >= num and num > result:\n            result = num\n\n    return result\n\n# Example usage:\n# print(search([4, 1, 2, 2, 3, 1]))  # Output: 2\n# print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\n# print(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    \n    # Check if the list 'q' is a palindrome by comparing it to its reversed version.\n    is_balanced = (q == q[::-1])\n    \n    # Calculate the sum of the list 'q'.\n    total_weight = sum(q)\n    \n    # Return True if the list is both balanced (palindromic) and the sum is less than or equal to 'w'.\n    return is_balanced and (total_weight <= w)\n\n# Example usage:\n# print(will_it_fly([1, 2], 5))   # Output: False\n# print(will_it_fly([3, 2, 3], 1)) # Output: False\n# print(will_it_fly([3, 2, 3], 9)) # Output: True\n# print(will_it_fly([3], 5))       # Output: True"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \n    :param decimal: An integer number in decimal form.\n    :return: A string representing the binary form of the number with 'db' at the beginning and end.\n    \"\"\"\n    # Convert the decimal number to its binary representation using bin function\n    # bin(decimal) return a string starting with '0b', so we slice to remove '0b'\n    binary_str = bin(decimal)[2:]\n    \n    # Add 'db' at the start and at the end of the binary string\n    return f\"db{binary_str}db\"\n\n# Example usage:\n# result = decimal_to_binary(15)\n# print(result)  # Output: \"db1111db\""}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    Calculates the number of mangoes in a basket of fruit given a string that specifies \n    the number of apples and oranges and an integer that represents the total number of fruits.\n\n    :param s: A string that describes the number of apples and oranges in the basket.\n              For example, \"5 apples and 6 oranges\".\n    :param n: An integer that represents the total number of fruits in the basket.\n    :return: An integer that represents the number of mangoes in the basket.\n\n    Examples:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 8\n    fruit_distribution(\"0 apples and 1 oranges\", 3) -> 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 95\n    fruit_distribution(\"100 apples and 1 oranges\", 120) -> 19\n    \"\"\"\n    # Split the string into words to extract the number of apples and oranges\n    words = s.split()\n    \n    # Extract the numbers by their respective positions in the string \"X apples and Y oranges\"\n    num_apples = int(words[0])  # The first item is the number of apples\n    num_oranges = int(words[3])  # The fourth item is the number of oranges\n    \n    # Calculate the number of mangoes\n    num_mangoes = n - num_apples - num_oranges\n    \n    return num_mangoes"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    \"\"\"\n    Checks if a number x is a simple power of n.\n    \n    A number x is considered a simple power of n if there exists an integer k\n    such that n**k == x. \n    \n    :param x: The number to check.\n    :param n: The base number.\n    :return: True if x is a simple power of n, False otherwise.\n    \"\"\"\n    # Edge case: n cannot be 0 or 1 for meaningful simple power computation\n    if n <= 1:\n        return x == n # only true when x == n, e.g., is_simple_power(1, 1) or is_simple_power(0, 0)\n\n    # If x is 1, then it is a power of any number, since n**0 = 1 for any n\n    if x == 1:\n        return True\n\n    power = 1  # Start with the lowest power\n    current_value = n  # initially, n**1\n\n    # Loop until current_value surpasses x\n    while current_value <= x:\n        # Check if current value equals x\n        if current_value == x:\n            return True\n        power += 1\n        current_value = n ** power  # compute the next power of n\n\n    # If we exit the loop, it means we have surpassed x without finding a match\n    return False\n\n# Example usage:\n# print(is_simple_power(1, 4))  # Output: True\n# print(is_simple_power(2, 2))  # Output: True\n# print(is_simple_power(8, 2))  # Output: True\n# print(is_simple_power(3, 2))  # Output: False\n# print(is_simple_power(3, 1))  # Output: False\n# print(is_simple_power(5, 3))  # Output: False"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    This function calculates the sum of the digits of the integer N and then\n    converts that sum to its binary representation as a string.\n\n    Example:\n        For N = 1000, the sum of digits will be 1, so the output should be \"1\".\n        For N = 150, the sum of digits will be 6, so the output should be \"110\".\n        For N = 147, the sum of digits will be 12, so the output should be \"1100\".\n    \n    Parameters:\n        N (int): The input integer. Constraints: 0 \u2264 N \u2264 10000.\n\n    Returns:\n        str: The binary representation of the sum of the digits of N.\n    \"\"\"\n    # Convert the integer N to a string to access each digit\n    digits = str(N)\n    \n    # Initialize the sum of the digits\n    digit_sum = 0\n    \n    # Iterate over each character in the string\n    for digit in digits:\n        # Convert the character to an integer and add it to the sum\n        digit_sum += int(digit)\n    \n    # Convert the sum of the digits to a binary string and return it\n    return bin(digit_sum)[2:]\n\n# Example usage:\n# print(solve(1000))  # Output: \"1\"\n# print(solve(150))   # Output: \"110\"\n# print(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise.\n\n    :param string: The input string whose length will be checked.\n    :return: True if the length of the string is a prime number, False otherwise.\n\n    Examples:\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True  # 2 is the only even prime number\n        if n % 2 == 0:\n            return False  # Exclude other even numbers\n        # Check divisors from 3 to sqrt(n) in steps of 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    length = len(string)  # Get the length of the string\n    return is_prime(length)  # Check if the length is a prime number\n\n# Example usage:\n# prime_length('Hello') should return True because the length is 5, which is prime\n# prime_length('orange') should return False because the length is 6, which is not prime\n\nprint(prime_length('Hello'))     # Output: True\nprint(prime_length('abcdcba'))   # Output: True\nprint(prime_length('kittens'))   # Output: True\nprint(prime_length('orange'))    # Output: False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"\n    Counts the number of prime hexadecimal digits in the input string.\n    \n    A hexadecimal digit is considered prime if it corresponds to the \n    decimal primes: 2, 3, 5, 7, B (= decimal 11), D (= decimal 13).\n    \n    :param num: A string representing a hexadecimal number\n    :return: The count of prime hexadecimal digits in the input string\n    \"\"\"\n    # Set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a count for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime hexadecimal digit\n        if char in prime_hex_digits:\n            # Increment the count if it is prime\n            prime_count += 1\n    \n    # Return the total count of prime hexadecimal digits\n    return prime_count\n\n# Example usage:\n# print(hex_key(\"AB\"))  # Output: 1\n# print(hex_key(\"1077E\"))  # Output: 2\n# print(hex_key(\"ABED1A33\"))  # Output: 4\n# print(hex_key(\"123456789ABCDEF0\"))  # Output: 6\n# print(hex_key(\"2020\"))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ASCII value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \n    :param s: The input string containing words and spaces.\n    :return: A new string where each word's characters are sorted in ascending order.\n    \"\"\"\n    \n    # Split the input string by spaces to handle each word separately.\n    words = s.split(' ')\n    \n    # Sort each word and join them back together with spaces.\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words with spaces to form the final string.\n    result = ' '.join(sorted_words)\n    \n    return result\n\n# Example usage:\n# anti_shuffled_string = anti_shuffle(\"Hello World!!!\")\n# print(anti_shuffled_string)  # Output: \"Hello !!!Wdlor\""}
{"task_id": "HumanEval/89", "completion": "def encrypt(s: str) -> str:\n    \"\"\"\n    Encrypts the given string by shifting each letter two places forward \n    in the alphabet. The shift wraps around such that 'z' becomes 'd'.\n    \n    :param s: The input string to be encrypted.\n    :return: The encrypted string with each character shifted.\n    \"\"\"\n    encrypted_string = []\n\n    for char in s:\n        # Calculate the new character by shifting 2 places forward\n        new_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        encrypted_string.append(new_char)\n\n    return ''.join(encrypted_string)\n\n# Example usage:\n# encrypted_string = encrypt(\"hi\")\n# print(encrypted_string)  # Output: \"lm\"\n\n# encrypted_string = encrypt(\"asdfghjkl\")\n# print(encrypted_string)  # Output: \"ewhjklnop\"\n\n# encrypted_string = encrypt(\"gf\")\n# print(encrypted_string)  # Output: \"kj\"\n\n# encrypted_string = encrypt(\"et\")\n# print(encrypted_string)  # Output: \"ix\""}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \n    :param s: string to check for happiness.\n    :return: True if the string is happy, False otherwise.\n    \n    For example:\n    is_happy('a') => False\n    is_happy('aa') => False\n    is_happy('abcd') => True\n    is_happy('aabb') => False\n    is_happy('adb') => True\n    is_happy('xyy') => False\n    \"\"\"\n    # If the string length is less than 3, it cannot be happy.\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check every 3 consecutive letters.\n    for i in range(len(s) - 2):\n        # Check if the three consecutive characters are distinct.\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    \n    # If no 3 consecutive characters are the same, the string is happy.\n    return True\n\n# Example usage:\n# print(is_happy('a'))        # Output: False\n# print(is_happy('aa'))       # Output: False\n# print(is_happy('abcd'))     # Output: True\n# print(is_happy('aabb'))     # Output: False\n# print(is_happy('adb'))      # Output: True\n# print(is_happy('xyy'))      # Output: False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\n    :param grades: List of numerical GPA values.\n    :return: List of corresponding letter grades based on the given table.\n    \"\"\"\n    letter_grades = []\n    # Define the grading scale\n    grading_scale = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (0.0, 'E'),  # this extra item is used to cover the exact 0 case.\n    ]\n    \n    for grade in grades:\n        for threshold, letter in grading_scale:\n            if grade >= threshold:\n                letter_grades.append(letter)\n                break  # move to the next grade once the corresponding letter is found\n    \n    return letter_grades\n\n# Example usage:\n# print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \n    :param array: List of non-negative integers to sort.\n    :return: Sorted list according to the specified conditions.\n    \"\"\"\n    # Check if the array is empty or has only one element\n    if len(array) == 0 or len(array) == 1:\n        return list(array)\n\n    # Calculate first and last element sum\n    first_last_sum = array[0] + array[-1]\n\n    # Check if sum is odd or even and sort accordingly\n    if first_last_sum % 2 == 1:  # Odd\n        sorted_array = sorted(array)\n    else:  # Even\n        sorted_array = sorted(array, reverse=True)\n\n    return sorted_array\n\n# Example usage:\n# print(sort_array([2, 4, 3, 0, 1, 5]))  # Output: [0, 1, 2, 3, 4, 5]\n# print(sort_array([2, 4, 3, 0, 1, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list of integers.\n    \n    If there is no 2nd smallest element (e.g., the list is too short or \n    all elements are the same), the function returns None.\n    \n    :param lst: List of integers.\n    :return: The 2nd smallest integer in the list, or None if it does not exist.\n    \n    Examples:\n    next_smallest([1, 2, 3, 4, 5]) -> 2\n    next_smallest([5, 1, 4, 3, 2]) -> 2\n    next_smallest([]) -> None\n    next_smallest([1, 1]) -> None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n\n    # Use a set to remove duplicates and then convert back to a sorted list\n    unique_elements = sorted(set(lst))\n\n    # Check if there are at least two unique elements\n    if len(unique_elements) < 2:\n        return None\n\n    return unique_elements[1]\n\n# Example usage:\n# print(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\n# print(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\n# print(next_smallest([]))  # Output: None\n# print(next_smallest([1, 1]))  # Output: None"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    \"\"\"\n    Finds all occurrences of the integer x in a 2-dimensional list, and returns their coordinates.\n    The coordinates are sorted by row in ascending order and by column in descending order within each row.\n\n    :param lst: List of lists representing the 2D data.\n    :param x: The integer to be found in the list.\n    :return: A list of tuples where each tuple is a coordinate (row, column) of the integer x in the list.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n\n    # Iterate through the rows of the list\n    for row_idx, row in enumerate(lst):\n        # Iterate through the columns of the row\n        for col_idx, val in enumerate(row):\n            if val == x:\n                # Append the coordinate (row, column) where the value x is found\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort the coordinates by row in ascending order and by column in descending order within each row\n    sorted_coordinates = sorted(\n        coordinates,\n        key=lambda coord: (coord[0], -coord[1])\n    )\n    \n    return sorted_coordinates\n\n# Example usage:\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))\n# Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))\n# Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))\n# Output: [(2, 2)]"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    :param x: The first number.\n    :param y: The second number.\n    :param z: The third number.\n    :return: True if one of the numbers is equal to the sum of the other two and all numbers are integers, otherwise False.\n    \n    Examples:\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if one number is equal to the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)\n\n# Example usage:\n# print(any_int(5, 2, 7))  # Output: True\n# print(any_int(3, 2, 2))  # Output: False\n# print(any_int(3, -2, 1))  # Output: True\n# print(any_int(3.6, -2.2, 2))  # Output: False"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    This function iterates through the list, checking for even elements that are \n    located at odd indices, and sums these elements.\n\n    :param lst: List of integers to be processed.\n    :return: Sum of even elements at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n        add([1, 3, 5, 7, 2]) ==> 0\n        add([4, 2]) ==> 2\n        add([1, 2, 4, 3, 6]) ==> 2\n    \"\"\"\n    \n    # Initialize the sum to zero\n    total = 0\n\n    # Iterate through the list using index and value\n    for idx in range(1, len(lst), 2):  # Start from index 1 and increment by 2 for odd indices\n        if lst[idx] % 2 == 0:  # Check if the element at the current odd index is even\n            total += lst[idx]  # Add to the running total\n\n    return total\n\n# Example usage:\n# print(add([4, 2, 6, 7]))  # Output: 2\n\n<your answer>"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    \"\"\"\n    Counts the number of boredoms in a string. A boredom is defined as a sentence\n    that starts with the word \"I\". Sentences are delimited by '.', '?' or '!'.\n   \n    :param S: The string containing words and sentences.\n    :return: The number of sentences starting with \"I\".\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    \n    # Split the input string by sentence delimiters\n    sentences = re.split(r'[.?!]', S)\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate over each split sentence\n    for sentence in sentences:\n        # Strip leading and trailing spaces from each sentence\n        stripped_sentence = sentence.strip()\n        \n        # Check if the sentence starts with \"I\" (case-sensitive)\n        if stripped_sentence.startswith('I'):\n            boredom_count += 1\n    \n    return boredom_count\n\n# Example usage:\n# print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1\n# print(is_bored(\"I am happy! Are you? I wonder.\"))  # Output: 2"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n    :param n: Number of digits (positive integer).\n    :return: Total count of n-digit numbers starting or ending with 1.\n    \"\"\"\n    # Handle edge case where n is 1 directly\n    if n == 1:\n        # There are 9 one-digit numbers (1-9), 2 of which (1 and 1) start/end with one\n        return 2\n    \n    # Total n-digit numbers is 9 * 10^(n-1) because:\n    #   * the first digit can be from 1 to 9 (9 choices)\n    #   * each of the remaining n-1 digits can be from 0 to 9 (10 choices each)\n    total_n_digit_numbers = 9 * (10 ** (n - 1))\n\n    # n-digit numbers starting with 1:\n    # After the initial \"1\", there are (n-1) digits that can be anything from 0 to 9\n    starting_with_1 = 10 ** (n - 1)\n\n    # n-digit numbers ending with 1:\n    # After the initial digit (1-9), there are (n-2) digits that can be anything from 0 to 9,\n    # and the last digit is 1. (Only valid if there are n > 1 digits in total)\n    ending_with_1 = 8 * (10 ** (n - 2)) if n > 1 else 0\n    \n    # Total unique n-digit numbers starting or ending with 1:\n    total_count = starting_with_1 + ending_with_1\n\n    return total_count\n\n# Example usage:\n# print(starts_one_ends(2))  # Should return 18, as there are 10 2-digit numbers starting with 1 (10 to 19)\n                            # and 8 ending with 1 (21, 31, 41, 51, 61, 71, 81, 91)"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n\n    :param a: The integer to check.\n    :return: True if a is a perfect cube, False otherwise.\n\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a == 0:  # 0 is a perfect cube (0^3)\n        return True\n    \n    # For positive and negative integers, find the cube root\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1/3))\n    return cube_root ** 3 == abs_a  # Verify if cube_root, when cubed, gives back abs_a\n\n# Example usage:\nprint(iscube(1))    # Output: True\nprint(iscube(2))    # Output: False\nprint(iscube(-1))   # Output: True\nprint(iscube(64))   # Output: True\nprint(iscube(0))    # Output: True\nprint(iscube(180))  # Output: False"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dictionary):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case. Return False if the \n    dictionary is empty or if keys are mixed or non-string.\n    \n    :param dictionary: The dictionary to be checked.\n    :return: Boolean value indicating if all keys are either lower case or upper case strings.\n    \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n\n    # If the dictionary is empty, return False\n    if not dictionary:\n        return False\n\n    # Initialize two flags for lower case and upper case\n    all_lower = True\n    all_upper = True\n\n    for key in dictionary.keys():\n        # Check if the key is a string\n        if not isinstance(key, str):\n            return False\n        # Check key's case and update flags\n        if key.islower():\n            all_upper = False\n        elif key.isupper():\n            all_lower = False\n        else:\n            return False  # Mixed case in keys\n\n    # Return True if either all_lower or all_upper is True\n    return all_lower or all_upper\n\n# Example usage:\n# print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # Output: True\n# print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # Output: False\n# print(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # Output: False\n# print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # Output: False\n# print(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # Output: True"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    \"\"\"\n    Splits the given string into words based on commas or spaces as delimiters.\n    \n    :param s: A string containing words separated by commas or spaces.\n    :return: A list of words.\n    \"\"\"\n    # Split the string on commas first\n    parts = s.split(',')\n    \n    # Initialize an empty list to store the final words\n    words = []\n\n    for part in parts:\n        # Split each part further on spaces and extend the words list\n        words.extend(part.split())\n\n    # Return the list of words\n    return words\n\n# Example usage:\n# words_list = words_string(\"Hi, my name is John\")\n# print(words_list)  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n#\n# words_list = words_string(\"One, two, three, four, five, six\")\n# print(words_list)  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps the case of all letters, and replaces all \n    vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the English alphabet. \n    Assume only letters.\n    \n    Vowel replacements:\n    a -> c, e -> g, i -> k, o -> q, u -> w, \n    A -> C, E -> G, I -> K, O -> Q, U -> W\n    \n    Example:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Define a mapping for vowels based on the given transformation rule.\n    vowel_mapping = {\n        'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n        'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'\n    }\n    \n    # Initialize an empty list to accumulate the encoded characters.\n    encoded_message = []\n    \n    # Loop through each character in the input message.\n    for char in message:\n        # Swap the case of the character.\n        swapped_case_char = char.swapcase()\n        # If the swapped case character is a vowel that we need to replace,\n        # replace it according to our vowel mapping.\n        if swapped_case_char in vowel_mapping:\n            encoded_message.append(vowel_mapping[swapped_case_char])\n        else:\n            # Append the character as is if it's not a vowel that needs replacement.\n            encoded_message.append(swapped_case_char)\n    \n    # Join the list of characters into a string and return the encoded message.\n    return ''.join(encoded_message)\n\n# Example usage and test cases\n# Example: 'test' -> 'TGST'\nprint(encode('test'))  # Output: 'TGST'\n# Example: 'This is a message' -> 'tHKS KS C MGSSCGG'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"\n    Takes two integers and returns the product of their unit digits.\n    \n    :param a: First integer.\n    :param b: Second integer.\n    :return: The product of the unit digits of a and b.\n    \n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    \n    # Extract the unit digits (last digit) of both numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Compute and return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Example usage:\n# print(multiply(148, 412))  # Output: 16\n# print(multiply(19, 28))    # Output: 72\n# print(multiply(2020, 1851)) # Output: 0\n# print(multiply(14,-15))    # Output: 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    Uppercase vowels are 'A', 'E', 'I', 'O', 'U'.\n    \n    :param s: The string in which to count uppercase vowels at even indices.\n    :return: The count of uppercase vowels at even indices.\n    \"\"\"\n    # Define a set of uppercase vowels for quick lookup\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    \n    # Iterate over the string and check each character at even indices\n    for i in range(0, len(s), 2):  # Step by 2 to ensure only even indices are considered\n        if s[i] in uppercase_vowels:  # Check if the character is an uppercase vowel\n            count += 1  # Increment the count if it's an uppercase vowel\n            \n    return count\n\n# Example usage:\n# result = count_upper('aBCdEf')\n# print(result)  # Output: 1\n# result = count_upper('abcdefg')\n# print(result)  # Output: 0\n# result = count_upper('dBBE')\n# print(result)  # Output: 0"}
{"task_id": "HumanEval/96", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime or not.\n    \n    :param n: The number to check for primality.\n    :return: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Generate prime numbers less than a given non-negative integer n.\n    \n    :param n: Non-negative integer limit to generate primes less than it.\n    :return: A list of prime numbers less than n.\n    \n    Example usage:\n    >>> count_up_to(5)\n    [2, 3]\n    >>> count_up_to(11)\n    [2, 3, 5, 7]\n    >>> count_up_to(0)\n    []\n    >>> count_up_to(20)\n    [2, 3, 5, 7, 11, 13, 17, 19]\n    >>> count_up_to(1)\n    []\n    >>> count_up_to(18)\n    [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n    # Initialize an empty list to store prime numbers.\n    primes = []\n    \n    # Iterate through each number from 2 up to n (exclusive).\n    for i in range(2, n):\n        # Check if the current number is prime.\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\n# Example usage:\nprint(count_up_to(5))   # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))   # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    \n    Algorithm idea is simple:\n    - Find the longest postfix of the supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n    :param string: The input string to transform into a palindrome.\n    :return: The shortest palindrome that begins with the input string.\n    \n    >>> make_palindrome('')\n    ''\n    \n    >>> make_palindrome('cat')\n    'catac'\n    \n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Edge case: empty string\n    if not string:\n        return \"\"\n    \n    # Finding the longest palindromic suffix\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # When we find the longest palindromic suffix\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    \n    # This line will never be reached due to the structure of the loop and checks.\n    return string\n\n\n# Inline test cases\nassert make_palindrome('') == ''\nassert make_palindrome('cat') == 'catac'\nassert make_palindrome('cata') == 'catac'\nassert make_palindrome('race') == 'racecar'\nassert make_palindrome('madam') == 'madam'\n\n# Example usage: Uncomment the below lines to test\n# print(make_palindrome('cat'))  # Output: 'catac'\n# print(make_palindrome('race'))  # Output: 'racecar'\n# print(make_palindrome('a'))    # Output: 'a'\n# print(make_palindrome('ab'))   # Output: 'aba'\n# print(make_palindrome('abc'))  # Output: 'abcba'"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    :param n: The number of levels and the initial number of stones for the first level.\n    :type n: int\n    :return: A list with the number of stones in each level.\n    :rtype: list\n    \n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n\n    # Initialize the result list\n    result = []\n\n    current_level_stones = n\n    for i in range(n):\n        # Append the current level stones to the result list\n        result.append(current_level_stones)\n        \n        # Update the number of stones for the next level\n        if n % 2 == 0:\n            # If n is even, add the next even number\n            current_level_stones += 2\n        else:\n            # If n is odd, add the next odd number\n            current_level_stones += 2\n\n    return result\n\n# Example usage:\n# print(make_a_pile(3))  # Output: [3, 5, 7]\n# print(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \n    :param x: The lower bound of the range (inclusive).\n    :param y: The upper bound of the range (inclusive).\n    :return: The largest even integer within the range [x, y], or -1 if none exists.\n    \"\"\"\n    # Ensure both x and y are integers\n    if not (isinstance(x, int) and isinstance(y, int)):\n        raise TypeError(\"Both x and y should be integers\")\n    \n    # If x is greater than y, the range is invalid\n    if x > y:\n        return -1\n\n    # Start from the largest possible value in the range, and decrement\n    # down to the smallest possible value in the range.\n    for num in range(y, x - 1, -1):\n        # Check if the current number is even\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1\n\n# Example usage:\n# print(choose_num(12, 15)) # Output: 14\n# print(choose_num(13, 12)) # Output: -1\n# print(choose_num(8, 20))  # Output: 20"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    \"\"\"\n    Computes the average of the integers from n through m (including n and m),\n    rounds the result to the nearest integer, and converts that integer to its binary representation. \n    If n is greater than m, returns -1.\n\n    :param n: The starting integer.\n    :param m: The ending integer.\n    :return: The binary representation of the rounded average as a string prefixed with '0b', or -1 if n > m.\n    \"\"\"\n    if n > m:\n        return -1\n\n    # Calculate the sum of the numbers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of elements from n to m\n    num_elements = m - n + 1\n    \n    # Calculate the average and round it to the nearest integer\n    average = round(total_sum / num_elements)\n    \n    # Convert the rounded average to binary and return it\n    return bin(average)\n\n# Example usages:\n# rounded_avg(1, 5) should return \"0b11\"\n# rounded_avg(7, 5) should return -1\n# rounded_avg(10, 20) should return \"0b1111\"\n# rounded_avg(20, 33) should return \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that don't have any even digit.\n\n    Note: The returned list should be sorted in increasing order.\n    \n    :param x: List of positive integers to be evaluated.\n    :return: A sorted list of integers with no even digits.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"\n        Checks if the given number contains any even digits.\n        \n        :param n: The number to be checked.\n        :return: True if there is an even digit, False otherwise.\n        \"\"\"\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n    \n    # Filter out numbers that contain even digits\n    filtered_list = [num for num in x if not has_even_digit(num)]\n    \n    # Return the filtered list sorted in increasing order\n    return sorted(filtered_list)\n\n# Example usages:\n# print(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\n# print(unique_digits([152, 323, 1422, 10]))  # Output: []\n# print(unique_digits([7, 9, 13, 50]))  # Output: [7, 9]"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    \"\"\"\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n\n    :param lst: List of integers\n    :return: Sum of the digits of the largest prime value in the list\n    \"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while (i * i) <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sum_of_digits(n):\n        \"\"\"Calculate the sum of digits of a number.\"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    # Initialize a variable to keep track of the largest prime number found\n    largest_prime = -1\n\n    for number in lst:\n        if is_prime(number):\n            if number > largest_prime:\n                largest_prime = number\n\n    if largest_prime == -1:\n        return 0\n\n    return sum_of_digits(largest_prime)\n\n# Example usage:\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"\n    Determines if it is possible to obtain a sorted array in non-decreasing order \n    by performing right shift operations on the given array.\n    \n    :param arr: List of integers to be checked.\n    :return: True if the array can be sorted by right shift operations, False otherwise.\n    \"\"\"\n    \n    # An empty array is trivially sorted\n    if not arr:\n        return True\n\n    n = len(arr)\n\n    # Find the index where the array is first out of order\n    break_point = -1\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            break_point = i\n            break\n\n    # If no break point is found, the array is already sorted\n    if break_point == -1:\n        return True\n\n    # Check if elements after the break point (including the break point)\n    # to the end of the array are in sorted order and the first element to the breakpoint\n    # and the last element of the rotated sub-array should also be in sorted order\n    for i in range(break_point, n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    \n    # Check if the last part before breakpoint and first part after breakpoint can merge correctly\n    return arr[n - 1] <= arr[0]\n\n\n# Example usage:\n# Example 1: Should return True\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\n\n# Example 2: Should return False\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    \"\"\" \n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\n    :param n: The size of the list to generate.\n    :return: A list of size n with the specified values.\n    \n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    \n    def factorial(num):\n        \"\"\"Calculate the factorial of num.\"\"\"\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result\n\n    def sum_to(num):\n        \"\"\"Calculate the sum of numbers from 1 to num.\"\"\"\n        return num * (num + 1) // 2  # Using the arithmetic sum formula\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result\n\n# Example usage:\n# example_result = f(5)\n# print(example_result)  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \n    :param arr: List of integers.\n    :return: List of string representations of 1-9 digits in reverse sorted order.\n    \"\"\"\n\n    # Mapping digits to their respective names\n    digit_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", \n                     6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Filter to only keep the valid digits between 1 and 9 inclusive\n    filtered_digits = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered digits\n    sorted_digits = sorted(filtered_digits)\n    \n    # Reverse the sorted list\n    reversed_digits = sorted_digits[::-1]\n    \n    # Convert each digit to its corresponding name\n    result = [digit_to_name[digit] for digit in reversed_digits]\n    \n    return result\n\n# Example usage:\narr1 = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr1))  # Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\narr2 = []\nprint(by_length(arr2))  # Output: []\n\narr3 = [1, -1 , 55]\nprint(by_length(arr3))  # Output: [\"One\"]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    :param arr: List of integers to be processed.\n    :return: The number of elements with a sum of digits greater than 0.\n    \n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of the digits of a number. \n        This considers signed digits for negative numbers.\n        \n        :param num: Integer whose digits are to be summed.\n        :return: The sum of the signed digits.\n        \"\"\"\n        # Convert the number to a string to iterate over digits\n        str_num = str(num)\n        \n        # Initialize digit sum\n        digit_sum = 0\n        \n        # Handle the first character separately if it's a negative sign\n        if str_num[0] == '-':\n            # First digit is negative\n            digit_sum = -int(str_num[1])\n            start_idx = 2\n        else:\n            start_idx = 0\n        \n        # Sum the rest of the digits\n        for char in str_num[start_idx:]:\n            digit_sum += int(char)\n        \n        return digit_sum\n    \n    # Initialize the count of numbers with a sum of digits > 0\n    count = 0\n    \n    # Iterate over the array to apply the sum_of_digits function\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    \n    return count\n\n# Example usage:\n# Test cases to verify the function implementation\nprint(count_nums([]))          # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))      # Output: 3"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindromes are 1, 2, 3. One of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindromes are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Four of them are even, and six of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. Returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(num):\n        \"\"\"\n        Checks if a number is a palindrome.\n        \n        :param num: The integer to check.\n        :return: True if the integer is a palindrome, False otherwise.\n        \"\"\"\n        # Convert the number to string and check if it equals its reverse.\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over the range from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        if is_palindrome(i):  # Only check palindromes\n            if i % 2 == 0:\n                even_count += 1  # Increment even palindrome count\n            else:\n                odd_count += 1  # Increment odd palindrome count\n\n    # Return the result as a tuple (even_count, odd_count)\n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_palindrome(3))  # Output: (1, 2)\n# print(even_odd_palindrome(12))  # Output: (4, 6)"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    \"\"\"\n    This function removes all characters in string s that are found in string c,\n    then it checks if the resulting string is a palindrome (reads the same backward as forward).\n    \n    :param s: The original string from which characters will be deleted.\n    :param c: The string containing characters to be deleted from s.\n    :return: A tuple containing the resultant string and a boolean indicating if it is a palindrome.\n    \"\"\"\n    # Create a set of characters to be deleted for O(1) lookups\n    delete_chars = set(c)\n    \n    # Build the new string excluding characters present in delete_chars\n    result_str = ''.join([char for char in s if char not in delete_chars])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_str == result_str[::-1]\n    \n    # Return the resultant string and the palindrome check result as a tuple\n    return (result_str, is_palindrome)\n\n# Example tests\nprint(reverse_delete(\"abcde\", \"ae\"))  # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))   # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    :param nums: List of integers.\n    :return: The minimum sum of any non-empty sub-array.\n    \n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize the current min_sum with the first element of the array.\n    min_sum = current_sum = nums[0]\n    \n    # Loop through the array starting from the second element.\n    for num in nums[1:]:\n        # Calculate the minimum sub-array sum ending at this element.\n        current_sum = min(num, current_sum + num)\n        # Update the global minimum if the current sub-array sum is smaller.\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Example usage:\n# min_sum_value = minSubArraySum([2, 3, 4, 1, 2, 4])\n# print(min_sum_value)  # Output: 1\n# min_sum_value = minSubArraySum([-1, -2, -3])\n# print(min_sum_value)  # Output: -6"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending don't count. Return an empty string if you didn't\n    find any vowel that met the above condition. \n\n    You may assume that the given string contains English letters only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \n    :param word: The word in which to find the closest vowel between two consonants.\n    :return: The closest vowel between two consonants from the right side of the word.\n    \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    n = len(word)\n    \n    # Iterate from the second-to-last character to the second character from the end\n    for i in range(n - 2, 0, -1):\n        if word[i - 1] not in vowels and word[i] in vowels and word[i + 1] not in vowels:\n            return word[i]\n    \n    return \"\"  # Return an empty string if no vowel meets the condition\n\n# Example usage:\n# result = get_closest_vowel(\"yogurt\")\n# print(result)  # Output: \"u\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    :param test: The input string containing space-separated lowercase letters.\n    :return: A dictionary with the letter(s) having the highest count along with their count.\n    \"\"\"\n    from collections import Counter\n    \n    # Split the string into words\n    letters = test.split()\n    \n    # Count the occurrences of each letter\n    count = Counter(letters)\n    \n    if not count:\n        return {}\n    \n    # Find the highest occurrence count\n    max_count = max(count.values())\n    \n    # Create the resulting dictionary with letters having the highest occurrence count\n    result = {letter: freq for letter, freq in count.items() if freq == max_count}\n    \n    return result\n\n# Example usage:\n# print(histogram('a b c'))  # Output: {'a': 1, 'b': 1, 'c': 1}\n# print(histogram('a b b a'))  # Output: {'a': 2, 'b': 2}\n# print(histogram('a b c a b'))  # Output: {'a': 2, 'b': 2}\n# print(histogram('b b b b a'))  # Output: {'b': 4}\n# print(histogram(''))  # Output: {}"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements \n    between lst1 and lst2 to make lst1 a list of only even numbers. There \n    is no limit on the number of exchanged elements between lst1 and lst2.\n    \n    :param lst1: First list of numbers.\n    :param lst2: Second list of numbers.\n    :return: \"YES\" if it is possible to exchange elements between the lists \n             to ensure lst1 contains only even numbers, otherwise \"NO\".\n    \"\"\"\n    # Create sets to store even and odd elements from both lists\n    evens_in_lst1 = set()\n    odds_in_lst1 = set()\n    evens_in_lst2 = set()\n    odds_in_lst2 = set()\n    \n    # Populate the sets for lst1\n    for num in lst1:\n        if num % 2 == 0:\n            evens_in_lst1.add(num)\n        else:\n            odds_in_lst1.add(num)\n    \n    # Populate the sets for lst2\n    for num in lst2:\n        if num % 2 == 0:\n            evens_in_lst2.add(num)\n        else:\n            odds_in_lst2.add(num)\n    \n    # If there are no odd elements in lst1, return \"YES\"\n    if not odds_in_lst1:\n        return \"YES\"\n    \n    # Check if it's possible to replace each odd element in lst1 with an even element from lst2\n    if len(evens_in_lst2) >= len(odds_in_lst1):\n        return \"YES\"\n        \n    return \"NO\"\n\n# Example usage:\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\"\nprint(exchange([2, 4, 6], [1, 3, 5]))        # Output: \"YES\"\nprint(exchange([1, 3, 5], [1, 3, 5]))        # Output: \"NO\""}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    :param value: A string representing a number (can be integer or float).\n    :return: The closest integer to the provided value.\n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    # Convert the string to a float first\n    number = float(value)\n    \n    # Get the integer part of the number\n    int_part = int(number)\n    \n    # Calculate the fractional part by subtracting the integer part from the number\n    fractional_part = number - int_part\n    \n    # Check if the number is exactly halfway between two integers\n    if fractional_part == 0.5:\n        # For positive numbers, round up\n        # For negative numbers (-0.5), rounding away from zero moves it to -1\n        return int_part + 1 if number > 0 else int_part - 1\n    elif fractional_part == -0.5:\n        # This handles the negative half case explicitly (e.g., -14.5 should return -15)\n        return int_part - 1\n    \n    # For all other cases, use the built-in round function which rounds to the nearest integer\n    return round(number)\n\n# Example usage:\nprint(closest_integer(\"10\"))    # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\")) # Output: -15"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements 4n the str4ng 4 of the 4nput.\" \n    where all the i's should be replaced by the number of odd digits in the i'th string of the input.\n    \n    :param lst: List of strings where each string contains only digits.\n    :return: List of formatted strings as described.\n    \n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3', \"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n\n    # Function to count the number of odd digits in a string of digits\n    def count_odd_digits(s):\n        odd_count = sum(1 for char in s if char in '13579')  # Count how many chars are odd digits\n        return odd_count\n\n    # List to store the results\n    result = []\n\n    # Iterate over each string in the input list\n    for s in lst:\n        # Find the number of odd digits in the current string\n        odd_digits = count_odd_digits(s)\n        \n        # Construct the formatted string with the required substitutions\n        formatted_string = (\n            f\"the number of odd elements {odd_digits}n the str{odd_digits}ng \"\n            f\"{odd_digits} of the {odd_digits}nput.\"\n        )\n        \n        # Append the formatted string to the result list\n        result.append(formatted_string)\n    \n    return result\n\n# Example usage with provided test cases\nprint(odd_count(['1234567'])) \n# Output: [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\nprint(odd_count(['3', '11111111'])) \n# Output: [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements \n    that are in even positions.\n    \n    :param lst: List of integers.\n    :return: Sum of all odd integers at even indices.\n    \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    total_sum = 0\n    for i in range(0, len(lst), 2):  # Traverse the list by stepping through each even index\n        if lst[i] % 2 != 0:  # Check if the element at the current even index is odd\n            total_sum += lst[i]  # Add it to the total sum\n    \n    return total_sum\n\n# Example usage:\n# print(solution([5, 8, 7, 1]))  # Output: 12\n# print(solution([3, 3, 3, 3, 3]))  # Output: 9\n# print(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Count the total number of water units (1s) in the grid\n    total_water_units = 0\n    for row in grid:\n        total_water_units += sum(row)\n\n    # Calculate the number of times the bucket needs to be lowered\n    # total_water_units // capacity gives the minimum number of full bucket usages\n    # total_water_units % capacity will be more than 0 if there's some remaining water\n    bucket_uses = math.ceil(total_water_units / capacity)\n\n    return bucket_uses\n\n# Example usage:\n# print(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\n# print(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\n# print(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \n    :param arr: List of non-negative integers to be sorted.\n    :return: List of integers sorted according to the number of ones in their binary\n             representation. If two integers have the same number of ones, they are \n             sorted by their decimal value.\n    \n    Examples:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 4, 3]\n    \"\"\"\n\n    # Define a key function that returns a tuple, which Python uses to sort\n    # 1. First element is the number of 1's in the binary representation, counted using bin().count('1')\n    # 2. Second element is the number itself (for tie-breaking)\n    def sort_key(x):\n        return (bin(x).count('1'), x)\n\n    # Use sorted() with the custom key function defined\n    return sorted(arr, key=sort_key)\n\n# Example usage (Uncomment to test):\n# print(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 4, 3, 5]\n# print(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 4, 3]"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Initialize an empty list to store odd numbers in the Collatz sequence\n    odd_numbers = []\n\n    # While the sequence has not reached 1\n    while n != 1:\n        # If the number is odd, add it to the list\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        # Generate the next term in the Collatz sequence\n        if n % 2 == 0:\n            n //= 2  # Halve the number if it's even\n        else:\n            n = 3 * n + 1  # Apply 3n + 1 rule if it's odd\n\n    # Make sure to add 1 to the list since Collatz sequence always ends with 1\n    odd_numbers.append(1)\n\n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)\n\n# Example usage:\n# result = get_odd_collatz(5)\n# print(result)  # Output: [1, 5]"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n        Input: arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \n    :param arr: List[int] - A list of integers.\n    :param k: int - The number of elements to consider from the beginning of the list.\n    :return: int - The sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    \n    sum_of_elements = 0  # Initialize the sum variable\n    \n    # Iterate over the first k elements of arr\n    for i in range(min(k, len(arr))):\n        # Check if the element has at most two digits\n        if -99 <= arr[i] <= 99:\n            sum_of_elements += arr[i]  # Add the element to the sum\n    \n    return sum_of_elements\n\n# Example usage:\n# result = add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# print(result)  # Output: 24 "}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, returns a list of all words from string s\n    that contain exactly n consonants, in the order these words appear in string s.\n    \n    :param s: A string containing words separated by spaces.\n    :param n: A natural number indicating the exact number of consonants to look for.\n    :return: A list of words that contain exactly n consonants.\n    \n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    def count_consonants(word):\n        \"\"\"\n        Helper function to count the number of consonants in a word.\n        \n        :param word: The word in which to count consonants.\n        :return: The count of consonants in the word.\n        \"\"\"\n        # Define vowels for reference\n        vowels = \"aeiouAEIOU\"\n        consonant_count = 0\n        \n        for char in word:\n            # Check if the character is a letter but not a vowel\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        return consonant_count\n    \n    if not s:\n        return []\n    \n    result = []\n    words = s.split()\n    \n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    \n    return result\n\n# Example usage:\n# print(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\n# print(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\n# print(select_words(\"simple white space\", 2))      # Output: []\n# print(select_words(\"Hello world\", 4))             # Output: [\"world\"]\n# print(select_words(\"Uncle sam\", 3))               # Output: [\"Uncle\"]"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\n    :param arr: List of integers\n    :param k: Positive integer indicating the number of maximum numbers to return\n    :return: A sorted list of the maximum k numbers in arr\n    \"\"\"\n    # Step 1: Sort the input array in non-decreasing order\n    sorted_arr = sorted(arr)\n    \n    # Step 2: Get the last k elements from the sorted array, which are the maximum k elements\n    max_k_elements = sorted_arr[-k:]\n    \n    # Step 3: Return the list of maximum k elements\n    return max_k_elements\n\n# Example usage\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted in ascending order. \n    If list has more than 1 duplicate of the same number, return False. Assume no \n    negative numbers and only integers.\n    \n    :param lst: List of integers to check.\n    :return: Boolean indicating whether the list is sorted in ascending order and \n             has no more than one duplicate of the same number.\n    \"\"\"\n\n    # Loop through the list to check if it is in ascending order and if each element appears\n    # no more than twice.\n    from collections import Counter\n\n    # Count occurrences of each element.\n    counter = Counter(lst)\n\n    # Check for any element that appears more than twice.\n    for count in counter.values():\n        if count > 2:\n            return False\n\n    # Check if the list is in ascending order.\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    # If all checks passed, return True.\n    return True\n\n# Example usage:\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n    :param n: A positive integer\n    :return: The product of the odd digits of n, or 0 if there are no odd digits.\n    \n    For example:\n    >>> digits(1)\n    1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\n    product = 1\n    has_odd_digit = False\n\n    # Convert the number to a string to iterate over each digit\n    for digit in str(n):\n        digit = int(digit)  # Convert the character back to an integer\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd_digit = True\n    \n    # If there were no odd digits, return 0\n    if not has_odd_digit:\n        return 0\n    \n    return product\n\n# Usage examples\n# print(digits(1))    # Output: 1\n# print(digits(4))    # Output: 0\n# print(digits(235))  # Output: 15"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    :param arr: List of integers\n    :return: Integer or None\n    \"\"\"\n    # Return None if the array is empty\n    if not arr:\n        return None\n\n    # Initialize variables\n    magnitude_sum = 0\n    product_of_signs = 1\n\n    for num in arr:\n        # Add the absolute value of the number to the magnitude sum\n        magnitude_sum += abs(num)\n\n        # Determine the sign of the number and multiply to product_of_signs\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n\n    # Return the product of the signs multiplied by the sum of magnitudes\n    return magnitude_sum * product_of_signs\n\n# Example usages:\n# prod_signs([1, 2, 2, -4]) returns -9\n# prod_signs([0, 1]) returns 0\n# prod_signs([]) returns None"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    Examples:\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \n    :param string: str - The input string containing only square brackets.\n    :return: bool - True if there is at least one nested bracket, else False.\n    '''\n    # Using a stack to track the opening brackets\n    stack = []\n\n    for char in string:\n        if char == '[':\n            # Push the opening bracket to the stack\n            stack.append(char)\n        elif char == ']':\n            # If encountering a closing bracket, pop the stack if there's an opening bracket\n            if stack:\n                # If stack is not empty, there is a balancing opening bracket\n                stack.pop()\n                # If the stack is not empty after popping, it means there are nested brackets\n                if stack:\n                    return True\n\n    # Return False if no nesting is found\n    return False\n\n# Example usage:\nprint(is_nested('[[]]'))  # Output: True\nprint(is_nested('[]]]]]]][[[[[]'))  # Output: False\nprint(is_nested('[][]'))  # Output: False\nprint(is_nested('[]'))  # Output: False\nprint(is_nested('[[][]]'))  # Output: True\nprint(is_nested('[[]][['))  # Output: True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace.\n    If no whitespaces exist in the text, split on commas ','. \n    If no commas exist, return the number of lowercase letters with an odd order in the alphabet.\n    \n    :param txt: The input string to process.\n    :return: A list of words split by whitespace, or by commas if no whitespace exists, or an integer count of \n             lowercase letters with odd order in the alphabet if no commas exist.\n             \n    Examples:\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    \"\"\"\n    # Check if there are spaces in the text\n    if ' ' in txt:\n        # Split on whitespace\n        return txt.split()\n    elif ',' in txt:\n        # Split on commas if no spaces\n        return txt.split(',')\n    else:\n        # Calculate the number of lowercase letters with odd order in the alphabet\n        count = 0\n        for char in txt:\n            if char.islower():\n                # Get the alphabet order of the character\n                order = ord(char) - ord('a')\n                # Check if the order is odd\n                if order % 2 == 1:\n                    count += 1\n        return count\n\n# Example usage:\n# print(split_words(\"Hello world!\"))  # Output: [\"Hello\", \"world!\"]\n# print(split_words(\"Hello,world!\"))  # Output: [\"Hello\", \"world!\"]\n# print(split_words(\"abcdef\"))        # Output: 3"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"\n    Returns the first (n + 1) numbers of the Tribonacci sequence.\n    \n    The Tribonacci sequence is defined by the recurrence:\n    - tri(1) = 3\n    - tri(n) = 1 + n / 2, if n is even.\n    - tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    \n    :param n: A non-negative integer defining the length of the Tribonacci sequence to generate.\n    :return: A list of the first (n + 1) numbers of the Tribonacci sequence.\n    \"\"\"\n    \n    def tribonacci_helper(k, memo):\n        \"\"\"Helper function to use recursion with memoization.\"\"\"\n        # base case\n        if k == 1:\n            return 3\n        \n        # check if the result is already computed\n        if k in memo:\n            return memo[k]\n        \n        if k % 2 == 0:\n            result = 1 + k / 2\n        else:\n            result = tribonacci_helper(k - 1, memo) + tribonacci_helper(k - 2, memo) + tribonacci_helper(k + 1, memo)\n        \n        memo[k] = result\n        return result\n    \n    # Initialize memoization dictionary\n    memo = {}\n    \n    # Generate list of the first (n + 1) numbers of the Tribonacci sequence\n    result_list = [tribonacci_helper(i, memo) for i in range(n + 1)]\n    \n    return result_list\n\n# Example usage:\n# tribonacci_sequence = tri(3)\n# print(tribonacci_sequence)  # Output: [3, 8, 5.0, 20]"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"\n    Check if a number n is prime.\n    \n    :param n: An integer to check for primality.\n    :return: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"\n    Determines whether the length of intersection of two given intervals \n    is a prime number.\n    \n    :param interval1: A tuple representing the first interval (start, end).\n    :param interval2: A tuple representing the second interval (start, end).\n    :return: \"YES\" if the length of the intersection is a prime number, \"NO\" otherwise.\n    \"\"\"\n    # Unpack the intervals into their start and end points\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the maximum of the start points for the intersection start\n    intersect_start = max(start1, start2)\n    \n    # Find the minimum of the end points for the intersection end\n    intersect_end = min(end1, end2)\n    \n    # Calculate the length of the intersection\n    intersection_length = intersect_end - intersect_start + 1\n    \n    # If the intervals do not intersect, the intersection length would be zero or negative\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage and tests:\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n    The date is considered valid if all of the following conditions are satisfied:\n    1. The date string is not empty.\n    2. The number of days must be:\n       - Between 1 and 31 for the months of January, March, May, July, August, October, December.\n       - Between 1 and 30 for the months of April, June, September, November.\n       - Between 1 and 29 for the month of February.\n    3. The months should be between 1 and 12 inclusive.\n    4. The date should be in the format: mm-dd-yyyy\n\n    :param date: The date string to be validated.\n    :return: True if the date is valid, False otherwise.\n    \n    Examples:\n    >>> valid_date('03-11-2000')\n    True\n    >>> valid_date('15-01-2012')\n    False\n    >>> valid_date('04-0-2040')\n    False\n    >>> valid_date('06-04-2020')\n    True\n    >>> valid_date('06/04/2020')\n    False\n    \"\"\"\n    if not date:\n        return False\n\n    # Ensure the date string matches the format mm-dd-yyyy\n    date_pattern = re.compile(r\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[01])-(\\d{4})$\")\n    match = date_pattern.fullmatch(date)\n    \n    if not match:\n        return False\n\n    # Extract month, day, and year from the date string\n    month, day, year = map(int, date.split('-'))\n\n    # Define days allowed per month\n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30, \n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n\n    # Check if the day is valid for the given month\n    if day < 1 or day > days_in_month[month]:\n        return False\n\n    return True\n\n# Example usage:\n# print(valid_date('03-11-2000'))  # Output: True\n# print(valid_date('15-01-2012'))  # Output: False\n# print(valid_date('04-0-2040'))   # Output: False\n# print(valid_date('06-04-2020'))  # Output: True\n# print(valid_date('06/04/2020'))  # Output: False"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    def is_balanced(s):\n        \"\"\"\n        Checks if the input string of parentheses is balanced.\n        \n        :param s: A string consisting of '(' and ')'.\n        :return: True if the string is balanced, False otherwise.\n        \"\"\"\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            # If at any point balance is negative, parentheses are not balanced\n            if balance < 0:\n                return False\n        # In the end, balance should be zero for the string to be balanced\n        return balance == 0\n\n    # Generate the two possible concatenations\n    concat1 = lst[0] + lst[1]\n    concat2 = lst[1] + lst[0]\n\n    # Check if either concatenation results in a balanced string\n    if is_balanced(concat1) or is_balanced(concat2):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squared numbers in the given list,\n    rounding each element in the list up to the nearest integer first.\n\n    :param lst: List of numbers (integers or floats) to be processed.\n    :return: The sum of the squares of the rounded numbers.\n    \n    Examples:\n    For lst = [1, 2, 3], the output should be 14\n    For lst = [1, 4, 9], the output should be 98\n    For lst = [1, 3, 5, 7], the output should be 84\n    For lst = [1.4, 4.2, 0], the output should be 29\n    For lst = [-2.4, 1, 1], the output should be 6\n    \"\"\"\n    # Initialize a variable to hold the sum of squares\n    total_sum = 0\n    \n    for num in lst:\n        # Round the number up to the nearest integer\n        rounded_num = math.ceil(num)\n        # Square the rounded number\n        squared_num = rounded_num * rounded_num\n        # Add the squared number to the total sum\n        total_sum += squared_num\n        \n    return total_sum\n\n# Example usage:\nprint(sum_squares([1, 2, 3]))  # Output: 14\nprint(sum_squares([1, 4, 9]))  # Output: 98\nprint(sum_squares([1, 3, 5, 7]))  # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output: 29\nprint(sum_squares([-2.4, 1, 1]))  # Output: 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \n    :param txt: The input string to check.\n    :return: Boolean value indicating whether the last character is an alphabet letter and not part of a word.\n    '''\n    # Strip any trailing whitespace from the string.\n    txt = txt.strip()\n    \n    # Return False if the string is empty after stripping.\n    if not txt:\n        return False\n    \n    # Check if the last character is an alphabetical character.\n    if txt[-1].isalpha():\n        # Split the string into words.\n        words = txt.split()\n        \n        # If the last word is a single character, then its last character is not part of a larger word.\n        if len(words[-1]) == 1:\n            return True\n\n    return False\n\n# Example usage:\n# print(check_if_last_char_is_a_letter(\"apple pie\"))  # Output: False\n# print(check_if_last_char_is_a_letter(\"apple pi e\"))  # Output: True\n# print(check_if_last_char_is_a_letter(\"apple pi e \"))  # Output: False\n# print(check_if_last_char_is_a_letter(\"\"))  # Output: False"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    :param n: Integer input to be evaluated.\n    :return: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise.\n    \"\"\"\n    # To form a sum of four even numbers, n must be the sum of four multiples of 2.\n    # Let those numbers be 2a, 2b, 2c, and 2d.\n    # So, n = 2a + 2b + 2c + 2d = 2 * (a + b + c + d)\n    # Hence, n must be even.\n    \n    # Additionally, since we need each of a, b, c, and d to be at least 1 (as they are positive),\n    # the minimum sum we can form by such 4 positive even numbers is 2 + 2 + 2 + 2 = 8.\n    \n    if n >= 8 and n % 2 == 0:\n        return True\n    else:\n        return False\n\n# Example usage:\n# print(is_equal_to_sum_even(4))  # Output: False\n# print(is_equal_to_sum_even(6))  # Output: False\n# print(is_equal_to_sum_even(8))  # Output: True\n# print(is_equal_to_sum_even(10)) # Output: True\n# print(is_equal_to_sum_even(12)) # Output: True\n# print(is_equal_to_sum_even(2))  # Output: False"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n\n    :param n: An integer n where n > 0.\n    :return: The special factorial of the given integer n as defined above.\n    \"\"\"\n    # Initialize the result to 1 since we will multiply other factorials to it.\n    result = 1\n    \n    # For each i from 1 to n (inclusive), calculate i! and multiply it to result.\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n\n# Example usage:\n# special_fact = special_factorial(4)\n# print(special_fact)  # Output: 288"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    # Helper function to calculate the sum of digits of a number\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    # Enumerate to keep track of the original indices\n    enumerated_nums = list(enumerate(nums))\n    \n    # Sort by sum of digits and then by the original index\n    enumerated_nums.sort(key=lambda x: (sum_of_digits(x[1]), x[0]))\n    \n    # Extract the sorted list of numbers\n    sorted_nums = [num for index, num in enumerated_nums]\n    \n    return sorted_nums\n\n# Example usage:\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all single spaces with underscores (_), \n    and if a string has more than 2 consecutive spaces, \n    then replace all such consecutive spaces with a hyphen (-).\n\n    :param text: The string text to process.\n    :return: The processed string with the specified replacements.\n\n    Examples:\n    fix_spaces(\"Example\") returns \"Example\"\n    fix_spaces(\"Example 1\") returns \"Example_1\"\n    fix_spaces(\" Example 2\") returns \"_Example_2\"\n    fix_spaces(\" Example   3\") returns \"_Example-3\"\n    \"\"\"\n    # Import regular expressions module\n    import re\n\n    # Use regular expression to replace more than 2 spaces with a hyphen\n    processed_text = re.sub(r'\\s{3,}', '-', text)\n    \n    # Replace remaining single spaces with underscore\n    processed_text = processed_text.replace(' ', '_')\n    \n    return processed_text\n\n# Example usage:\n# print(fix_spaces(\"Example\")) # Output: Example\n# print(fix_spaces(\"Example 1\")) # Output: Example_1\n# print(fix_spaces(\" Example 2\")) # Output: _Example_2\n# print(fix_spaces(\" Example   3\")) # Output: _Example-3\n\n# Testing the function\nprint(fix_spaces(\"Example\"))       # Expected Output: \"Example\"\nprint(fix_spaces(\"Example 1\"))     # Expected Output: \"Example_1\"\nprint(fix_spaces(\" Example 2\"))    # Expected Output: \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # Expected Output: \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the Latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \n    :param file_name: The file name to check.\n    :return: 'Yes' if the file name is valid, 'No' otherwise.\n\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a Latin alphabet letter)\n    \"\"\"\n\n    # Check for exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.', 1)\n\n    # Validate the part before the dot\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Validate the extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n            \n# Example usage:\nprint(file_name_check(\"example.txt\"))  # Output: 'Yes'\nprint(file_name_check(\"1example.dll\"))  # Output: 'No'\nprint(file_name_check(\"example23.txt\"))  # Output: 'Yes'\nprint(file_name_check(\"example.exe\"))  # Output: 'Yes'\nprint(file_name_check(\"exampledll\"))  # Output: 'No'\nprint(file_name_check(\"a.123exe\"))  # Output: 'No'"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    :param lst: List of integers to analyze.\n    :return: Tuple containing the largest negative integer and smallest positive integer.\n    \n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    largest_negative = None\n    smallest_positive = None\n    \n    for number in lst:\n        if number < 0:\n            # Check for largest negative number\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        elif number > 0:\n            # Check for smallest positive number\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    return (largest_negative, smallest_positive)\n    \n# Example usage:\n# print(largest_smallest_integers([2, 4, 1, 3, 5, 7]))   # Output: (None, 1)\n# print(largest_smallest_integers([-1, -2, -3, 0, 1, 2]))  # Output: (-1, 1)\n# print(largest_smallest_integers([]))  # Output: (None, None)\n# print(largest_smallest_integers([0]))  # Output: (None, None)"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    :param arr: List of integers\n    :return: The largest index where the condition arr[i] < arr[i-1] holds, or -1 if no such index exists.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    # Loop through the array from the second element to the end\n    for i in range(len(arr) - 1, 0, -1):\n        # If the current element is less than the previous element\n        if arr[i] < arr[i - 1]:\n            return i  # Return the current index\n    return -1  # If no such element is found, return -1\n\n# Example usage:\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))  # Output: -1"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    :param n: The integer to check for primality.\n    :return: True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Extract words from a sentence whose lengths are prime numbers.\n\n    :param sentence: A string representing the sentence.\n    :return: A string containing the words whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = []\n    for word in words:\n        # Check if the length of the word is prime\n        if is_prime(len(word)):\n            prime_length_words.append(word)\n    return ' '.join(prime_length_words)\n\n# Example usage:\n# Example 1:\n# Input: \"This is a test\"\n# Output: \"is\"\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\n\n# Example 2:\n# Input: \"lets go for swimming\"\n# Output: \"go for\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    :param a: An integer, float, or string representing a real number.\n    :param b: An integer, float, or string representing a real number.\n    :return: The larger of the two variables in its given variable type, or None if they are equal.\n    \"\"\"\n\n    def convert_to_float(val):\n        \"\"\"\n        Convert a given value, which may be an integer, float, or string, to a float.\n        This handles strings with commas as decimal points by replacing them with a dot.\n        \n        :param val: The value to convert to float.\n        :return: The float representation of the value.\n        \"\"\"\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n\n    # Convert both a and b to floats for comparison\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    # Compare the float values\n    if a_float > b_float:\n        return a  # Return a in its original type\n    elif b_float > a_float:\n        return b  # Return b in its original type\n    else:\n        return None  # Values are equal\n\n# Example usage:\n# print(compare_one(1, 2.5))         # Output: 2.5\n# print(compare_one(1, \"2,3\"))       # Output: \"2,3\"\n# print(compare_one(\"5,1\", \"6\"))     # Output: \"6\"\n# print(compare_one(\"1\", 1))         # Output: None"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \n    :param nums: List of integers\n    :return: Count of numbers meeting the specified criteria\n    \n    Examples:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    \n    def is_odd_digit(digit):\n        \"\"\"Checks if a digit is odd\"\"\"\n        return digit in {1, 3, 5, 7, 9}\n\n    def first_and_last_odd(num):\n        \"\"\"Checks if the first and last digits of the number are odd\"\"\"\n        s = str(abs(num))  # Convert to string and remove negative sign if present\n        first_digit = int(s[0])\n        last_digit = int(s[-1])\n        return is_odd_digit(first_digit) and is_odd_digit(last_digit)\n\n    # List comprehension to filter numbers that are greater than 10 and meet the odd digits criteria\n    count = sum(1 for num in nums if num > 10 and first_and_last_odd(num))\n    return count\n\n# Examples for testing the function\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    :param lst: List of integers\n    :return: Sum of processed integers according to the given rules\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    \n    total_sum = 0  # Variable to keep track of the sum\n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n            total_sum += value ** 2  # Square if index is a multiple of 3\n        elif index % 4 == 0:\n            total_sum += value ** 3  # Cube if index is a multiple of 4 and not a multiple of 3\n        else:\n            total_sum += value  # Leave unchanged if index is neither a multiple of 3 nor 4\n    return total_sum\n\n# Example usage:\n# print(sum_squares([1,2,3]))  # Output: 6\n# print(sum_squares([]))  # Output: 0\n# print(sum_squares([-1,-5,2,-1,-5]))  # Output: -126"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with your current\n    cell. You cannot go off the grid.\n    \n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    \n    It is guaranteed that the answer is unique.\n    \n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    :param grid: List[List[int]], a 2D grid of integers with unique values\n    :param k: int, the length of the path to find\n    :return: List[int], the ordered values on the minimum path through the grid\n\n    Examples:\n        Input: grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k = 1\n        Output: [1]\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # A priority queue to store paths using heap - keeps paths ordered lexicographically\n    heap = []\n    \n    # Initialize the heap with all starting points\n    for r in range(rows):\n        for c in range(cols):\n            heappush(heap, (grid[r][c], [(r, c)]))  # Start paths from all cells\n\n    while heap:\n        path_cost, path = heappop(heap)\n        \n        if len(path) == k:\n            return [grid[r][c] for r, c in path]\n        \n        last_r, last_c = path[-1]\n        for dr, dc in directions:\n            new_r, new_c = last_r + dr, last_c + dc\n            if 0 <= new_r < rows and 0 <= new_c < cols:\n                new_path = path + [(new_r, new_c)]\n                heappush(heap, (path_cost * 10**cols + grid[new_r][new_c], new_path))\n\n    return []\n\n# Example usage:\n# print(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))  # Output: [1, 2, 1]\n# print(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    :param n: The integer to check for primality.\n    :param x: The value to return if n is a prime number.\n    :param y: The value to return if n is not a prime number.\n    :return: The value of x if n is prime, otherwise the value of y.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    \n    def is_prime(k):\n        \"\"\"Determines if an integer k is a prime number.\n\n        :param k: The integer to check for primality.\n        :return: True if k is a prime number, False otherwise.\n        \"\"\"\n        if k <= 1:\n            return False\n        # Check for factors from 2 to the square root of k\n        for i in range(2, int(k**(1/2)) + 1):\n            if k % i == 0:\n                return False\n        return True\n\n    # Check if n is a prime number\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Example usage:\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulting list in a sorted order.\n    The order of the list should be ascending by length of each word, and if \n    two words have the same length, it should be sorted alphabetically.\n    \n    :param lst: List of strings to be processed and sorted.\n    :return: A list of strings with even lengths, sorted as per the described rules.\n    \n    For example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    \"\"\"\n    \n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the filtered list, first by length, then alphabetically within same length\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    \n    return even_length_strings\n\n# Examples with assertions to test\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\nassert sorted_list_sum([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"date\"]\nassert sorted_list_sum([\"ab\", \"abc\", \"abcd\", \"ef\", \"xyz\", \"pqr\"]) == [\"ab\", \"ef\", \"abcd\"]"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n and returns True if the result is a whole number\n    and False otherwise. Both x and n are string representations of fractions in the\n    form \"<numerator>/<denominator>\".\n\n    :param x: A string representing the first fraction in the form \"numerator/denominator\".\n    :param n: A string representing the second fraction in the form \"numerator/denominator\".\n    :return: True if the product of the two fractions evaluates to a whole number, False otherwise.\n    \n    Examples:\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    # Convert fraction x to its numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    # Convert fraction n to its numerator and denominator\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Compute the product of x and n as a fraction\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Check if the product is a whole number\n    # A fraction is a whole number if its numerator is divisible by its denominator\n    return product_num % product_den == 0\n\n# Example usage:\n# Should print True\nprint(simplify(\"1/5\", \"5/1\"))\n# Should print False\nprint(simplify(\"1/6\", \"2/1\"))\n# Should print False\nprint(simplify(\"7/10\", \"10/2\"))"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n\n    :param a: Length of the first side of the triangle.\n    :param b: Length of the second side of the triangle.\n    :param c: Length of the third side of the triangle.\n    :return: True if the sides form a right-angled triangle, False otherwise.\n    '''\n\n    # Sort the sides to make the comparison easier.\n    sides = sorted([a, b, c])\n    \n    # Check the Pythagorean theorem condition\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\n# print(right_angle_triangle(3, 4, 5))  # Output: True\n# print(right_angle_triangle(1, 2, 3))  # Output: False"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    \"\"\"\n    Given a positive integer n, create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] is calculated as i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    :param n: The length of the array\n    :type n: int\n    :return: The number of valid triples\n    :rtype: int\n\n    Example:\n    Input: n = 5\n    Output: 1\n    Explanation: a = [1, 3, 7, 13, 21]\n                The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Create the array a based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Counters for the residues of the elements in a when divided by 3\n    residues = [0, 0, 0]\n    \n    # Count the residues of the elements in a\n    for num in a:\n        residues[num % 3] += 1\n        \n    # Calculate the number of valid triples\n    count = 0\n    \n    # Case 1: All three numbers give the same residue when divided by 3\n    for i in range(3):\n        if residues[i] >= 3:\n            count += (residues[i] * (residues[i] - 1) * (residues[i] - 2)) // 6\n\n    # Case 2: One number from each residue group\n    count += residues[0] * residues[1] * residues[2]\n    \n    return count\n\n# Example usage:\n# Input: n = 5\nprint(get_max_triples(5))  # Output: 1"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    For example:\n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    \n    :param lst: List of numbers (may contain integers or non-integer values).\n    :return: Sum of squares of odd, non-negative integers.\n    '''\n    # Variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate through each element in the list\n    for num in lst:\n        # Check if the number is an integer, non-negative and odd\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            sum_of_squares += num ** 2  # Add the square of the number\n            \n    return sum_of_squares\n\n# Example usages:\n#print(double_the_difference([1, 3, 2, 0]))  # Output: 10\n#print(double_the_difference([-1, -2, 0]))   # Output: 0\n#print(double_the_difference([9, -2]))       # Output: 81\n#print(double_the_difference([0]))           # Output: 0"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    \"\"\"Finds and returns the strongest extension for the given class.\n    \n    The strength of an extension is calculated as the number of uppercase letters \n    minus the number of lowercase letters in the extension's name. The function \n    returns a string combining the class name and the strongest extension name \n    in the form \"ClassName.StrongestExtensionName\".\n    \n    If multiple extensions have the same strength, the one appearing first in \n    the list is chosen.\n    \n    :param class_name: The name of the class as a string.\n    :param extensions: A list of extension names as strings.\n    :return: A string in the format \"ClassName.StrongestExtensionName\" indicating \n             the class name and the strongest extension name.\n    \"\"\"\n    # Initialize variables to keep track of the strongest extension and its strength.\n    strongest_extension = \"\"\n    max_strength = float('-inf')\n    \n    # Iterate through each extension in the list to calculate its strength.\n    for ext in extensions:\n        # Calculate the number of uppercase and lowercase letters.\n        cap_count = sum(1 for char in ext if char.isupper())\n        sm_count = sum(1 for char in ext if char.islower())\n        \n        # Calculate the strength of the extension.\n        strength = cap_count - sm_count\n        \n        # Update the strongest extension if the current one has a higher strength.\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    \n    # Return the combined string with the class name and the strongest extension name.\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\n# result = Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n# print(result)  # Output: 'Slices.SErviNGSliCes'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Determines if the second word or any of its rotations is a substring in the first word.\n\n    :param a: The first word (in which we need to check for substrings).\n    :param b: The second word (we need to check its rotations as substrings).\n    :return: True if any rotation of the second word is a substring in the first word, otherwise False.\n    \n    Example usage:\n    cycpattern_check(\"abcd\", \"abd\") => False\n    cycpattern_check(\"hello\", \"ell\") => True\n    cycpattern_check(\"whassup\", \"psus\") => False\n    cycpattern_check(\"abab\", \"baa\") => True\n    cycpattern_check(\"efef\", \"eeff\") => False\n    cycpattern_check(\"himenss\", \"simen\") => True\n    \"\"\"\n    \n    # Generate all rotations of string b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation of b is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True  # If found, return True immediately\n    \n    return False  # If no rotation is found as substring, return False\n\n# Example usage\n# print(cycpattern_check(\"abcd\", \"abd\"))   # Output: False\n# print(cycpattern_check(\"hello\", \"ell\"))  # Output: True\n# print(cycpattern_check(\"whassup\", \"psus\")) # Output: False\n# print(cycpattern_check(\"abab\", \"baa\"))   # Output: True\n# print(cycpattern_check(\"efef\", \"eeff\"))  # Output: False\n# print(cycpattern_check(\"himenss\", \"simen\")) # Output: True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    The function takes into consideration negative numbers by ignoring the sign.\n    \n    :param num: The integer number whose digits are to be counted.\n    :return: A tuple with the count of even digits and the count of odd digits.\n    \n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    \n    # Convert the number to its absolute value to ignore negative sign\n    num = abs(num)\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the number\n    while num > 0:\n        digit = num % 10  # Get the last digit\n        if digit % 2 == 0:\n            even_count += 1  # Increment even count if digit is even\n        else:\n            odd_count += 1  # Increment odd count if digit is odd\n        num = num // 10  # Remove the last digit from the number\n    \n    return (even_count, odd_count)\n\n# Example usage:\n# print(even_odd_count(-12))  # Output: (1, 1)\n# print(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vice versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n\n    Args:\n    s (str): The input string to process.\n\n    Returns:\n    str: The resulting string after the specified operations.\n\n    Examples:\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    # Check if there are any alphabetic characters in the string\n    has_alpha = any(c.isalpha() for c in s)\n    \n    if has_alpha:\n        # Process each character: toggle case if alphabetic, leave as is otherwise\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # If no alphabetic characters, simply reverse the string\n        result = s[::-1]\n\n    return result\n\n# Testing the function with some examples\nprint(solve(\"1234\"))    # Output: \"4321\"\nprint(solve(\"ab\"))      # Output: \"AB\"\nprint(solve(\"#a@C\"))    # Output: \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    :param text: The string that needs to be hashed using md5.\n    :return: The md5 hash of the input string or None if the string is empty.\n    \n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    # If the string is empty, return None\n    if not text:\n        return None\n    \n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the text\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal representation of the digest\n    return md5_hash.hexdigest()\n\n# Example usage:\n# hash_string = string_to_md5(\"Hello world\")\n# print(hash_string)  # Output: '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \n    :param planet1: The first planet name as a string.\n    :param planet2: The second planet name as a string.\n    :return: A tuple of planet names whose orbits are between planet1 and planet2.\n    '''\n    \n    # List of planets in the solar system sorted by their distance from the Sun.\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet1 and planet2 are valid planet names.\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Find the indices of the two planets in the list.\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Get the range of indices between the two planets.\n    if index1 < index2:\n        # Return the slice of planets between the indices, exclusive.\n        between_planets = planets[index1 + 1:index2]\n    else:\n        # Return the slice of planets between the indices, exclusive.\n        between_planets = planets[index2 + 1:index1]\n    \n    return tuple(between_planets)\n\n# Example usage:\n# print(bf(\"Jupiter\", \"Neptune\")) # Output: (\"Saturn\", \"Uranus\")\n# print(bf(\"Earth\", \"Mercury\"))   # Output: (\"Venus\")\n# print(bf(\"Mercury\", \"Uranus\"))  # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    \"\"\"\n    Determines if a person correctly guessed the results of a number of matches.\n    \n    :param game: List of integer scores representing the actual results of the matches.\n    :param guess: List of integer guesses representing the guessed results of the matches.\n    :return: A list of integers where each value represents how far off each guess was from the actual score.\n             If the guess is correct, the value is 0, otherwise it is the absolute difference between the guess and the score.\n             \n    Example:\n    compare([1,2,3,4,5,1], [1,2,3,4,2,-2]) -> [0, 0, 0, 0, 3, 3]\n    compare([0,5,0,0,0,4], [4,1,1,0,0,-2]) -> [4, 4, 1, 0, 0, 6]\n    \"\"\"\n    # Initialize the result list\n    result = []\n    \n    # Iterate through both the game scores and guesses in parallel\n    for actual, guessed in zip(game, guess):\n        # Calculate the difference between the actual score and the guessed score\n        difference = abs(actual - guessed)\n        # Append the difference to the result list\n        result.append(difference)\n    \n    return result\n\n# Example usage:\n# result1 = compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n# print(result1)  # Output: [0, 0, 0, 0, 3, 3]\n\n# result2 = compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n# print(result2)  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Converts a given integer to its Roman numeral equivalent as a string in lowercase.\n    \n    :param number: An integer between 1 and 1000, inclusive.\n    :return: The lowercase Roman numeral equivalent of the given integer as a string.\n    \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the Roman numeral mappings\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n    ]\n    \n    roman_num = \"\"\n    i = 0\n    # Convert the integer to a Roman numeral\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    \n    # Return the Roman numeral in lowercase\n    return roman_num.lower()\n\n# Example usage and testing\n# print(int_to_mini_roman(19))  # Output: 'xix'\n# print(int_to_mini_roman(152)) # Output: 'clii'\n# print(int_to_mini_roman(426)) # Output: 'cdxxvi'"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    :param words: List of strings containing different words.\n    :return: The word with the maximum number of unique characters. If multiple\n             words have the same number of unique characters, return the one\n             which comes first in lexicographical order.\n    \"\"\"\n    # Initialize variables to track the word with the maximum unique characters\n    max_unique_count = -1\n    result_word = \"\"\n\n    # Iterate over each word in the input list\n    for word in words:\n        # Count the number of unique characters in the word using a set\n        unique_char_count = len(set(word))\n        \n        # Update the result word if this word has more unique characters\n        # Or if it ties and is lexicographically smaller\n        if (unique_char_count > max_unique_count or\n           (unique_char_count == max_unique_count and word < result_word)):\n            max_unique_count = unique_char_count\n            result_word = word\n\n    return result_word\n\n# Example usage and test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \n    :param a: The first positive integer.\n    :param b: The second positive integer.\n    :return: A list of even digits between a and b, inclusive, in ascending order.\n    \"\"\"\n    # Ensure a is always the minimum and b is the maximum\n    min_val = min(a, b)\n    max_val = max(a, b)\n    \n    # Initialize an empty list to store even integers\n    even_numbers = []\n    \n    # Iterate from min_val to max_val (inclusive)\n    for number in range(min_val, max_val + 1):\n        if number % 2 == 0:  # Check if the number is even\n            even_numbers.append(number)\n    \n    return even_numbers\n\n# Example usage:\n# result1 = generate_integers(2, 8)\n# print(result1)  # Output: [2, 4, 6, 8]\n# result2 = generate_integers(8, 2)\n# print(result2)  # Output: [2, 4, 6, 8]\n# result3 = generate_integers(10, 14)\n# print(result3)  # Output: []"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists 'operator' and 'operand'. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    - Addition ( + ) \n    - Subtraction ( - ) \n    - Multiplication ( * ) \n    - Floor division ( // ) \n    - Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    Parameters:\n    operator (list): List of strings where each string is one of the basic algebra operations.\n    operand (list): List of integers.\n\n    Returns:\n    int: The result of evaluating the algebraic expression constructed from the lists.\n    \"\"\"\n    \n    # Initialize the expression from the first operand\n    expression = str(operand[0])\n    \n    # Iterate over the operators and corresponding operands\n    for i in range(len(operator)):\n        # Append the operator and the next operand to the expression string\n        expression += operator[i] + str(operand[i + 1])\n        \n    # Use the eval function to evaluate the constructed expression\n    return eval(expression)\n\n# Example usage:\n# operator = ['+', '*', '-']\n# operand = [2, 3, 4, 5]\n# result = do_algebra(operator, operand)\n# print(result)  # Output: 9"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    The function should return an array of [ total number of eaten carrots after your meals,\n                                            the number of carrots left after your meals ]\n    If there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        The number of carrots that you have already eaten.\n    @need : integer\n        The number of carrots that you need to eat.\n    @remaining : integer\n        The number of remaining carrots that exist in stock.\n    \n    Return:\n    list : \n        A list containing the total number of eaten carrots after your meals,\n        and the number of carrots left after your meals.\n    \"\"\"\n    # Calculate the total number of carrots eaten after eating the needed amount\n    total_eaten = number + need\n    \n    # Calculate the number of remaining carrots after eating\n    if need <= remaining:\n        remaining_carrots = remaining - need\n    else:\n        total_eaten = number + remaining  # You can only eat as many as are remaining\n        remaining_carrots = 0  # No carrots left after eating\n    \n    # Return the result as a list\n    return [total_eaten, remaining_carrots]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10)) # Output: [11, 0]\nprint(eat(2, 11, 5))  # Output: [7, 0]"}
