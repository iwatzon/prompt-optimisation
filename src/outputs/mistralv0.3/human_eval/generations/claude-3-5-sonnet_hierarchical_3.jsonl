{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_numbers = []\n    for num in range(min(a, b), max(a, b) + 1):\n        if num > 0 and num % 2 == 0:\n            even_numbers.append(num)\n    return sorted(even_numbers)"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/6", "completion": "from collections import deque\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    levels = []\n    parentheses_stack = deque()\n\n    for char in paren_string:\n        if char == '(':\n            parentheses_stack.append(1)\n        elif char == ')':\n            if not parentheses_stack:\n                raise ValueError(\"Invalid input string\")\n            level = parentheses_stack.pop()\n            levels.append(max(level, len(parentheses_stack)))\n\n    return levels"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = []\n    current_min = min(lst)\n    while lst:\n        smallest = [x for x in lst if x == current_min]\n        if smallest:\n            sorted_lst.append(current_min)\n            lst.remove(current_min)\n            current_min = max(lst)\n        else:\n            current_min = min(lst)\n    return sorted_lst"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [None if i == 0 else (i+1)*xs[i-1] for i in range(1, len(xs))]"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    # Check if the list is empty or has only one element (in which case it's considered monotonically increasing)\n    if len(l) <= 1:\n        return True\n\n    # Iterate through the list and check if the current element is greater than or equal to the next one for a decreasing sequence,\n    # or less than or equal for an increasing sequence. If not, return False.\n    for i in range(len(l) - 1):\n        if l[i] > l[i+1]:\n            return False\n        elif l[i] < l[i+1]:\n            continue\n        else:\n            return False\n\n    # If no False is returned, the list is monotonically increasing or decreasing.\n    return True"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(set(numbers))"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    return reduce((lambda x, y: x * y), range(1, n + 1))"}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value if isinstance(value, int) else None for value in values if value is not None]"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0:\n            if num % 2 != 0:\n                sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    result = 0\n    for num in arr:\n        if sum(abs(digit) for digit in str(num)) > 0:\n            result += 1\n    return result"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]):\n    if not numbers:\n        return (0, 1)\n\n    sum_val = sum(numbers)\n    product_val = 1\n    for num in numbers:\n        product_val *= num\n\n    return (sum_val, product_val)"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i != 0:\n            i += 1\n        else:\n            n //= i\n\n    return n if n > 1 else i"}
{"task_id": "HumanEval/129", "completion": "from typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n            nx, ny = x + dx * grid[y][0], y + dy * grid[0][y]\n            if 0 <= nx < len(grid[0]) and 0 <= ny < len(grid) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append(grid[ny][nx])\n                res = dfs(nx, ny, path, visited)\n                if res is not None:\n                    return res\n                path.pop()\n        return None\n\n    visited = set()\n    for x in range(len(grid[0])):\n        for y in range(len(grid)):\n            path = [grid[y][x]]\n            visited.add((x, y))\n            res = dfs(x, y, path, visited)\n            if res is not None:\n                return sorted(res)\n    return []"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        else:\n            result += char\n    return result or s[::-1]  # If the string contains no letters, reverse it"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if isprime(len(word))]\n    return \" \".join(prime_words)\n\ndef isprime(n):\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) - 5 + 26) % 26 + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num *= -1\n\n    while num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n\n    return (count_even, count_odd)"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    evens, odds = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            evens += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            odds += 1\n    return evens, odds"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n\n    for i in range(len(nums)):\n        current_sum += nums[i]\n\n        start, end = i+1, i+1\n        while start < len(nums) and current_sum >= 0:\n            current_sum -= nums[start]\n            start += 1\n\n        if current_sum < min_sum:\n            min_sum = current_sum\n            smallest_subarray = [nums[j] for j in range(start, end)]\n\n        current_sum = 0\n        start, end = i+1, i+1\n\n    return min_sum"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    stack, result = [], []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] != '(':\n                return []  # Invalid parentheses structure\n            stack.pop()\n    if stack:\n        return []  # Unbalanced parentheses\n    return [''.join(stack[i:]) for i in range(len(stack) - 1, -1, -1)]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    if len(l) < 3 or len(set(l)) < 3:\n        return False\n\n    l.sort()\n\n    for i in range(len(l)-2):\n        left = i + 1\n        right = len(l) - 1\n\n        while left < right:\n            if l[i] + l[left] + l[right] == 0:\n                return True\n            elif l[i] + l[left] + l[right] > 0:\n                right -= 1\n            else:\n                left += 1\n\n    return False"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        result.append(diff)\n    return result"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, len(lst[i]) - j - 1))\n\n    # Sort by rows and then columns\n    result.sort()\n    for i in range(len(result) - 1):\n        for j in range(i + 1, len(result)):\n            if result[i][0] == result[j][0]:\n                if result[i][1] > result[j][1]:\n                    result[i], result[j] = result[j], result[i]\n            elif result[i][0] < result[j][0]:\n                result[i], result[j] = result[j], result[i]\n\n    return result"}
