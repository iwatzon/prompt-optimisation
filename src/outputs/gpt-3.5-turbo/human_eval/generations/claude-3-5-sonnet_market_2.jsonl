{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    # Initialize an empty string to store the concatenated result\n    result = ''\n    \n    # Iterate over each string in the input list\n    for string in strings:\n        # Concatenate each string to the result\n        result += string\n    \n    return result"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    # Initialize an empty list to store filtered integers\n    result = []\n    \n    # Iterate through each element in the input list\n    for value in values:\n        # Check if the element is an integer\n        if isinstance(value, int):\n            result.append(value)\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    if not lst:\n        return []\n\n    sorted_list = []\n    lst.sort()\n    while lst:\n        min_val = lst.pop(0)\n        sorted_list.append(min_val)\n        \n        if lst:\n            max_val = lst.pop()\n            sorted_list.append(max_val)\n\n    return sorted_list"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    result = []\n    \n    # Ensure a is smaller than b\n    if a > b:\n        a, b = b, a\n    \n    for num in range(a, b+1):\n        if num % 2 == 0:\n            result.append(num)\n    \n    return sorted(result)"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        return None  # Return None for invalid input\n\n    result = 1\n    for i in range(n, 0, -1):\n        factorial = 1\n        for j in range(i, 0, -1):\n            factorial *= j\n        result *= factorial\n\n    return result"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over numbers\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    \n    # Return tuple of sum and product\n    return total_sum, total_product"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list) -> list:\n    derivative_coeffs = []\n    \n    for i in range(1, len(xs)):\n        derivative_coeffs.append(xs[i] * i)\n    \n    return derivative_coeffs\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # Output: [2, 6]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list) -> int:\n    # Check if the list is empty\n    if not l:\n        return None\n\n    # Initialize max_val to the first element of the list\n    max_val = l[0]\n\n    # Iterate over the list to find the maximum element\n    for num in l:\n        if num > max_val:\n            max_val = num\n\n    return max_val"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    nested_levels = []\n    \n    for group in paren_string.split():\n        max_depth = 0\n        depth = 0\n        \n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        \n        nested_levels.append(max_depth)\n    \n    return nested_levels"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store filtered strings\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the current string\n        if substring in string:\n            # If the substring is found, add the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the filtered list\n    return filtered_strings"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if number is odd, valid, and add its square to sum\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum += num ** 2\n    \n    # Return the sum\n    return sum"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    if len(l) <= 1:\n        return True\n\n    is_increasing = True\n    is_decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            is_increasing = False\n        if l[i] > l[i - 1]:\n            is_decreasing = False\n\n    return is_increasing or is_decreasing"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_numbers = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n\n    return unique_numbers"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    Returns an encoded string by shifting every character by 5 in the alphabet.\n    \n    Parameters:\n    s (str): The input string to be encoded.\n    \n    Returns:\n    str: The encoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Takes as input a string encoded with encode_shift function and returns the decoded string.\n    \n    Parameters:\n    s (str): The encoded string to be decoded.\n    \n    Returns:\n    str: The decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Count the number of elements in the input list with a sum of digits greater than 0.\n    Negative numbers have their first signed digit as negative.\n\n    Args:\n    arr (list of integers): Input list of integers.\n\n    Returns:\n    int: Number of elements with sum of digits > 0.\n    \"\"\"\n    count = 0\n\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    # Get the length of the string\n    length = len(string)\n    \n    # Return the length\n    return length"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        temp = a + b\n        a, b = b, temp\n\n    return b"}
{"task_id": "HumanEval/161", "completion": "      def solve(s: str) -> str:\n      ```\n\n   b) Docstring Insights:\n      - The function takes a string `s` as input.\n      - If a character in `s` is a letter, reverse its case.\n      - If `s` contains no letters, reverse the string.\n      - Examples provided for clarity.\n\n   c) Key Requirements:\n      - Reverse the case of letters in the string.\n      - Reverse the string if it contains no letters.\n\n2. Logic Visualization:\n   \n   ```\n   +---------------------+\n   | Start               |\n   +---------------------+\n            |\n            v\n   +---------------------+\n   | Initialize result   |\n   +---------------------+\n            |\n            v\n   +---------------------+\n   | Loop through s      |\n   +---------------------+\n            |\n            v\n   +---------------------+\n   | Reverse case of letters |\n   +---------------------+\n            |\n            v\n   +---------------------+\n   | Reverse the string   |\n   +---------------------+\n            |\n            v\n   +---------------------+\n   | Return result        |\n   +---------------------+\n   ```\n\n3. \n   a) Essential Variables: `result` (to store the final result)\n\n   b) Main Algorithmic Steps:\n      - Initialize `result` as an empty string.\n      - Loop through each character in `s`.\n      - If the character is a letter, reverse its case.\n      - If no letters found, reverse the string.\n      - Return the `result`.\n\n   c) Potential Edge Cases:\n      - Empty input string.\n      - String with only non-letter characters.\n\n4. Code Crafting:\n"}
{"task_id": "HumanEval/59", "completion": "import math\n\ndef largest_prime_factor(n: int) -> int:\n    factor = 2\n\n    while factor <= math.isqrt(n):\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n\n    return n\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def explore_path(curr_path, visited, min_path):\n        if len(curr_path) == k:\n            if not min_path or curr_path < min_path:\n                return curr_path[:]\n            else:\n                return min_path[:]\n        \n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if (i, j) not in visited:\n                    new_path = curr_path + [grid[i][j]]\n                    new_visited = visited.union({(i, j)})\n                    min_path = explore_path(new_path, new_visited, min_path)\n        \n        return min_path\n\n    if k > len(grid) * len(grid[0]):\n        raise ValueError(\"k is greater than the total number of cells in the grid\")\n\n    start_path = []\n    start_visited = set()\n    result = explore_path(start_path, start_visited, [])\n    \n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, num + current_sum)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/155", "completion": "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int, int]:\n    even_count = 0\n    odd_count = 0\n\n    # Handle negative numbers by converting to positive\n    num = abs(num)\n\n    if num == 0:\n        return (1, 0)  # Special case for 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/143", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    if not sentence:\n        return \"\"\n    \n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = \"\"\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    for char in paren_string:\n        if char == \")\":\n            result.append(current_group + char)\n            current_group = \"\"\n        else:\n            current_group += char\n\n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/40", "completion": "from itertools import combinations\n\ndef triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n\n    for combo in combinations(l, 3):\n        if sum(combo) == 0:\n            return True\n\n    return False"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    if brackets and brackets[0] == '>':\n        return False\n\n    stack = []\n    bracket_pairs = {\">\": \"<\"}\n\n    for bracket in brackets:\n        if bracket in bracket_pairs.values():\n            stack.append(bracket)\n        elif bracket in bracket_pairs.keys():\n            if not stack or bracket_pairs[bracket] != stack.pop():\n                return False\n\n    return not stack"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, val in enumerate(row):\n            if val == x:\n                result.append((row_index, col_index))\n\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # Initialize an empty list to store the differences\n    diff_arr = []\n    \n    # Check if the lengths of game and guess lists are equal\n    if len(game) != len(guess):\n        raise ValueError(\"Lengths of game and guess lists should be equal.\")\n    \n    # Iterate through each match\n    for i in range(len(game)):\n        # Calculate the absolute difference between guess and score for each match\n        diff = abs(game[i] - guess[i])\n        # Append the difference to the list\n        diff_arr.append(diff)\n    \n    return diff_arr"}
