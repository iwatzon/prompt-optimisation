{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nfrom operator import mul\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n\n    sum_result = sum(numbers)\n    product_result = reduce(mul, numbers, 1)\n\n    return sum_result, product_result"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    if n <= 0:\n        return None\n\n    result = 1\n    factorial = 1\n\n    for i in range(1, n + 1):\n        factorial *= i\n        result *= factorial\n\n    return result\n\n# Test the function\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        if num < 0:\n            num = -num\n        return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n\n# Testing the function with the provided test cases\nprint(count_nums([]) == 0)\nprint(count_nums([-1, 11, -11]) == 1)\nprint(count_nums([1, 1, 2]) == 3)"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))  # Output: []"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    return [max_depth - 1 for _ in paren_string.split()]\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n\n    result = []\n    for num in range(a, b + 1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n\n    return result\n\n# Test cases\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    \n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    \n    return result\n\n# Test the function\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))         # Output: [2, 6]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    Takes as input a string encoded with encode_shift function and returns the decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            total += num ** 2\n    return total * 2\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))   # Output: 0\nprint(double_the_difference([9, -2]))       # Output: 81\nprint(double_the_difference([0]))           # Output: 0\nprint(double_the_difference([]))            # Output: 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # Output: True\nprint(monotonic([1, 20, 4, 10]))  # Output: False\nprint(monotonic([4, 1, 0, -10]))  # Output: True"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"Return length of given string\"\"\"\n    return len(string)"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    letters = [char for char in s if char.isalpha()]\n    \n    if not letters:\n        return s[::-1]\n    \n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    \n    return result\n\n# Test cases\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def smallest_prime_factor(num):\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return i\n        return num\n\n    while True:\n        factor = smallest_prime_factor(n)\n        if factor < n:\n            n //= factor\n        else:\n            return n\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == '(':\n            stack.append('(')\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    fib_cache = {0: 0, 1: 1}\n\n    def fibonacci(num):\n        if num in fib_cache:\n            return fib_cache[num]\n        fib_cache[num] = fibonacci(num - 1) + fibonacci(num - 2)\n        return fib_cache[num]\n\n    return fibonacci(n)\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    start = min((grid[i][j], i, j) for i in range(n) for j in range(n))[1:]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def isValid(x, y):\n        return 0 <= x < n and 0 <= y < n\n    \n    def dfs(x, y, path):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValid(nx, ny) and (nx, ny) not in path:\n                new_path = dfs(nx, ny, path + [(nx, ny)])\n                if min_path is None or new_path < min_path:\n                    min_path = new_path\n        \n        return min_path\n    \n    path = dfs(start[0], start[1], [start])\n    return [grid[x][y] for x, y in path]\n\n# Test cases\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))  # Output: [1]"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\n# Test cases\nprint(triangle_area(3, 4, 5))  # Output: 6.0\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n\n# Test cases\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))         # Output: -6"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    if num < 0:\n        num = abs(num)  # Convert negative number to positive for counting digits\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return even_count, odd_count\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))    # False\nprint(correct_bracketing(\"<>\"))    # True\nprint(correct_bracketing(\"<<><>>\"))    # True\nprint(correct_bracketing(\"><<>\"))    # False"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n    \n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
