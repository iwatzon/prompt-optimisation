{"task_id": "HumanEval/163", "completion": ""}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/6", "completion": ""}
{"task_id": "HumanEval/70", "completion": ""}
{"task_id": "HumanEval/62", "completion": ""}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True is list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(l) < 2:\n        return True\n    \n    # Initialize a flag to track whether the list is increasing or decreasing\n    is_increasing = l[0] <= l[-1]\n    \n    # Iterate over the list from the second element to the second last element\n    for i in range(1, len(l) - 1):\n        # If the current element is not greater than the previous one and not less than the next one,\n        # then the list is not monotonic\n        if (is_increasing and l[i] <= l[i-1]) or (not is_increasing and l[i] >= l[i+1]):\n            return False\n    \n    # If we have checked all elements and haven't returned False, then the list is monotonic\n    return True"}
{"task_id": "HumanEval/35", "completion": ""}
{"task_id": "HumanEval/26", "completion": ""}
{"task_id": "HumanEval/139", "completion": ""}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n    \n    Args:\n        values (List[Any]): A list containing any type of Python objects.\n    \n    Returns:\n        List[int]: A list containing only the integers from the input list.\n    \n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    # Use a list comprehension to create a new list that includes only the integers from the input list\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/151", "completion": ""}
{"task_id": "HumanEval/108", "completion": ""}
{"task_id": "HumanEval/8", "completion": ""}
{"task_id": "HumanEval/7", "completion": ""}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/55", "completion": ""}
{"task_id": "HumanEval/59", "completion": ""}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    Reverses the case of letters in a string and reverses the string if it contains no letters.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The modified string.\n    \"\"\"\n    result = \"\"\n    for char in s:\n        # Check if the character is an alphabet letter\n        if char.isalpha():\n            # If the character is a lower case letter, convert it to upper case and vice versa\n            result += char.swapcase()\n        else:\n            # If the character is not a letter, keep it as it is\n            result += char\n    \n    # Check if the resulting string contains any letters\n    if not any(char.isalpha() for char in result):\n        # If the string contains no letters, reverse the string\n        return result[::-1]\n    \n    # Return the modified string\n    return result"}
{"task_id": "HumanEval/143", "completion": ""}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])"}
{"task_id": "HumanEval/155", "completion": ""}
{"task_id": "HumanEval/107", "completion": ""}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    brackets is a string of \"<\" and \">\". \n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/114", "completion": ""}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if three sides form a valid triangle\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        \n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    \n    else:\n        # If three sides do not form a valid triangle, return -1\n        return -1"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n       separate those group into separate strings and return the list of those.\n       Separate groups are balanced (each open brace is properly closed) and not nested within each other\n       Ignore any spaces in the input string.\n       >>> separate_paren_groups('( ) (( )) (( )( ))')\n       ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = ''\n    \n    for char in paren_string:\n        if char == '(':\n            current_group += char\n        elif char == ')':\n            current_group += char\n            # Check if the group is balanced\n            balance = 0\n            for c in current_group:\n                if c == '(':\n                    balance += 1\n                else:\n                    balance -= 1\n            if balance == 0:\n                result.append(current_group)\n            current_group = ''\n    \n    return result"}
{"task_id": "HumanEval/40", "completion": ""}
{"task_id": "HumanEval/152", "completion": ""}
{"task_id": "HumanEval/87", "completion": ""}
