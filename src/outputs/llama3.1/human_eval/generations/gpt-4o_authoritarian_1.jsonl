{"task_id": "HumanEval/163", "completion": ""}
{"task_id": "HumanEval/28", "completion": ""}
{"task_id": "HumanEval/6", "completion": "[2, 3, 1, 3]"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    # If the list is empty, return it as it is\n    if not lst:\n        return lst\n    \n    # Initialize the result list with the minimum value from the input list\n    result = [min(lst)]\n    \n    # Remove the minimum value from the input list\n    lst.remove(min(lst))\n    \n    # While the input list is not empty\n    while lst:\n        # Find the maximum value in the remaining list\n        max_val = max(lst)\n        \n        # Add the maximum value to the result list\n        result.append(max_val)\n        \n        # Remove the maximum value from the input list\n        lst.remove(max_val)\n    \n    return result"}
{"task_id": "HumanEval/62", "completion": ""}
{"task_id": "HumanEval/57", "completion": ""}
{"task_id": "HumanEval/35", "completion": ""}
{"task_id": "HumanEval/26", "completion": ""}
{"task_id": "HumanEval/139", "completion": ""}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/151", "completion": ""}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"task_id": "HumanEval/8", "completion": ""}
{"task_id": "HumanEval/7", "completion": ""}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')  # Doctest example\n    0\n    >>> strlen('abc')  # Doctest example\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/55", "completion": ""}
{"task_id": "HumanEval/59", "completion": ""}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    result = []\n    \n    # Iterate over each character in the input string\n    for char in s:\n        # Check if the character is a letter\n        if char.isalpha():\n            # If it's a letter, reverse its case and add to the result list\n            result.append(char.swapcase())\n        else:\n            # If it's not a letter, just add it to the result list as is\n            result.append(char)\n    \n    # Join all characters in the result list into a string and return\n    return ''.join(result)"}
{"task_id": "HumanEval/143", "completion": ""}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num) # convert negative numbers to positive\n    count_even = 0\n    count_odd = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n            \n    return (count_even, count_odd)"}
{"task_id": "HumanEval/107", "completion": ""}
{"task_id": "HumanEval/56", "completion": ""}
{"task_id": "HumanEval/114", "completion": ""}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if three sides form a valid triangle\n    if (a + b > c) and (b + c > a) and (c + a > b):\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        \n        # Use Heron's formula to calculate the area of the triangle\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Round the area to 2 decimal points and return it\n        return round(area, 2)\n    \n    # If three sides do not form a valid triangle, return -1\n    else:\n        return -1\n\n# Test the function with example inputs\nprint(triangle_area(3, 4, 5))  # Expected output: 6.00\nprint(triangle_area(1, 2, 10))  # Expected output: -1"}
{"task_id": "HumanEval/1", "completion": ""}
{"task_id": "HumanEval/40", "completion": ""}
{"task_id": "HumanEval/152", "completion": ""}
{"task_id": "HumanEval/87", "completion": ""}
